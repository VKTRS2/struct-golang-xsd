// Code generated by download. DO NOT EDIT.

package iso20022_auth_090_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type ActiveOrHistoricCurrencyAnd20Amount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type AnyBICDec2014Identifier string

// May be one of ESTR, BBSW, BUBO, CDOR, CIBO, EONA, EONS, EURI, EUUS, EUCH, FUSW, GCFR, ISDA, JIBA, LIBI, LIBO, MOSP, MAAA, NIBO, PFAN, PRBO, STBO, SWAP, TLBO, TIBO, TREA, WIBO, SOFR, SONA
type BenchmarkCurveName3Code string

// May be one of FLCL, OWCL, PRCL, UNCL
type CollateralisationType1Code string

type Counterparty26 struct {
	Id         OrganisationIdentification7Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Id"`
	Ntr        CounterpartyTradeNature5Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Ntr,omitempty"`
	TradgCpcty TradingCapacity7Code              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 TradgCpcty,omitempty"`
	CtrPtySd   OptionParty1Code                  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 CtrPtySd,omitempty"`
}

type Counterparty29 struct {
	Id   OrganisationIdentification9Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Id"`
	Ctry CountryCode                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Ctry,omitempty"`
}

type CounterpartyTradeNature5Choice struct {
	FI           []FinancialPartySectorType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 FI,omitempty"`
	NFI          NonFinancialInstitutionSector2  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 NFI,omitempty"`
	CntrlCntrPty NoReasonCode                    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 CntrlCntrPty,omitempty"`
	Othr         NoReasonCode                    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Othr,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

// May be one of SBOD, SNDB, OTHR
type DebtInstrumentSeniorityType2Code string

type DerivativesTradePositionSetReportV01 struct {
	AggtdPos    PositionSetAggregated1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 AggtdPos"`
	SplmtryData []SupplementaryData1         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 SplmtryData,omitempty"`
}

type Document struct {
	DerivsTradPosSetRpt DerivativesTradePositionSetReportV01 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 DerivsTradPosSetRpt"`
}

type ExchangeRateBasis1 struct {
	BaseCcy ActiveCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 BaseCcy"`
	QtdCcy  ActiveCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 QtdCcy"`
}

type ExchangeRateBasis1Choice struct {
	CcyPair ExchangeRateBasis1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 CcyPair,omitempty"`
	Prtry   Max52Text          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Prtry,omitempty"`
}

// May be one of CFDS, FRAS, FUTR, FORW, OPTN, SPDB, SWAP, SWPT, OTHR
type FinancialInstrumentContractType2Code string

// May be one of AIFD, ASSU, CDTI, INUN, INVF, ORPI, REIN, UCIT, OTHR
type FinancialPartySectorType1Code string

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISORestrictedYear time.Time

func (t *ISORestrictedYear) UnmarshalText(text []byte) error {
	return (*xsdGYear)(t).UnmarshalText(text)
}
func (t ISORestrictedYear) MarshalText() ([]byte, error) {
	return xsdGYear(t).MarshalText()
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

type MasterAgreement2 struct {
	Tp   Max50Text         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Tp,omitempty"`
	Vrsn ISORestrictedYear `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Vrsn,omitempty"`
}

type MaturityTerm2 struct {
	Unit RateBasis1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Unit"`
	Val  float64        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Val"`
}

// May be no more than 105 items long
type Max105Text string

// May be no more than 350 items long
type Max350Text string

// May be no more than 500 items long
type Max500Text string

// May be no more than 50 items long
type Max50Text string

// May be no more than 52 items long
type Max52Text string

// Must match the pattern [A-U]{1,1}
type NACEDomainIdentifier string

// May be one of NORE
type NoReasonCode string

type NonFinancialInstitutionSector2 struct {
	Sctr            []NACEDomainIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Sctr,omitempty"`
	ClrThrshld      bool                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 ClrThrshld,omitempty"`
	DrctlyLkdActvty bool                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 DrctlyLkdActvty,omitempty"`
}

// May be one of SLLR, BYER
type OptionParty1Code string

// May be one of CALL, PUTO, OTHR
type OptionType2Code string

type OrganisationIdentification30 struct {
	Id   OrganisationIdentification8Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Id"`
	Nm   Max105Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Nm,omitempty"`
	Dmcl Max500Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Dmcl,omitempty"`
}

type OrganisationIdentification7Choice struct {
	LEI  LEIIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 LEI,omitempty"`
	Othr OrganisationIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Othr,omitempty"`
}

type OrganisationIdentification8Choice struct {
	ClntId Max50Text               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 ClntId,omitempty"`
	AnyBIC AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 AnyBIC,omitempty"`
}

type OrganisationIdentification9Choice struct {
	LEI    LEIIdentifier           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 LEI,omitempty"`
	ClntId Max50Text               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 ClntId,omitempty"`
	AnyBIC AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 AnyBIC,omitempty"`
}

type PositionSet4 struct {
	Dmnsns PositionSetCollateralDimensions2 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Dmnsns"`
	Mtrcs  PositionSetCollateralMetrics1    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Mtrcs"`
}

type PositionSet5 struct {
	Dmnsns PositionSetDimensions3 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Dmnsns"`
	Mtrcs  PositionSetMetrics1    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Mtrcs"`
}

type PositionSetAggregated1Choice struct {
	DataSetActn ReportPeriodActivity1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 DataSetActn,omitempty"`
	Rpt         PositionSetAggregated3    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Rpt,omitempty"`
}

type PositionSetAggregated3 struct {
	RefDt         ISODate        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 RefDt"`
	PosSet        []PositionSet5 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 PosSet,omitempty"`
	CcyPosSet     []PositionSet5 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 CcyPosSet,omitempty"`
	CollPosSet    []PositionSet4 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 CollPosSet,omitempty"`
	CcyCollPosSet []PositionSet4 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 CcyCollPosSet,omitempty"`
}

type PositionSetBuyerAndSeller1 struct {
	Buyr  PositionSetTotal1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Buyr,omitempty"`
	Sellr PositionSetTotal1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Sellr,omitempty"`
}

type PositionSetCollateralDimensions2 struct {
	CtrPtyId         TradeCounterpartyReport9     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 CtrPtyId,omitempty"`
	Collstn          CollateralisationType1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Collstn,omitempty"`
	Prtfl            Max52Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Prtfl,omitempty"`
	InitlMrgnPstdCcy ActiveOrHistoricCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 InitlMrgnPstdCcy,omitempty"`
	VartnMrgnPstdCcy ActiveOrHistoricCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 VartnMrgnPstdCcy,omitempty"`
	InitlMrgnRcvdCcy ActiveOrHistoricCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 InitlMrgnRcvdCcy,omitempty"`
	VartnMrgnRcvdCcy ActiveOrHistoricCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 VartnMrgnRcvdCcy,omitempty"`
	XcssCollPstdCcy  ActiveOrHistoricCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 XcssCollPstdCcy,omitempty"`
	XcssCollRcvdCcy  ActiveOrHistoricCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 XcssCollRcvdCcy,omitempty"`
}

type PositionSetCollateralMetrics1 struct {
	Ttl   PositionSetCollateralTotal1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Ttl,omitempty"`
	Clean PositionSetCollateralTotal1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Clean,omitempty"`
}

type PositionSetCollateralTotal1 struct {
	NbOfRpts  float64                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 NbOfRpts,omitempty"`
	InitlMrgn PositionSetPostedAndReceived1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 InitlMrgn,omitempty"`
	VartnMrgn PositionSetPostedAndReceived1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 VartnMrgn,omitempty"`
	XcssCsh   PositionSetPostedAndReceived1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 XcssCsh,omitempty"`
}

type PositionSetDimensions3 struct {
	CtrPtyId       TradeCounterpartyReport9             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 CtrPtyId,omitempty"`
	ValCcy         ActiveOrHistoricCurrencyCode         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 ValCcy,omitempty"`
	Collstn        CollateralisationType1Code           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Collstn,omitempty"`
	Prtfl          Max52Text                            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Prtfl,omitempty"`
	CtrctTp        FinancialInstrumentContractType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 CtrctTp,omitempty"`
	AsstClss       ProductType4Code                     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 AsstClss,omitempty"`
	UndrlygInstrm  SecurityIdentification34Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 UndrlygInstrm,omitempty"`
	FrstLegNtnlCcy ActiveCurrencyCode                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 FrstLegNtnlCcy,omitempty"`
	ScndLegNtnlCcy ActiveCurrencyCode                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 ScndLegNtnlCcy,omitempty"`
	DlvrblCcy      ActiveCurrencyCode                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 DlvrblCcy,omitempty"`
	DlvrblCrossCcy ActiveOrHistoricCurrencyCode         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 DlvrblCrossCcy,omitempty"`
	MstrAgrmt      MasterAgreement2                     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 MstrAgrmt,omitempty"`
	ClrSts         bool                                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 ClrSts,omitempty"`
	IntraGrp       bool                                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 IntraGrp,omitempty"`
	XchgRateBsis   ExchangeRateBasis1Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 XchgRateBsis,omitempty"`
	OptnTp         OptionType2Code                      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 OptnTp,omitempty"`
	TmToMtrty      TimeToMaturity1Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 TmToMtrty,omitempty"`
	IRSTp          Max52Text                            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 IRSTp,omitempty"`
	Snrty          DebtInstrumentSeniorityType2Code     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Snrty,omitempty"`
	Trch           bool                                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Trch,omitempty"`
	Cmmdty         Max52Text                            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Cmmdty,omitempty"`
}

type PositionSetMetrics1 struct {
	Ttl   PositionSetBuyerAndSeller1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Ttl,omitempty"`
	Clean PositionSetBuyerAndSeller1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Clean,omitempty"`
}

type PositionSetPostedAndReceived1 struct {
	Pstd ActiveOrHistoricCurrencyAnd20Amount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Pstd,omitempty"`
	Rcvd ActiveOrHistoricCurrencyAnd20Amount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Rcvd,omitempty"`
}

type PositionSetTotal1 struct {
	NbOfTrds float64                      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 NbOfTrds,omitempty"`
	Postv    PositionSetValueAndNotional1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Postv,omitempty"`
	Neg      PositionSetValueAndNotional1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Neg,omitempty"`
}

type PositionSetValueAndNotional1 struct {
	Ntnl ActiveOrHistoricCurrencyAnd20Amount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Ntnl,omitempty"`
	Val  ActiveOrHistoricCurrencyAnd20Amount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Val,omitempty"`
}

// May be one of CRDT, CURR, EQUI, INTR, COMM, OTHR
type ProductType4Code string

// May be one of DAYS, MNTH, WEEK, YEAR
type RateBasis1Code string

// May be one of NOTX
type ReportPeriodActivity1Code string

type SecurityIdentification18Choice struct {
	ISIN            ISINOct2015Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 ISIN,omitempty"`
	AltrntvInstrmId Max52Text             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 AltrntvInstrmId,omitempty"`
}

type SecurityIdentification34Choice struct {
	ISIN            ISINOct2015Identifier            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 ISIN,omitempty"`
	AltrntvInstrmId Max52Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 AltrntvInstrmId,omitempty"`
	UnqPdctIdr      Max52Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 UnqPdctIdr,omitempty"`
	BsktCnsttnts    []SecurityIdentification18Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 BsktCnsttnts,omitempty"`
	Indx            SecurityIdentification35Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Indx,omitempty"`
	IdNotAvlbl      UnderlyingIdentification1Code    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 IdNotAvlbl,omitempty"`
}

type SecurityIdentification35Choice struct {
	ISIN ISINOct2015Identifier   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 ISIN,omitempty"`
	Nm   Max350Text              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Nm,omitempty"`
	Indx BenchmarkCurveName3Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Indx,omitempty"`
}

// May be one of BLNK, NTAV
type SpecialPurpose2Code string

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type TimeToMaturity1Choice struct {
	Prd  TimeToMaturityPeriod1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Prd,omitempty"`
	Spcl SpecialPurpose2Code   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Spcl,omitempty"`
}

type TimeToMaturityPeriod1 struct {
	Start MaturityTerm2 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Start,omitempty"`
	End   MaturityTerm2 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 End,omitempty"`
}

type TradeCounterpartyReport9 struct {
	RptgCtrPty Counterparty26                    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 RptgCtrPty"`
	OthrCtrPty Counterparty29                    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 OthrCtrPty"`
	Brkr       OrganisationIdentification9Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Brkr,omitempty"`
	SubmitgAgt OrganisationIdentification9Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 SubmitgAgt,omitempty"`
	ClrMmb     OrganisationIdentification9Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 ClrMmb,omitempty"`
	Bnfcry     OrganisationIdentification9Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.090.001.01 Bnfcry,omitempty"`
}

// May be one of AGEN, PRIN
type TradingCapacity7Code string

// May be one of UKWN, BSKT, INDX
type UnderlyingIdentification1Code string

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdGYear time.Time

func (t *xsdGYear) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006")
}
func (t xsdGYear) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006")
}
func (t xsdGYear) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYear) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
