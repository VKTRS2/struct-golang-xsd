// Code generated by download. DO NOT EDIT.

package iso20022_fxtr_036_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AccountIdentification26 struct {
	Prtry SimpleIdentificationInformation4 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 Prtry"`
}

type AccountIdentification30 struct {
	AcctTp AccountInformationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 AcctTp"`
	Id     AccountIdentification26     `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 Id"`
}

// May be one of IBND, IBCC, IBDC, BIBC, BIBD, BINC, BIND, BICC, BIDC, CMSA, CBBC, CBBD, CBNC, CBND, CBCC, CBDC, CUAC, DEAC, FCAA, FCAN, FCBN, IBBC, IBBD, IBNC, MCAA, MCAN, MCIC, MCIN, MSAA, MSBN, MCAD, NODC, SCAC, SCAA, OMSA, NOCC, MSBS, MSAN, SCAN, SCIC, SCIN, SOCA, SSCA
type AccountInformationType1Code string

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type Document struct {
	FXTradConfReqCxlReq ForeignExchangeTradeConfirmationRequestCancellationRequestV01 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 FXTradConfReqCxlReq"`
}

type ForeignExchangeTradeConfirmationRequestCancellationRequestV01 struct {
	Hdr           Header23                         `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 Hdr"`
	CxlReqId      MessageIdentification1           `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 CxlReqId,omitempty"`
	TradgSdId     TradePartyIdentification7        `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 TradgSdId"`
	CtrPtyRoleId  TradePartyIdentification7        `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 CtrPtyRoleId"`
	TradId        Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 TradId"`
	UndrlygPdctTp UnderlyingProductIdentifier1Code `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 UndrlygPdctTp"`
	SplmtryData   []SupplementaryData1             `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 SplmtryData,omitempty"`
}

type FundIdentification3 struct {
	FndId         Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 FndId"`
	AcctIdWthCtdn Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 AcctIdWthCtdn,omitempty"`
	CtdnId        PartyIdentification19Choice `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 CtdnId,omitempty"`
}

type GenericIdentification32 struct {
	Id     Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 Id"`
	Tp     PartyType3Code `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 Tp,omitempty"`
	Issr   PartyType4Code `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 Issr,omitempty"`
	ShrtNm Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 ShrtNm,omitempty"`
}

type Header23 struct {
	FrmtVrsn Max6Text                `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 FrmtVrsn"`
	XchgId   Max3NumericText         `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 XchgId"`
	InitgPty GenericIdentification32 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 InitgPty"`
	RcptPty  GenericIdentification32 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 RcptPty,omitempty"`
	MsgSeqNb float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 MsgSeqNb"`
	CreDtTm  ISODateTime             `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 CreDtTm"`
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// May be one of BASC, BICO, CFET
type IdentificationType1Code string

// May be no more than 16 items long
type Max16Text string

// May be no more than 350 items long
type Max350Text string

// May be no more than 35 items long
type Max35Text string

// Must match the pattern [0-9]{1,3}
type Max3NumericText string

// May be no more than 6 items long
type Max6Text string

// May be no more than 70 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 CreDtTm"`
}

type NameAndAddress8 struct {
	Nm         Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 Nm"`
	Adr        PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 Adr,omitempty"`
	AltrntvIdr []Max35Text    `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 AltrntvIdr,omitempty"`
}

// May be one of SLLR, BYER
type OptionParty1Code string

// May be one of MAKE, TAKE
type OptionParty3Code string

type PartyIdentification19Choice struct {
	NmAndAdr NameAndAddress8       `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 NmAndAdr,omitempty"`
	AnyBIC   PartyIdentification44 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 AnyBIC,omitempty"`
}

type PartyIdentification44 struct {
	AnyBIC     AnyBICIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 AnyBIC"`
	AltrntvIdr []Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 AltrntvIdr,omitempty"`
}

type PartyIdentification78 struct {
	PtySrc    IdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 PtySrc,omitempty"`
	TradPtyId Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 TradPtyId"`
}

type PartyIdentification90 struct {
	IdTp PartyIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 IdTp"`
	Id   Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 Id"`
}

type PartyIdentificationAndAccount119 struct {
	PtyId  []PartyIdentification90   `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 PtyId"`
	AcctId []AccountIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 AcctId"`
}

// May be one of FXID, FXSN, INGN, IICS, IGBT, MAMA, MEOC, METY, NOMM, OSCO, PASS, PONU, POAD, RMID, SLCN, SLNF, TACN, TRCO, TANA, USIT, USNA, AUIT, BRID, CLIN, CMID, COIN, CMOT, CONU, CMIN, DECN, DEPA, ELCO, EXVE, FICO, FIID, FLCN, FLNF
type PartyIdentificationType1Code string

// May be one of OPOI, MERC, ACCP, ITAG, ACQR, CISS, DLIS
type PartyType3Code string

// May be one of MERC, ACCP, ITAG, ACQR, CISS, TAXH
type PartyType4Code string

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 Ctry"`
}

type SimpleIdentificationInformation4 struct {
	Id Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 Id"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type TradePartyIdentification7 struct {
	FndInf         FundIdentification3              `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 FndInf,omitempty"`
	BuyrOrSellrInd OptionParty1Code                 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 BuyrOrSellrInd"`
	InitrInd       OptionParty3Code                 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 InitrInd"`
	TradPtyId      PartyIdentification78            `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 TradPtyId"`
	SubmitgPty     PartyIdentificationAndAccount119 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01 SubmitgPty"`
}

// May be one of FORW, NDFO, SPOT, SWAP
type UnderlyingProductIdentifier1Code string

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}
