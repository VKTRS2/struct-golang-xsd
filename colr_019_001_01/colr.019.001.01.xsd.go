// Code generated by download. DO NOT EDIT.

package iso20022_colr_019_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type ActiveOrHistoricCurrencyAndAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

type AdditionalInformation24 struct {
	CollInstr Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 CollInstr,omitempty"`
	Note      Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Note,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AlternatePartyIdentification7 struct {
	IdTp    IdentificationType42Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 IdTp"`
	Ctry    CountryCode                `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Ctry"`
	AltrnId Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 AltrnId"`
}

type AmountAndDirection49 struct {
	Amt                 ActiveCurrencyAndAmount           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Amt"`
	CdtDbtInd           CreditDebitCode                   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 CdtDbtInd,omitempty"`
	OrgnlCcyAndOrdrdAmt ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 OrgnlCcyAndOrdrdAmt,omitempty"`
	FXDtls              ForeignExchangeTerms23            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 FXDtls,omitempty"`
}

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type AnyBICDec2014Identifier string

type BasketIdentificationAndEligibilitySetProfile1 struct {
	PrfrntlBsktIdNb    GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 PrfrntlBsktIdNb,omitempty"`
	FllbckStartgBsktId GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 FllbckStartgBsktId,omitempty"`
	ExclsnBsktId       GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 ExclsnBsktId,omitempty"`
	ElgbltySetPrfl     GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 ElgbltySetPrfl,omitempty"`
}

type BenchmarkCurveName13Choice struct {
	Cd    BenchmarkCurveName7Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Cd,omitempty"`
	Prtry GenericIdentification1  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Prtry,omitempty"`
}

// May be one of BBSW, BUBO, BCOL, CDOR, CIBO, CORA, CZNA, EONA, EONS, ESTR, EURI, EUUS, EUCH, EFFR, FUSW, GCFR, HKIO, ISDA, ETIO, JIBA, LIBI, LIBO, MOSP, MAAA, BJUO, NIBO, OBFR, PFAN, PRBO, RCTR, SOFR, SONA, STBO, SWAP, TLBO, TIBO, TOAR, TREA, WIBO
type BenchmarkCurveName7Code string

type BlockChainAddressWallet3 struct {
	Id Max140Text              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Id"`
	Tp GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Tp,omitempty"`
	Nm Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Nm,omitempty"`
}

// May be one of SIMP, COMP
type CalculationMethod1Code string

type CashAccountIdentification5Choice struct {
	IBAN  IBAN2007Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 IBAN,omitempty"`
	Prtry Max34Text          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Prtry,omitempty"`
}

type CashMovement8 struct {
	CshMvmnt                   CollateralEntryType1Code         `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 CshMvmnt"`
	CshAmt                     ActiveCurrencyAndAmount          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 CshAmt"`
	CshAcct                    CashAccountIdentification5Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 CshAcct,omitempty"`
	CollMvmnt                  bool                             `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 CollMvmnt"`
	ClntCshMvmntId             Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 ClntCshMvmntId,omitempty"`
	TrptyAgtSvcPrvdrCshMvmntId Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 TrptyAgtSvcPrvdrCshMvmntId,omitempty"`
}

type ClosingDate4Choice struct {
	Dt DateAndDateTime2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Dt,omitempty"`
	Cd Date3Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Cd,omitempty"`
}

type CollateralAmount18 struct {
	Tx                 AmountAndDirection49                    `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Tx,omitempty"`
	Termntn            AmountAndDirection49                    `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Termntn,omitempty"`
	Acrd               AmountAndDirection49                    `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Acrd,omitempty"`
	CmpndSmplAcrlClctn CalculationMethod1Code                  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 CmpndSmplAcrlClctn,omitempty"`
	PmtFrqcy           Frequency38Choice                       `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 PmtFrqcy,omitempty"`
	IntrstPmtDely      Max3NumericText                         `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 IntrstPmtDely,omitempty"`
	TxAmtBrkdwn        []CollateralTransactionAmountBreakdown2 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 TxAmtBrkdwn,omitempty"`
	ValSght            AmountAndDirection49                    `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 ValSght,omitempty"`
}

type CollateralDate2 struct {
	TradDt      ISODate                `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 TradDt,omitempty"`
	ReqdExctnDt DateAndDateTime2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 ReqdExctnDt,omitempty"`
	SttlmDt     ISODate                `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 SttlmDt,omitempty"`
}

// May be one of DELI, RECE
type CollateralEntryType1Code string

type CollateralParameters10 struct {
	CollInstrTp             CollateralTransactionType1Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 CollInstrTp"`
	XpsrTp                  ExposureType23Choice                          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 XpsrTp"`
	CollSd                  CollateralRole1Code                           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 CollSd"`
	ValSghtMrgnRate         RateOrType1Choice                             `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 ValSghtMrgnRate,omitempty"`
	TrfTitl                 bool                                          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 TrfTitl,omitempty"`
	SttlmPrc                GenericIdentification30                       `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 SttlmPrc,omitempty"`
	Prty                    GenericIdentification30                       `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Prty,omitempty"`
	AutomtcAllcn            bool                                          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 AutomtcAllcn,omitempty"`
	FaildSttlmSlvtn         bool                                          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 FaildSttlmSlvtn,omitempty"`
	MainTradgAcctCollstn    bool                                          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 MainTradgAcctCollstn,omitempty"`
	BsktIdAndElgbltySetPrfl BasketIdentificationAndEligibilitySetProfile1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 BsktIdAndElgbltySetPrfl,omitempty"`
	RspnSts                 ResponseStatus9Choice                         `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 RspnSts,omitempty"`
	AddtlInf                AdditionalInformation24                       `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 AddtlInf,omitempty"`
}

type CollateralParties10 struct {
	PtyA     PartyIdentificationAndAccount202 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 PtyA"`
	ClntPtyA PartyIdentificationAndAccount202 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 ClntPtyA,omitempty"`
	PtyB     PartyIdentificationAndAccount203 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 PtyB"`
	ClntPtyB PartyIdentificationAndAccount203 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 ClntPtyB,omitempty"`
	TrptyAgt PartyIdentification136           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 TrptyAgt,omitempty"`
	CollAcct SecuritiesAccount19              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 CollAcct,omitempty"`
}

// May be one of GIVE, TAKE
type CollateralRole1Code string

type CollateralTransactionAmountBreakdown2 struct {
	LotNb GenericIdentification178          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 LotNb"`
	TxAmt ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 TxAmt,omitempty"`
	Prd   Period4Choice                     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Prd,omitempty"`
}

type CollateralTransactionType1Choice struct {
	Cd    CollateralTransactionType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Cd,omitempty"`
	Prtry GenericIdentification30        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Prtry,omitempty"`
}

// May be one of AADJ, CDTA, CADJ, DADJ, DBVT, INIT, MADJ, PADJ, RATA, TERM
type CollateralTransactionType1Code string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

// May be one of CRDT, DBIT
type CreditDebitCode string

type CrystallisationDay1 struct {
	Day bool            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Day"`
	Prd Max3NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Prd,omitempty"`
}

type Date3Choice struct {
	Cd    DateType2Code           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Cd,omitempty"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Prtry,omitempty"`
}

type DateAndDateTime2Choice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Dt,omitempty"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 DtTm,omitempty"`
}

// May be one of OPEN
type DateType2Code string

type DealTransactionDetails5 struct {
	PlcOfTrad           PlaceOfTradeIdentification1            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 PlcOfTrad,omitempty"`
	CncntrtnLmt         bool                                   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 CncntrtnLmt,omitempty"`
	MinNtcePrd          Exact3NumericText                      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 MinNtcePrd,omitempty"`
	ClsgDt              ClosingDate4Choice                     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 ClsgDt"`
	DealDtlsAmt         CollateralAmount18                     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 DealDtlsAmt,omitempty"`
	PricgRateAndIndx    RateOrName4Choice                      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 PricgRateAndIndx,omitempty"`
	OvrnghtFrqcyRateFxg FrequencyRateFixing1Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 OvrnghtFrqcyRateFxg,omitempty"`
	Sprd                float64                                `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Sprd,omitempty"`
	DayCntBsis          InterestComputationMethodFormat4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 DayCntBsis,omitempty"`
	Pmt                 DeliveryReceiptType2Code               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Pmt,omitempty"`
	OptnTp              OptionType6Choice                      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 OptnTp,omitempty"`
	TermntnOptn         RepoTerminationOption1Code             `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 TermntnOptn,omitempty"`
}

// May be one of FREE, APMT
type DeliveryReceiptType2Code string

type Document struct {
	TrptyCollTxInstr TripartyCollateralTransactionInstructionV01 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 TrptyCollTxInstr"`
}

type DocumentNumber5Choice struct {
	ShrtNb  Exact3NumericText                 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 ShrtNb,omitempty"`
	LngNb   ISO20022MessageIdentificationText `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 LngNb,omitempty"`
	PrtryNb GenericIdentification36           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 PrtryNb,omitempty"`
}

// May be one of ADHO, YEAR, DAIL, TOMN, TOWK, INDA, MNTH, QUTR, SEMI, TWMN, WEEK, ONDE
type EventFrequency12Code string

// Must match the pattern [0-9]{3}
type Exact3NumericText string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// May be one of BFWD, PAYM, CBCO, COMM, CRDS, CRTL, CRSP, CCIR, CRPR, EQPT, EQUS, EXTD, EXPT, FIXI, FORX, FORW, FUTR, OPTN, LIQU, OTCD, RVPO, SLOA, SBSC, SCRP, SLEB, SCIR, SCIE, SWPT, TBAS, TRCP, UDMS, CCPC, EQUI, TRBD, REPO, SHSL, MGLD
type ExposureType14Code string

type ExposureType23Choice struct {
	Cd    ExposureType14Code      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Cd,omitempty"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Prtry,omitempty"`
}

// May be no more than 4 items long
type ExternalFinancialInstrumentIdentificationType1Code string

type FinancialInstrumentQuantity33Choice struct {
	Unit        float64 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Unit,omitempty"`
	FaceAmt     float64 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 FaceAmt,omitempty"`
	AmtsdVal    float64 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 AmtsdVal,omitempty"`
	DgtlTknUnit float64 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 DgtlTknUnit,omitempty"`
}

type ForeignExchangeTerms23 struct {
	UnitCcy  ActiveCurrencyCode      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 UnitCcy"`
	QtdCcy   ActiveCurrencyCode      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 QtdCcy"`
	XchgRate float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 XchgRate"`
	RsltgAmt ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 RsltgAmt"`
}

type Frequency38Choice struct {
	Cd    EventFrequency12Code    `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Cd,omitempty"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Prtry,omitempty"`
}

type FrequencyRateFixing1Choice struct {
	Cd       FrequencyRateFixing1Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Cd,omitempty"`
	NbOfDays Max3NumericText          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 NbOfDays,omitempty"`
}

// May be one of NONE, OVNG, PRDC
type FrequencyRateFixing1Code string

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Issr,omitempty"`
}

type GenericIdentification178 struct {
	Id   Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Id"`
	Issr Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Issr,omitempty"`
}

type GenericIdentification30 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 SchmeNm,omitempty"`
}

type GenericIdentification36 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 SchmeNm,omitempty"`
}

// Must match the pattern [A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}
type IBAN2007Identifier string

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

// Must match the pattern [a-z]{4}\.[0-9]{3}\.[0-9]{3}\.[0-9]{2}
type ISO20022MessageIdentificationText string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource3Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Cd,omitempty"`
	Prtry Max35Text                                          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Prtry,omitempty"`
}

type IdentificationType42Choice struct {
	Cd    TypeOfIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Cd,omitempty"`
	Prtry GenericIdentification30   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Prtry,omitempty"`
}

// May be one of A001, A002, A003, A004, A005, A006, A007, A008, A009, A010, A011, A012, A013, A014, NARR
type InterestComputationMethod2Code string

type InterestComputationMethodFormat4Choice struct {
	Cd    InterestComputationMethod2Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Cd,omitempty"`
	Prtry GenericIdentification30        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Prtry,omitempty"`
}

// May be one of INDA, MNTH, YEAR, TOMN, QUTR, FOMN, SEMI, OVNG, WEEK, TOWK
type InterestRateIndexTenor2Code string

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

type Linkages58 struct {
	MsgNb DocumentNumber5Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 MsgNb,omitempty"`
	Refs  References70Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Refs"`
}

// Must match the pattern [A-Z0-9]{4,4}
type MICIdentifier string

type MarketIdentification1Choice struct {
	MktIdrCd MICIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 MktIdrCd,omitempty"`
	Desc     Max35Text     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Desc,omitempty"`
}

type MarketIdentification84 struct {
	Id MarketIdentification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Id,omitempty"`
	Tp MarketType8Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Tp"`
}

// May be one of PRIM, SECM, OTCO, VARI, EXCH
type MarketType2Code string

type MarketType8Choice struct {
	Cd    MarketType2Code         `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Cd,omitempty"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Prtry,omitempty"`
}

// May be no more than 140 items long
type Max140Text string

// May be no more than 16 items long
type Max16Text string

// May be no more than 34 items long
type Max34Text string

// May be no more than 350 items long
type Max350Text string

// May be no more than 35 items long
type Max35Text string

// Must match the pattern [0-9]{1,3}
type Max3NumericText string

// May be no more than 52 items long
type Max52Text string

// Must match the pattern [0-9]{1,5}
type Max5NumericText string

// May be no more than 70 items long
type Max70Text string

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Adr,omitempty"`
}

// May be one of CALL, PUTO
type OptionType1Code string

type OptionType6Choice struct {
	Cd    OptionType1Code         `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Cd,omitempty"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Prtry,omitempty"`
}

type OtherIdentification1 struct {
	Id  Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Sfx,omitempty"`
	Tp  IdentificationSource3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Tp"`
}

type OtherParties38 struct {
	Issr   PartyIdentification136   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Issr,omitempty"`
	Invstr []PartyIdentification149 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Invstr,omitempty"`
}

type Pagination1 struct {
	PgNb      Max5NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 PgNb"`
	LastPgInd bool            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 LastPgInd"`
}

type PartyIdentification120Choice struct {
	AnyBIC   AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 AnyBIC,omitempty"`
	PrtryId  GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 PrtryId,omitempty"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 NmAndAdr,omitempty"`
}

type PartyIdentification134Choice struct {
	AnyBIC   AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 AnyBIC,omitempty"`
	PrtryId  GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 PrtryId,omitempty"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 NmAndAdr,omitempty"`
	Ctry     CountryCode             `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Ctry,omitempty"`
}

type PartyIdentification136 struct {
	Id  PartyIdentification120Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Id"`
	LEI LEIIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 LEI,omitempty"`
}

type PartyIdentification149 struct {
	Id  PartyIdentification134Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Id"`
	LEI LEIIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 LEI,omitempty"`
}

type PartyIdentificationAndAccount202 struct {
	Id                 PartyIdentification120Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Id"`
	LEI                LEIIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 LEI,omitempty"`
	AltrnId            AlternatePartyIdentification7 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 AltrnId,omitempty"`
	SfkpgAcct          SecuritiesAccount19           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 SfkpgAcct,omitempty"`
	BlckChainAdrOrWllt BlockChainAddressWallet3      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 BlckChainAdrOrWllt,omitempty"`
	AcctOwnr           PartyIdentification136        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 AcctOwnr,omitempty"`
	PtyCpcty           TradingPartyCapacity5Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 PtyCpcty,omitempty"`
}

type PartyIdentificationAndAccount203 struct {
	Id                 PartyIdentification120Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Id"`
	LEI                LEIIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 LEI,omitempty"`
	AltrnId            AlternatePartyIdentification7 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 AltrnId,omitempty"`
	SfkpgAcct          SecuritiesAccount19           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 SfkpgAcct,omitempty"`
	BlckChainAdrOrWllt BlockChainAddressWallet3      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 BlckChainAdrOrWllt,omitempty"`
	PtyCpcty           TradingPartyCapacity5Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 PtyCpcty,omitempty"`
}

type Period2 struct {
	FrDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 FrDt"`
	ToDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 ToDt"`
}

type Period4Choice struct {
	Dt       ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Dt,omitempty"`
	FrDt     ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 FrDt,omitempty"`
	ToDt     ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 ToDt,omitempty"`
	FrDtToDt Period2 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 FrDtToDt,omitempty"`
}

type PlaceOfTradeIdentification1 struct {
	MktTpAndId MarketIdentification84 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 MktTpAndId,omitempty"`
	LEI        LEIIdentifier          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 LEI,omitempty"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Ctry"`
}

type RateOrName4Choice struct {
	Rate         float64              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Rate,omitempty"`
	RateIndxDtls RateTypeAndLookback2 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 RateIndxDtls,omitempty"`
}

type RateOrType1Choice struct {
	Rate float64                `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Rate,omitempty"`
	Tp   GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Tp,omitempty"`
}

type RateTypeAndLookback2 struct {
	Tp          BenchmarkCurveName13Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Tp"`
	LookBckDays Max3NumericText              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 LookBckDays,omitempty"`
	CrstllstnDt CrystallisationDay1          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 CrstllstnDt,omitempty"`
	Tnr         InterestRateIndexTenor2Code  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Tnr,omitempty"`
	Ccy         ActiveOrHistoricCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Ccy,omitempty"`
}

type References70Choice struct {
	ClntCollInstrId             Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 ClntCollInstrId,omitempty"`
	TrptyAgtSvcPrvdrCollInstrId Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 TrptyAgtSvcPrvdrCollInstrId,omitempty"`
}

// May be one of EGRN, ETSB
type RepoTerminationOption1Code string

// May be one of CONF, DKNY
type ResponseStatus2Code string

type ResponseStatus9Choice struct {
	Cd    ResponseStatus2Code     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Cd,omitempty"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Prtry,omitempty"`
}

type SecuritiesAccount19 struct {
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Id"`
	Tp GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Tp,omitempty"`
	Nm Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Nm,omitempty"`
}

type SecuritiesMovement9 struct {
	SctiesMvmntTp                 CollateralEntryType1Code            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 SctiesMvmntTp"`
	FinInstrmId                   SecurityIdentification19            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 FinInstrmId"`
	Qty                           FinancialInstrumentQuantity33Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Qty"`
	SfkpgAcct                     SecuritiesAccount19                 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 SfkpgAcct,omitempty"`
	BlckChainAdrOrWllt            BlockChainAddressWallet3            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 BlckChainAdrOrWllt,omitempty"`
	CollMvmnt                     bool                                `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 CollMvmnt"`
	ClntSctiesMvmntId             Max35Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 ClntSctiesMvmntId,omitempty"`
	TrptyAgtSvcPrvdrSctiesMvmntId Max35Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 TrptyAgtSvcPrvdrSctiesMvmntId,omitempty"`
}

type SecurityIdentification19 struct {
	ISIN   ISINOct2015Identifier  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 ISIN,omitempty"`
	OthrId []OtherIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 OthrId,omitempty"`
	Desc   Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Desc,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

// May be one of AGEN, PRIN
type TradingCapacity7Code string

type TradingPartyCapacity5Choice struct {
	Cd    TradingCapacity7Code    `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Cd,omitempty"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Prtry,omitempty"`
}

type TransactionIdentifications45 struct {
	ClntCollInstrId             Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 ClntCollInstrId"`
	ClntCollTxId                Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 ClntCollTxId,omitempty"`
	TrptyAgtSvcPrvdrCollInstrId Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 TrptyAgtSvcPrvdrCollInstrId,omitempty"`
	TrptyAgtSvcPrvdrCollTxId    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 TrptyAgtSvcPrvdrCollTxId,omitempty"`
	CmonTxId                    Max52Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 CmonTxId,omitempty"`
}

type TripartyCollateralTransactionInstructionV01 struct {
	TxInstrId   TransactionIdentifications45 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 TxInstrId"`
	Lnkgs       []Linkages58                 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Lnkgs,omitempty"`
	Pgntn       Pagination1                  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 Pgntn"`
	GnlParams   CollateralParameters10       `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 GnlParams"`
	CollPties   CollateralParties10          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 CollPties"`
	DealTxDtls  DealTransactionDetails5      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 DealTxDtls"`
	DealTxDt    CollateralDate2              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 DealTxDt"`
	SctiesMvmnt []SecuritiesMovement9        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 SctiesMvmnt,omitempty"`
	CshMvmnt    []CashMovement8              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 CshMvmnt,omitempty"`
	OthrPties   OtherParties38               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 OthrPties,omitempty"`
	SplmtryData []SupplementaryData1         `xml:"urn:iso:std:iso:20022:tech:xsd:colr.019.001.01 SplmtryData,omitempty"`
}

// May be one of ARNU, CCPT, CHTY, CORP, DRLC, FIIN, TXID
type TypeOfIdentification1Code string

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
