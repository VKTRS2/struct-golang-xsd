// Code generated by download. DO NOT EDIT.

package iso20022_auth_016_001_02

import (
	"bytes"
	"encoding/xml"
	"time"
)

type ActiveCurrencyAnd13DecimalAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type ActiveOrHistoricCurrencyAndAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

type AmountAndDirection53 struct {
	Amt ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Amt"`
	Sgn bool                              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Sgn,omitempty"`
}

type AmountAndDirection61 struct {
	Amt ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Amt"`
	Sgn bool                             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Sgn,omitempty"`
}

type AssetClassAttributes1 struct {
	Intrst DerivativeInterest2        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Intrst"`
	FX     DerivativeForeignExchange2 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 FX"`
}

type AssetClassAttributes1Choice struct {
	Intrst DerivativeInterest2        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Intrst,omitempty"`
	FX     DerivativeForeignExchange2 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 FX,omitempty"`
	Both   AssetClassAttributes1      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Both,omitempty"`
}

type BasketDescription4 struct {
	ISIN []ISIN2021Identifier    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 ISIN,omitempty"`
	Indx []FinancialInstrument98 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Indx,omitempty"`
}

// May be one of WIBO, TREA, TIBO, TLBO, SWAP, STBO, PRBO, PFAN, NIBO, MAAA, MOSP, LIBO, LIBI, JIBA, ISDA, GCFR, FUSW, EUCH, EUUS, EURI, EONS, EONA, CIBO, CDOR, BUBO, BBSW
type BenchmarkCurveName2Code string

type BenchmarkCurveName5Choice struct {
	Indx BenchmarkCurveName2Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Indx,omitempty"`
	Nm   Max25Text               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Nm,omitempty"`
}

// Must match the pattern [A-Z]{6,6}
type CFIOct2015Identifier string

// May be one of CANI, CSUB
type CancelledStatusReason15Code string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DebtInstrument4 struct {
	MtrtyDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 MtrtyDt"`
}

type DerivativeForeignExchange2 struct {
	OthrNtnlCcy ActiveOrHistoricCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 OthrNtnlCcy"`
}

type DerivativeInstrument9 struct {
	XpryDt               ISODate                           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 XpryDt,omitempty"`
	PricMltplr           float64                           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 PricMltplr"`
	UndrlygInstrm        UnderlyingIdentification3Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 UndrlygInstrm"`
	OptnTp               OptionType2Code                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 OptnTp,omitempty"`
	StrkPric             SecuritiesTransactionPrice4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 StrkPric,omitempty"`
	OptnExrcStyle        OptionStyle7Code                  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 OptnExrcStyle,omitempty"`
	DlvryTp              PhysicalTransferType4Code         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 DlvryTp"`
	AsstClssSpcfcAttrbts AssetClassAttributes1Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 AsstClssSpcfcAttrbts,omitempty"`
}

type DerivativeInterest2 struct {
	OthrNtnlCcy ActiveOrHistoricCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 OthrNtnlCcy"`
}

type Document struct {
	FinInstrmRptgTxRpt FinancialInstrumentReportingTransactionReportV02 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 FinInstrmRptgTxRpt"`
}

type ExecutingParty1Choice struct {
	Prsn PersonIdentification12 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Prsn,omitempty"`
	Algo Max50Text              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Algo,omitempty"`
	Clnt NoReasonCode           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Clnt,omitempty"`
}

// May be no more than 4 items long
type ExternalAuthorityExchangeReason1Code string

// May be no more than 4 items long
type ExternalPersonIdentification1Code string

type FinancialInstrument98 struct {
	ISIN ISIN2021Identifier    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 ISIN,omitempty"`
	Nm   FloatingInterestRate8 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Nm"`
}

type FinancialInstrumentAttributes4Choice struct {
	Id   ISIN2021Identifier              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Id,omitempty"`
	Othr SecurityInstrumentDescription19 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Othr,omitempty"`
}

type FinancialInstrumentIdentification8Choice struct {
	Sngl FinancialInstrumentIdentification9Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Sngl,omitempty"`
	Bskt BasketDescription4                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Bskt,omitempty"`
}

type FinancialInstrumentIdentification9Choice struct {
	ISIN ISIN2021Identifier    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 ISIN,omitempty"`
	Indx FinancialInstrument98 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Indx,omitempty"`
}

type FinancialInstrumentQuantity25Choice struct {
	Unit     float64                           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Unit,omitempty"`
	NmnlVal  ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 NmnlVal,omitempty"`
	MntryVal ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 MntryVal,omitempty"`
}

type FinancialInstrumentReportingTransactionReportV02 struct {
	Tx          []ReportingTransactionType2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Tx"`
	SplmtryData []SupplementaryData1              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 SplmtryData,omitempty"`
}

type FloatingInterestRate8 struct {
	RefRate BenchmarkCurveName5Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 RefRate"`
	Term    InterestRateContractTerm2 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Term,omitempty"`
}

type GenericPersonIdentification1 struct {
	Id      Max35Text                             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Id"`
	SchmeNm PersonIdentificationSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 SchmeNm,omitempty"`
	Issr    Max35Text                             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Issr,omitempty"`
}

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISIN2021Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type InterestRateContractTerm2 struct {
	Unit RateBasis1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Unit"`
	Val  float64        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Val"`
}

// May be one of INTC
type InternalPartyRole1Code string

type InvestmentParty1Choice struct {
	Prsn PersonIdentification12 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Prsn,omitempty"`
	Algo Max50Text              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Algo,omitempty"`
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

// Must match the pattern [A-Z0-9]{4,4}
type MICIdentifier string

// May be no more than 140 items long
type Max140Text string

// May be no more than 25 items long
type Max25Text string

// May be no more than 350 items long
type Max350Text string

// May be no more than 35 items long
type Max35Text string

// May be no more than 50 items long
type Max50Text string

// May be no more than 52 items long
type Max52Text string

// May be one of NORE
type NoReasonCode string

// May be one of AMER, ASIA, BERM, EURO, OTHR
type OptionStyle7Code string

// May be one of CALL, PUTO, OTHR
type OptionType2Code string

type PartyIdentification76 struct {
	Id          PersonOrOrganisation1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Id"`
	CtryOfBrnch CountryCode                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 CtryOfBrnch,omitempty"`
}

type PartyIdentification79 struct {
	AcctOwnr []PartyIdentification76       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 AcctOwnr"`
	DcsnMakr []PersonOrOrganisation2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 DcsnMakr,omitempty"`
}

type PersonIdentification10 struct {
	FrstNm  Max140Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 FrstNm"`
	Nm      Max140Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Nm"`
	BirthDt ISODate                      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 BirthDt"`
	Othr    GenericPersonIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Othr"`
}

type PersonIdentification12 struct {
	CtryOfBrnch CountryCode                  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 CtryOfBrnch"`
	Othr        GenericPersonIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Othr"`
}

type PersonIdentificationSchemeName1Choice struct {
	Cd    ExternalPersonIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Cd,omitempty"`
	Prtry Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Prtry,omitempty"`
}

type PersonOrOrganisation1Choice struct {
	LEI  LEIIdentifier          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 LEI,omitempty"`
	MIC  MICIdentifier          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 MIC,omitempty"`
	Prsn PersonIdentification10 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Prsn,omitempty"`
	Intl InternalPartyRole1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Intl,omitempty"`
}

type PersonOrOrganisation2Choice struct {
	LEI  LEIIdentifier          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 LEI,omitempty"`
	Prsn PersonIdentification10 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Prsn,omitempty"`
}

// May be one of PHYS, OPTL, CASH
type PhysicalTransferType4Code string

// May be one of PNDG, NOAP
type PriceStatus1Code string

// May be one of DAYS, MNTH, WEEK, YEAR
type RateBasis1Code string

type RecordTechnicalData2 struct {
	RctDtTm ISODateTime                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 RctDtTm"`
	CxlRsn  CancelledStatusReason15Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 CxlRsn"`
}

type RecordTechnicalData5 struct {
	RctDtTm ISODateTime                            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 RctDtTm"`
	XchgRsn []ExternalAuthorityExchangeReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 XchgRsn"`
}

// May be one of MTCH, DEAL, AOTC
type RegulatoryTradingCapacity1Code string

type ReportingTransactionType2Choice struct {
	New         SecuritiesTransactionReport6 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 New,omitempty"`
	Cxl         SecuritiesTransactionReport2 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Cxl,omitempty"`
	SplmtryData []SupplementaryData1         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 SplmtryData,omitempty"`
}

// May be one of OILQ, NLIQ, PRIC, ILQD, RFPT, SIZE
type ReportingWaiverType1Code string

// May be one of BENC, ACTX, ILQD, SIZE, CANC, AMND, SDIV, RPRI, DUPL, LRGS, TNCP, TPAC, XFPH
type ReportingWaiverType3Code string

type SecuritiesTransaction1 struct {
	TradDt           ISODateTime                         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 TradDt"`
	TradgCpcty       RegulatoryTradingCapacity1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 TradgCpcty"`
	Qty              FinancialInstrumentQuantity25Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Qty"`
	DerivNtnlChng    VariationType1Code                  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 DerivNtnlChng,omitempty"`
	Pric             SecuritiesTransactionPrice4Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Pric"`
	NetAmt           float64                             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 NetAmt,omitempty"`
	TradVn           MICIdentifier                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 TradVn"`
	CtryOfBrnch      CountryCode                         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 CtryOfBrnch,omitempty"`
	UpFrntPmt        AmountAndDirection53                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 UpFrntPmt,omitempty"`
	TradPlcMtchgId   Max52Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 TradPlcMtchgId,omitempty"`
	CmplxTradCmpntId Max35Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 CmplxTradCmpntId,omitempty"`
}

type SecuritiesTransactionIndicator2 struct {
	WvrInd           []ReportingWaiverType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 WvrInd,omitempty"`
	ShrtSellgInd     Side5Code                  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 ShrtSellgInd,omitempty"`
	OTCPstTradInd    []ReportingWaiverType3Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 OTCPstTradInd,omitempty"`
	RskRdcgTx        bool                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 RskRdcgTx,omitempty"`
	SctiesFincgTxInd bool                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 SctiesFincgTxInd"`
}

type SecuritiesTransactionPrice1 struct {
	Pdg PriceStatus1Code             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Pdg"`
	Ccy ActiveOrHistoricCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Ccy,omitempty"`
}

type SecuritiesTransactionPrice2Choice struct {
	MntryVal AmountAndDirection61 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 MntryVal,omitempty"`
	Pctg     float64              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Pctg,omitempty"`
	Yld      float64              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Yld,omitempty"`
	BsisPts  float64              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 BsisPts,omitempty"`
}

type SecuritiesTransactionPrice4Choice struct {
	Pric   SecuritiesTransactionPrice2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Pric,omitempty"`
	NoPric SecuritiesTransactionPrice1       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 NoPric,omitempty"`
}

type SecuritiesTransactionReport2 struct {
	TxId        Max52Text            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 TxId"`
	ExctgPty    LEIIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 ExctgPty"`
	SubmitgPty  LEIIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 SubmitgPty"`
	TechAttrbts RecordTechnicalData2 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 TechAttrbts,omitempty"`
	SplmtryData []SupplementaryData1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 SplmtryData,omitempty"`
}

type SecuritiesTransactionReport6 struct {
	TxId            Max52Text                            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 TxId"`
	ExctgPty        LEIIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 ExctgPty"`
	InvstmtPtyInd   bool                                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 InvstmtPtyInd"`
	SubmitgPty      LEIIdentifier                        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 SubmitgPty"`
	Buyr            PartyIdentification79                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Buyr"`
	Sellr           PartyIdentification79                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Sellr"`
	OrdrTrnsmssn    SecuritiesTransactionTransmission2   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 OrdrTrnsmssn"`
	Tx              SecuritiesTransaction1               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Tx"`
	FinInstrm       FinancialInstrumentAttributes4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 FinInstrm"`
	InvstmtDcsnPrsn InvestmentParty1Choice               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 InvstmtDcsnPrsn,omitempty"`
	ExctgPrsn       ExecutingParty1Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 ExctgPrsn"`
	AddtlAttrbts    SecuritiesTransactionIndicator2      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 AddtlAttrbts"`
	TechAttrbts     RecordTechnicalData5                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 TechAttrbts,omitempty"`
	SplmtryData     []SupplementaryData1                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 SplmtryData,omitempty"`
}

type SecuritiesTransactionTransmission2 struct {
	TrnsmssnInd   bool          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 TrnsmssnInd"`
	TrnsmttgBuyr  LEIIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 TrnsmttgBuyr,omitempty"`
	TrnsmttgSellr LEIIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 TrnsmttgSellr,omitempty"`
}

type SecurityInstrumentDescription19 struct {
	FinInstrmGnlAttrbts SecurityInstrumentDescription20 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 FinInstrmGnlAttrbts"`
	DebtInstrmAttrbts   DebtInstrument4                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 DebtInstrmAttrbts,omitempty"`
	DerivInstrmAttrbts  DerivativeInstrument9           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 DerivInstrmAttrbts"`
}

type SecurityInstrumentDescription20 struct {
	Id         ISIN2021Identifier           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Id,omitempty"`
	FullNm     Max350Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 FullNm"`
	ClssfctnTp CFIOct2015Identifier         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 ClssfctnTp"`
	NtnlCcy    ActiveOrHistoricCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 NtnlCcy,omitempty"`
}

// May be one of SESH, SELL, SSEX, UNDI
type Side5Code string

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type SwapLegIdentification3 struct {
	SwpIn  FinancialInstrumentIdentification8Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 SwpIn,omitempty"`
	SwpOut FinancialInstrumentIdentification8Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 SwpOut,omitempty"`
}

type UnderlyingIdentification3Choice struct {
	Swp  SwapLegIdentification3                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Swp,omitempty"`
	Othr FinancialInstrumentIdentification8Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.016.001.02 Othr,omitempty"`
}

// May be one of DECR, INCR
type VariationType1Code string

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
