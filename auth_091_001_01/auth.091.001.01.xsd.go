// Code generated by download. DO NOT EDIT.

package iso20022_auth_091_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type AnyBICDec2014Identifier string

type CompetentAuthority1 struct {
	Id        Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 Id"`
	OnbrdgSts bool       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 OnbrdgSts"`
}

type Counterparty26 struct {
	Id         OrganisationIdentification7Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 Id"`
	Ntr        CounterpartyTradeNature5Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 Ntr,omitempty"`
	TradgCpcty TradingCapacity7Code              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 TradgCpcty,omitempty"`
	CtrPtySd   OptionParty1Code                  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 CtrPtySd,omitempty"`
}

type Counterparty29 struct {
	Id   OrganisationIdentification9Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 Id"`
	Ctry CountryCode                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 Ctry,omitempty"`
}

type CounterpartyTradeNature5Choice struct {
	FI           []FinancialPartySectorType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 FI,omitempty"`
	NFI          NonFinancialInstitutionSector2  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 NFI,omitempty"`
	CntrlCntrPty NoReasonCode                    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 CntrlCntrPty,omitempty"`
	Othr         NoReasonCode                    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 Othr,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DerivativesTradeReconciliationStatisticalReportV01 struct {
	SttstcsPerCtrPty StatisticsPerCounterparty1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 SttstcsPerCtrPty"`
	SplmtryData      []SupplementaryData1             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 SplmtryData,omitempty"`
}

type DetailedReconciliationStatistics2 struct {
	TtlAccptd               float64     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 TtlAccptd"`
	TtlNotSubmittdToRcncltn float64     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 TtlNotSubmittdToRcncltn"`
	TtlSnglSddEEAUnprd      float64     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 TtlSnglSddEEAUnprd"`
	TtlSnglSddEEAPaird      float64     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 TtlSnglSddEEAPaird"`
	TtlSnglSddEEAMtchd      float64     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 TtlSnglSddEEAMtchd"`
	TtlDualSddNonMtchd      float64     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 TtlDualSddNonMtchd"`
	TtlDualSddMtchd         float64     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 TtlDualSddMtchd"`
	TtlSnglSddNonEEA        float64     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 TtlSnglSddNonEEA"`
	TopRsnsForPairdNonMtchd []Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 TopRsnsForPairdNonMtchd,omitempty"`
}

type DetailedStatisticsPerCounterparty5 struct {
	RefDt          ISODate                                             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 RefDt"`
	CtrPtyId       TradeCounterpartyReport9                            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 CtrPtyId"`
	RcncltnSttstcs ReconciliationStatisticsPerDerivativeContractGroup3 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 RcncltnSttstcs"`
	CmptntAuthrty  []CompetentAuthority1                               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 CmptntAuthrty,omitempty"`
}

type Document struct {
	DerivsTradRcncltnSttstclRpt DerivativesTradeReconciliationStatisticalReportV01 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 DerivsTradRcncltnSttstclRpt"`
}

// May be one of AIFD, ASSU, CDTI, INUN, INVF, ORPI, REIN, UCIT, OTHR
type FinancialPartySectorType1Code string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

// May be no more than 105 items long
type Max105Text string

// May be no more than 350 items long
type Max350Text string

// May be no more than 35 items long
type Max35Text string

// May be no more than 500 items long
type Max500Text string

// May be no more than 50 items long
type Max50Text string

// Must match the pattern [A-U]{1,1}
type NACEDomainIdentifier string

// May be one of NORE
type NoReasonCode string

type NonFinancialInstitutionSector2 struct {
	Sctr            []NACEDomainIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 Sctr,omitempty"`
	ClrThrshld      bool                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 ClrThrshld,omitempty"`
	DrctlyLkdActvty bool                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 DrctlyLkdActvty,omitempty"`
}

// May be one of SLLR, BYER
type OptionParty1Code string

type OrganisationIdentification30 struct {
	Id   OrganisationIdentification8Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 Id"`
	Nm   Max105Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 Nm,omitempty"`
	Dmcl Max500Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 Dmcl,omitempty"`
}

type OrganisationIdentification7Choice struct {
	LEI  LEIIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 LEI,omitempty"`
	Othr OrganisationIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 Othr,omitempty"`
}

type OrganisationIdentification8Choice struct {
	ClntId Max50Text               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 ClntId,omitempty"`
	AnyBIC AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 AnyBIC,omitempty"`
}

type OrganisationIdentification9Choice struct {
	LEI    LEIIdentifier           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 LEI,omitempty"`
	ClntId Max50Text               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 ClntId,omitempty"`
	AnyBIC AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 AnyBIC,omitempty"`
}

type ReconciliationStatisticsPerDerivativeContractGroup3 struct {
	OTC ReconciliationStatisticsPerDerivativeType3 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 OTC"`
	ETD ReconciliationStatisticsPerDerivativeType3 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 ETD"`
}

type ReconciliationStatisticsPerDerivativeType3 struct {
	AllDerivs     DetailedReconciliationStatistics2 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 AllDerivs"`
	OutsdngDerivs DetailedReconciliationStatistics2 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 OutsdngDerivs"`
}

// May be one of NOTX
type ReportPeriodActivity1Code string

type StatisticsPerCounterparty1Choice struct {
	DataSetActn ReportPeriodActivity1Code            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 DataSetActn,omitempty"`
	Rpt         []DetailedStatisticsPerCounterparty5 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 Rpt,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type TradeCounterpartyReport9 struct {
	RptgCtrPty Counterparty26                    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 RptgCtrPty"`
	OthrCtrPty Counterparty29                    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 OthrCtrPty"`
	Brkr       OrganisationIdentification9Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 Brkr,omitempty"`
	SubmitgAgt OrganisationIdentification9Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 SubmitgAgt,omitempty"`
	ClrMmb     OrganisationIdentification9Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 ClrMmb,omitempty"`
	Bnfcry     OrganisationIdentification9Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.091.001.01 Bnfcry,omitempty"`
}

// May be one of AGEN, PRIN
type TradingCapacity7Code string

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}
