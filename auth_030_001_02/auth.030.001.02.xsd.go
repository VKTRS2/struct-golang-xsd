// Code generated by download. DO NOT EDIT.

package iso20022_auth_030_001_02

import (
	"bytes"
	"encoding/xml"
	"time"
)

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type ActiveOrHistoricCurrencyAnd19DecimalAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

type AgreementType2Choice struct {
	Tp    ExternalAgreementType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Tp,omitempty"`
	Prtry Max50Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Prtry,omitempty"`
}

type AmountAndDirection106 struct {
	Amt ActiveOrHistoricCurrencyAnd19DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Amt"`
	Sgn bool                                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Sgn,omitempty"`
}

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type AnyBICDec2014Identifier string

type AssetClassCommodity2Choice struct {
	Agrcltrl AssetClassSubProductAgriculturalType1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Agrcltrl,omitempty"`
	Nrgy     AssetClassSubProductEnergyType1Code        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Nrgy,omitempty"`
	Envttl   AssetClassSubProductEnvironmentalType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Envttl,omitempty"`
	Frght    AssetClassSubProductFreight1Code           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Frght,omitempty"`
	Indx     NoReasonCode                               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Indx,omitempty"`
	Metl     AssetClassSubProductMetal1Code             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Metl,omitempty"`
	Extc     NoReasonCode                               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Extc,omitempty"`
	Othr     NoReasonCode                               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Othr,omitempty"`
}

// May be one of DIRY, FRST, GROS, LSTK, SOFT, SEAF, OTHR
type AssetClassSubProductAgriculturalType1Code string

// May be one of COAL, ELEC, OILP, INRG, NGAS, OTHR
type AssetClassSubProductEnergyType1Code string

// May be one of EMIS, WTHR, OTHR
type AssetClassSubProductEnvironmentalType1Code string

// May be one of DRYF, WETF, OTHR
type AssetClassSubProductFreight1Code string

// May be one of NPRM, PRME, OTHR
type AssetClassSubProductMetal1Code string

type BasketConstituents1 struct {
	InstrmId    InstrumentIdentification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 InstrmId"`
	Qty         float64                         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Qty,omitempty"`
	UnitOfMeasr UnitOfMeasure12Code             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 UnitOfMeasr,omitempty"`
}

// May be one of ESTR, BBSW, BUBO, CDOR, CIBO, EONA, EONS, EURI, EUUS, EUCH, FUSW, GCFR, ISDA, JIBA, LIBI, LIBO, MOSP, MAAA, NIBO, PFAN, PRBO, STBO, SWAP, TLBO, TIBO, TREA, WIBO, SOFR, SONA, CZNA, EFFR, OBFR, BCOL, CORA
type BenchmarkCurveName5Code string

// Must match the pattern [A-Z]{6,6}
type CFIOct2015Identifier string

type Cleared12Choice struct {
	Clrd         ClearingPartyAndTime10 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Clrd,omitempty"`
	IntndToClear ClearingPartyAndTime10 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 IntndToClear,omitempty"`
	NonClrd      NoReasonCode           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 NonClrd,omitempty"`
}

// May be one of FLSE, UKWN, TRUE
type ClearingObligationType1Code string

type ClearingPartyAndTime10 struct {
	Rsn     NoReasonCode                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Rsn,omitempty"`
	CCP     OrganisationIdentification10Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 CCP,omitempty"`
	ClrDtTm ISODateTime                        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 ClrDtTm,omitempty"`
}

// May be one of FLCL, OWC1, OWC2, OWP1, OWP2, PRCL, PRC1, PRC2, UNCL
type CollateralisationType2Code string

type CommonTradeDataReport49 struct {
	CtrctData ContractType10     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 CtrctData,omitempty"`
	TxData    TradeTransaction37 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 TxData"`
}

type CommonTradeDataReport50 struct {
	CtrctData ContractType10        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 CtrctData,omitempty"`
	TxData    TradeTransaction37    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 TxData"`
	CtrctMod  ContractModification4 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 CtrctMod,omitempty"`
}

type ContractModification4 struct {
	ActnTp TransactionOperationType7Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 ActnTp,omitempty"`
	Lvl    ModificationLevel1Code        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Lvl,omitempty"`
}

type ContractType10 struct {
	CtrctTp       FinancialInstrumentContractType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 CtrctTp,omitempty"`
	AsstClss      ProductType4Code                     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 AsstClss,omitempty"`
	PdctClssfctn  CFIOct2015Identifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 PdctClssfctn,omitempty"`
	PdctId        SecurityIdentification22             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 PdctId,omitempty"`
	UndrlygInstrm SecurityIdentification36Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 UndrlygInstrm,omitempty"`
	NtnlCcy       LegCurrency2                         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 NtnlCcy,omitempty"`
	SttlmCcy      LegCurrency2                         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 SttlmCcy,omitempty"`
	PlcOfSttlm    CountryCode                          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 PlcOfSttlm,omitempty"`
}

type ContractValuationData6 struct {
	CtrctVal AmountAndDirection106 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 CtrctVal,omitempty"`
	TmStmp   ISODateTime           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 TmStmp,omitempty"`
	Tp       ValuationType1Code    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Tp,omitempty"`
}

type Counterparty31 struct {
	Ctry CountryCode                  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Ctry,omitempty"`
	IdTp PartyIdentification235Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 IdTp"`
}

type Counterparty34 struct {
	Id         OrganisationIdentification10Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Id"`
	Ntr        CounterpartyTradeNature9Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Ntr,omitempty"`
	TradgCpcty TradingCapacity7Code               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 TradgCpcty,omitempty"`
	Drctn      Direction2Choice                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Drctn,omitempty"`
}

type CounterpartySpecificData29 struct {
	CtrPty     TradeCounterpartyReport14 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 CtrPty"`
	Valtn      ContractValuationData6    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Valtn,omitempty"`
	Coll       TradeCollateralReport5    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Coll,omitempty"`
	RptgTmStmp ISODateTime               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 RptgTmStmp"`
}

type CounterpartyTradeNature9Choice struct {
	FI           []FinancialPartySectorType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 FI,omitempty"`
	NFI          NonFinancialInstitutionSector4  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 NFI,omitempty"`
	CntrlCntrPty NoReasonCode                    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 CntrlCntrPty,omitempty"`
	Othr         NoReasonCode                    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Othr,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

// Must match the pattern [A-Z]{2,2}\-[0-9A-Z]{1,3}
type CountrySubDivisionCode string

type CreditDerivative4 struct {
	Snrty     DebtInstrumentSeniorityType2Code     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Snrty,omitempty"`
	RefPty    DerivativePartyIdentification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 RefPty,omitempty"`
	PmtFrqcy  Frequency13Code                      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 PmtFrqcy,omitempty"`
	ClctnBsis Max35Text                            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 ClctnBsis,omitempty"`
	Srs       float64                              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Srs,omitempty"`
	Vrsn      float64                              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Vrsn,omitempty"`
	IndxFctr  float64                              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 IndxFctr,omitempty"`
	Trch      TrancheIndicator3Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Trch,omitempty"`
}

type CurrencyExchange17 struct {
	DlvrblCrossCcy ActiveOrHistoricCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 DlvrblCrossCcy,omitempty"`
	XchgRate       float64                      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 XchgRate,omitempty"`
	FwdXchgRate    float64                      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 FwdXchgRate,omitempty"`
	XchgRateBsis   ExchangeRateBasis1Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 XchgRateBsis,omitempty"`
}

type CustomBasket1 struct {
	Strr     LEIIdentifier         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Strr"`
	Id       Max52Text             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Id"`
	Cnsttnts []BasketConstituents1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Cnsttnts"`
}

type DateTimePeriod1 struct {
	FrDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 FrDtTm"`
	ToDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 ToDtTm"`
}

// May be one of SBOD, SNDB, OTHR
type DebtInstrumentSeniorityType2Code string

type DeliveryInterconnectionPoint1Choice struct {
	Cd    EICIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Cd,omitempty"`
	Prtry Max52Text     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Prtry,omitempty"`
}

type DerivativePartyIdentification1Choice struct {
	Ctry        CountryCode            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Ctry,omitempty"`
	CtrySubDvsn CountrySubDivisionCode `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 CtrySubDvsn,omitempty"`
	LEI         LEIIdentifier          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 LEI,omitempty"`
}

type DerivativesTradeReportV02 struct {
	RptHdr      TradeQueryHeader4    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 RptHdr"`
	TradData    TradeData19Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 TradData"`
	SplmtryData []SupplementaryData1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 SplmtryData,omitempty"`
}

type Direction2Choice struct {
	DrctnOfTheFrstLeg OptionParty3Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 DrctnOfTheFrstLeg,omitempty"`
	CtrPtySd          OptionParty1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 CtrPtySd,omitempty"`
}

type Document struct {
	DerivsTradRpt DerivativesTradeReportV02 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 DerivsTradRpt"`
}

// May be one of YEAR, WEEK, SEAS, QURT, MNTH, MNUT, HOUR, DASD, OTHR
type DurationType1Code string

// Must match the pattern [A-Z0-9\-]{16}
type EICIdentifier string

type EnergyDeliveryAttribute5 struct {
	DlvryIntrvl     ISOTime                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 DlvryIntrvl,omitempty"`
	DlvryPrd        DateTimePeriod1           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 DlvryPrd,omitempty"`
	DlvryTm         []TimePeriodDetails1      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 DlvryTm,omitempty"`
	Drtn            DurationType1Code         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Drtn,omitempty"`
	WkDay           []WeekDay3Code            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 WkDay,omitempty"`
	DlvryCpcty      Quantity47Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 DlvryCpcty,omitempty"`
	QtyUnit         EnergyQuantityUnit2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 QtyUnit,omitempty"`
	PricTmIntrvlQty float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 PricTmIntrvlQty,omitempty"`
}

// May be one of BSLD, GASD, HABH, OFFP, OTHR, PKLD, SHPD
type EnergyLoadType1Code string

type EnergyQuantityUnit2Choice struct {
	Cd    EnergyQuantityUnit2Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Cd,omitempty"`
	Prtry Max52Text               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Prtry,omitempty"`
}

// May be one of BTUD, CMPD, GJDD, GWAT, GWHD, GWHH, HMJD, KTMD, KWAT, KWHD, KWHH, MCMD, MJDD, MBTD, MMJD, MTMD, MWAT, MWHD, MWHH, THMD
type EnergyQuantityUnit2Code string

type EnergySpecificAttribute6 struct {
	DlvryPtOrZone []DeliveryInterconnectionPoint1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 DlvryPtOrZone,omitempty"`
	IntrCnnctnPt  DeliveryInterconnectionPoint1Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 IntrCnnctnPt,omitempty"`
	LdTp          EnergyLoadType1Code                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 LdTp,omitempty"`
	DlvryAttr     []EnergyDeliveryAttribute5            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 DlvryAttr,omitempty"`
}

type ExchangeRateBasis1 struct {
	BaseCcy ActiveCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 BaseCcy"`
	QtdCcy  ActiveCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 QtdCcy"`
}

type ExchangeRateBasis1Choice struct {
	CcyPair ExchangeRateBasis1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 CcyPair,omitempty"`
	Prtry   Max52Text          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Prtry,omitempty"`
}

type ExerciseDate1Choice struct {
	FrstExrcDt ISODate          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 FrstExrcDt,omitempty"`
	PdgDtAplbl PriceStatus2Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 PdgDtAplbl,omitempty"`
}

// May be no more than 4 items long
type ExternalAgreementType1Code string

// May be one of CFDS, FRAS, FUTR, FORW, OPTN, SPDB, SWAP, SWPT, OTHR
type FinancialInstrumentContractType2Code string

type FinancialInstrumentQuantity32Choice struct {
	Unit     float64                                    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Unit,omitempty"`
	NmnlVal  ActiveOrHistoricCurrencyAnd19DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 NmnlVal,omitempty"`
	MntryVal ActiveOrHistoricCurrencyAnd19DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 MntryVal,omitempty"`
}

// May be one of AIFD, ASSU, CDTI, INUN, INVF, ORPI, REIN, UCIT, OTHR
type FinancialPartySectorType1Code string

type FixedRate10 struct {
	Rate     SecuritiesTransactionPrice14Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Rate,omitempty"`
	DayCnt   InterestComputationMethodFormat7   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 DayCnt,omitempty"`
	PmtFrqcy InterestRateFrequency3Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 PmtFrqcy,omitempty"`
}

type FloatingRate7 struct {
	Rate     FloatingRateIdentification4Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Rate,omitempty"`
	RefPrd   InterestRateContractTerm4          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 RefPrd,omitempty"`
	Sprd     SecuritiesTransactionPrice13Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Sprd,omitempty"`
	DayCnt   InterestComputationMethodFormat7   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 DayCnt,omitempty"`
	PmtFrqcy InterestRateFrequency3Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 PmtFrqcy,omitempty"`
	RstFrqcy InterestRateFrequency3Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 RstFrqcy,omitempty"`
}

type FloatingRateIdentification4Choice struct {
	Cd    BenchmarkCurveName5Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Cd,omitempty"`
	Prtry Max350Text              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Prtry,omitempty"`
}

// May be one of DAIL, WEEK, MNTH, YEAR, ADHO, EXPI, MIAN, QURT
type Frequency13Code string

type GenericIdentification174 struct {
	Id  Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Id"`
	Src Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Src"`
}

type GenericIdentification175 struct {
	Id      Max72Text `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Issr,omitempty"`
}

type GenericIdentification179 struct {
	Id   Max52Text `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Id"`
	Issr Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Issr,omitempty"`
}

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISIN2021Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type ISOTime time.Time

func (t *ISOTime) UnmarshalText(text []byte) error {
	return (*xsdTime)(t).UnmarshalText(text)
}
func (t ISOTime) MarshalText() ([]byte, error) {
	return xsdTime(t).MarshalText()
}

type InstrumentIdentification1Choice struct {
	ISIN            ISIN2021Identifier       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 ISIN,omitempty"`
	AltrntvInstrmId Max52Text                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 AltrntvInstrmId,omitempty"`
	UnqPdctIdr      Max52Text                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 UnqPdctIdr,omitempty"`
	OthrId          GenericIdentification174 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 OthrId,omitempty"`
}

// May be one of A004, A019, A017, A005, A009, A014, A010, A006, A008, A015, A018, A011, A001, A002, A003, A012, A013, A007, A016, NARR, A020
type InterestComputationMethod4Code string

type InterestComputationMethodFormat7 struct {
	Cd    InterestComputationMethod4Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Cd"`
	Nrrtv Max1000Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Nrrtv,omitempty"`
}

type InterestRate23Choice struct {
	Fxd  FixedRate10   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Fxd,omitempty"`
	Fltg FloatingRate7 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Fltg,omitempty"`
}

type InterestRateContractTerm4 struct {
	Unit Frequency13Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Unit,omitempty"`
	Val  float64         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Val,omitempty"`
}

type InterestRateFrequency3Choice struct {
	Term  InterestRateContractTerm4 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Term,omitempty"`
	Prtry Max52Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Prtry,omitempty"`
}

type InterestRateLegs9 struct {
	FrstLeg InterestRate23Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 FrstLeg,omitempty"`
	ScndLeg InterestRate23Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 ScndLeg,omitempty"`
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

type LegCurrency2 struct {
	CcyFrstLeg ActiveOrHistoricCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 CcyFrstLeg,omitempty"`
	CcyScndLeg ActiveOrHistoricCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 CcyScndLeg,omitempty"`
}

// Must match the pattern [A-Z0-9]{4,4}
type MICIdentifier string

type MasterAgreement7 struct {
	Tp                AgreementType2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Tp"`
	Vrsn              Max50Text            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Vrsn,omitempty"`
	OthrMstrAgrmtDtls Max350Text           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 OthrMstrAgrmtDtls,omitempty"`
}

// May be no more than 1000 items long
type Max1000Text string

// May be no more than 105 items long
type Max105Text string

// May be no more than 350 items long
type Max350Text string

// May be no more than 35 items long
type Max35Text string

// Must match the pattern [a-zA-Z0-9]{1,4}
type Max4AlphaNumericText string

// May be no more than 500 items long
type Max500Text string

// May be no more than 50 items long
type Max50Text string

// May be no more than 52 items long
type Max52Text string

// Must match the pattern [0-9]{1,5}
type Max5NumericText string

// May be no more than 72 items long
type Max72Text string

// May be one of PSTN, TCTN
type ModificationLevel1Code string

// Must match the pattern [A-U]{1,1}
type NACEDomainIdentifier string

type NaturalPersonIdentification2 struct {
	Id   GenericIdentification175 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Id"`
	Nm   Max105Text               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Nm,omitempty"`
	Dmcl Max500Text               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Dmcl,omitempty"`
}

// May be one of NORE
type NoReasonCode string

type NonFinancialInstitutionSector2 struct {
	Sctr            []NACEDomainIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Sctr,omitempty"`
	ClrThrshld      bool                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 ClrThrshld,omitempty"`
	DrctlyLkdActvty bool                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 DrctlyLkdActvty,omitempty"`
}

type NonFinancialInstitutionSector4 struct {
	NFI    NoReasonCode                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 NFI"`
	NFIIdr NonFinancialInstitutionSector2 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 NFIIdr,omitempty"`
}

// May be one of NOAP
type NotApplicable1Code string

type NotionalAmount1 struct {
	Amt   AmountAndDirection106 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Amt"`
	Schdl []Schedule3           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Schdl,omitempty"`
}

type NotionalQuantity1 struct {
	Qty         float64             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Qty"`
	Schdl       []Schedule2         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Schdl,omitempty"`
	UnitOfMeasr UnitOfMeasure12Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 UnitOfMeasr"`
}

type OptionOrSwaption7 struct {
	Tp               OptionType2Code                            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Tp,omitempty"`
	ExrcStyle        []OptionStyle6Code                         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 ExrcStyle,omitempty"`
	ExrcDt           ExerciseDate1Choice                        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 ExrcDt,omitempty"`
	StrkPric         SecuritiesTransactionPrice17Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 StrkPric,omitempty"`
	StrkPricSchdl    []Schedule4                                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 StrkPricSchdl,omitempty"`
	CallAmt          ActiveOrHistoricCurrencyAnd19DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 CallAmt,omitempty"`
	PutAmt           ActiveOrHistoricCurrencyAnd19DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 PutAmt,omitempty"`
	PrmAmt           ActiveOrHistoricCurrencyAnd19DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 PrmAmt,omitempty"`
	PrmPmtDt         ISODate                                    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 PrmPmtDt,omitempty"`
	MtrtyDtOfUndrlyg ISODate                                    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 MtrtyDtOfUndrlyg,omitempty"`
}

// May be one of SLLR, BYER
type OptionParty1Code string

// May be one of MAKE, TAKE
type OptionParty3Code string

// May be one of EURO, BERM, ASIA, AMER
type OptionStyle6Code string

// May be one of CALL, PUTO, OTHR
type OptionType2Code string

type OrganisationIdentification10Choice struct {
	LEI    LEIIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 LEI,omitempty"`
	Othr   OrganisationIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Othr,omitempty"`
	AnyBIC AnyBICDec2014Identifier      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 AnyBIC,omitempty"`
}

type OrganisationIdentification36 struct {
	Id   GenericIdentification175 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Id"`
	Nm   Max105Text               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Nm,omitempty"`
	Dmcl Max500Text               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Dmcl,omitempty"`
}

type OtherPayment3 struct {
	PmtAmt  AmountAndDirection106        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 PmtAmt"`
	PmtTp   PaymentType5Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 PmtTp,omitempty"`
	PmtDt   ISODate                      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 PmtDt,omitempty"`
	PmtPyer PartyIdentification235Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 PmtPyer,omitempty"`
	PmtRcvr PartyIdentification235Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 PmtRcvr,omitempty"`
}

type Package1 struct {
	CmplxTradId Max35Text                          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 CmplxTradId"`
	Pric        SecuritiesTransactionPrice17Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Pric,omitempty"`
	Sprd        SecuritiesTransactionPrice13Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Sprd,omitempty"`
}

type Pagination1 struct {
	PgNb      Max5NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 PgNb"`
	LastPgInd bool            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 LastPgInd"`
}

type PartyIdentification235Choice struct {
	Lgl  OrganisationIdentification10Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Lgl,omitempty"`
	Ntrl NaturalPersonIdentification2       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Ntrl,omitempty"`
}

// May be one of UFRO, UWIN, PEXH
type PaymentType4Code string

type PaymentType5Choice struct {
	Tp      PaymentType4Code     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Tp,omitempty"`
	PrtryTp Max4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 PrtryTp,omitempty"`
}

// May be one of PHYS, OPTL, CASH
type PhysicalTransferType4Code string

type PortfolioCode1Choice struct {
	Prtfl Max52Text          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Prtfl,omitempty"`
	NoCd  NotApplicable1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 NoCd,omitempty"`
}

type PrePostHaircut1 struct {
	PreHrcut ActiveOrHistoricCurrencyAnd19DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 PreHrcut,omitempty"`
	PstHrcut ActiveOrHistoricCurrencyAnd19DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 PstHrcut,omitempty"`
}

type PriceData1 struct {
	Pric        SecuritiesTransactionPrice17Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Pric,omitempty"`
	PricSchdl   []Schedule1                        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 PricSchdl,omitempty"`
	UnitOfMeasr UnitOfMeasure12Code                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 UnitOfMeasr,omitempty"`
	PricMltplr  float64                            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 PricMltplr,omitempty"`
}

// May be one of PNDG, NOAP
type PriceStatus1Code string

// May be one of PNDG
type PriceStatus2Code string

// May be one of CRDT, CURR, EQUI, INTR, COMM, OTHR
type ProductType4Code string

type Quantity47Choice struct {
	Qty  float64   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Qty,omitempty"`
	Desc Max52Text `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Desc,omitempty"`
}

// May be one of SSNE, SSUN, SSPA, SSMA, NORE, DSNM, DSMA
type Reconciliation2Code string

// May be one of NOTX
type ReportPeriodActivity1Code string

type Schedule1 struct {
	UadjstdFctvDt ISODate                            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 UadjstdFctvDt"`
	UadjstdEndDt  ISODate                            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 UadjstdEndDt,omitempty"`
	Pric          SecuritiesTransactionPrice17Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Pric"`
}

type Schedule2 struct {
	UadjstdFctvDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 UadjstdFctvDt"`
	UadjstdEndDt  ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 UadjstdEndDt,omitempty"`
	Qty           float64 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Qty"`
}

type Schedule3 struct {
	UadjstdFctvDt ISODate               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 UadjstdFctvDt"`
	UadjstdEndDt  ISODate               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 UadjstdEndDt,omitempty"`
	Amt           AmountAndDirection106 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Amt"`
}

type Schedule4 struct {
	UadjstdFctvDt ISODate                            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 UadjstdFctvDt"`
	UadjstdEndDt  ISODate                            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 UadjstdEndDt,omitempty"`
	Pric          SecuritiesTransactionPrice17Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Pric"`
}

type SecuritiesTransactionPrice13Choice struct {
	MntryVal   AmountAndDirection106 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 MntryVal,omitempty"`
	Pctg       float64               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Pctg,omitempty"`
	Dcml       float64               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Dcml,omitempty"`
	BsisPtSprd float64               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 BsisPtSprd,omitempty"`
}

type SecuritiesTransactionPrice14Choice struct {
	Rate float64 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Rate,omitempty"`
	Dcml float64 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Dcml,omitempty"`
}

type SecuritiesTransactionPrice17Choice struct {
	MntryVal AmountAndDirection106       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 MntryVal,omitempty"`
	Unit     float64                     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Unit,omitempty"`
	Pctg     float64                     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Pctg,omitempty"`
	Yld      float64                     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Yld,omitempty"`
	Dcml     float64                     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Dcml,omitempty"`
	PdgPric  PriceStatus1Code            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 PdgPric,omitempty"`
	Othr     SecuritiesTransactionPrice5 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Othr,omitempty"`
}

type SecuritiesTransactionPrice5 struct {
	Val float64   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Val,omitempty"`
	Tp  Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Tp,omitempty"`
}

type SecurityIdentification22 struct {
	ISIN            ISIN2021Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 ISIN,omitempty"`
	UnqPdctIdr      Max52Text          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 UnqPdctIdr,omitempty"`
	AltrntvInstrmId Max52Text          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 AltrntvInstrmId,omitempty"`
}

type SecurityIdentification36Choice struct {
	ISIN            ISIN2021Identifier             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 ISIN,omitempty"`
	AltrntvInstrmId Max52Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 AltrntvInstrmId,omitempty"`
	UnqPdctIdr      Max52Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 UnqPdctIdr,omitempty"`
	Bskt            CustomBasket1                  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Bskt,omitempty"`
	Indx            SecurityIdentification37Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Indx,omitempty"`
	IdNotAvlbl      UnderlyingIdentification1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 IdNotAvlbl,omitempty"`
}

type SecurityIdentification37Choice struct {
	ISIN ISIN2021Identifier      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 ISIN,omitempty"`
	Nm   Max350Text              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Nm,omitempty"`
	Indx BenchmarkCurveName5Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Indx,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type TechnicalAttributes4 struct {
	RcncltnFlg Reconciliation2Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 RcncltnFlg,omitempty"`
}

type TimePeriodDetails1 struct {
	FrTm ISOTime `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 FrTm"`
	ToTm ISOTime `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 ToTm,omitempty"`
}

type TradeClearing5 struct {
	ClrOblgtn ClearingObligationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 ClrOblgtn,omitempty"`
	ClrSts    Cleared12Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 ClrSts,omitempty"`
	IntraGrp  bool                        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 IntraGrp,omitempty"`
}

type TradeCollateralReport5 struct {
	PrtflCd              PortfolioCode1Choice                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 PrtflCd"`
	Collstn              CollateralisationType2Code                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Collstn,omitempty"`
	InitlMrgnPstd        PrePostHaircut1                            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 InitlMrgnPstd,omitempty"`
	InitlMrgnRcvd        PrePostHaircut1                            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 InitlMrgnRcvd,omitempty"`
	VartnMrgnPstd        PrePostHaircut1                            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 VartnMrgnPstd,omitempty"`
	VartnMrgnRcvd        PrePostHaircut1                            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 VartnMrgnRcvd,omitempty"`
	XcssCollPstd         ActiveOrHistoricCurrencyAnd19DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 XcssCollPstd,omitempty"`
	XcssCollRcvd         ActiveOrHistoricCurrencyAnd19DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 XcssCollRcvd,omitempty"`
	CtrPtyRatgTrggrInd   bool                                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 CtrPtyRatgTrggrInd,omitempty"`
	CtrPtyRatgThrshldInd bool                                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 CtrPtyRatgThrshldInd,omitempty"`
}

type TradeConfirmation1Choice struct {
	Confd    TradeConfirmation2    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Confd,omitempty"`
	NonConfd TradeNonConfirmation1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 NonConfd,omitempty"`
}

type TradeConfirmation2 struct {
	Tp     TradeConfirmationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Tp"`
	TmStmp ISODateTime                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 TmStmp"`
}

// May be one of ECNF, YCNF
type TradeConfirmationType1Code string

// May be one of NCNF
type TradeConfirmationType2Code string

type TradeCounterpartyReport14 struct {
	RptgCtrPty Counterparty34                     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 RptgCtrPty"`
	OthrCtrPty Counterparty31                     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 OthrCtrPty"`
	Brkr       OrganisationIdentification10Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Brkr,omitempty"`
	SubmitgAgt OrganisationIdentification10Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 SubmitgAgt,omitempty"`
	ClrMmb     OrganisationIdentification10Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 ClrMmb,omitempty"`
	Bnfcry     []PartyIdentification235Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Bnfcry"`
}

type TradeData19Choice struct {
	DataSetActn ReportPeriodActivity1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 DataSetActn,omitempty"`
	Rpt         []TradeReport15Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Rpt,omitempty"`
	Stat        []TradeStateReport12      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Stat,omitempty"`
}

type TradeData23 struct {
	CtrPtySpcfcData []CounterpartySpecificData29 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 CtrPtySpcfcData"`
	CmonTradData    CommonTradeDataReport49      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 CmonTradData"`
	Lvl             ModificationLevel1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Lvl,omitempty"`
	TechAttrbts     TechnicalAttributes4         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 TechAttrbts,omitempty"`
	SplmtryData     []SupplementaryData1         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 SplmtryData,omitempty"`
}

type TradeNonConfirmation1 struct {
	Tp TradeConfirmationType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Tp"`
}

type TradeQueryHeader4 struct {
	QryExctnDt ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 QryExctnDt,omitempty"`
	MsgPgntn   Pagination1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 MsgPgntn"`
	NbRcrds    float64     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 NbRcrds"`
}

type TradeReport15Choice struct {
	New      TradeData23 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 New,omitempty"`
	Mod      TradeData23 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Mod,omitempty"`
	Crrctn   TradeData23 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Crrctn,omitempty"`
	Termntn  TradeData23 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Termntn,omitempty"`
	PosCmpnt TradeData23 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 PosCmpnt,omitempty"`
	ValtnUpd TradeData23 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 ValtnUpd,omitempty"`
	Cmprssn  TradeData23 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Cmprssn,omitempty"`
	Err      TradeData23 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Err,omitempty"`
	Othr     TradeData23 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Othr,omitempty"`
}

type TradeStateReport12 struct {
	CtrPtySpcfcData []CounterpartySpecificData29 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 CtrPtySpcfcData"`
	CmonTradData    CommonTradeDataReport50      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 CmonTradData"`
	TechAttrbts     TechnicalAttributes4         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 TechAttrbts,omitempty"`
	SplmtryData     []SupplementaryData1         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 SplmtryData,omitempty"`
}

type TradeTransaction37 struct {
	UnqTxIdr         UniqueTransactionIdentifier1Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 UnqTxIdr"`
	PrrUnqTxIdr      UniqueTransactionIdentifier1Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 PrrUnqTxIdr,omitempty"`
	RptTrckgNb       Max52Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 RptTrckgNb,omitempty"`
	PltfmIdr         MICIdentifier                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 PltfmIdr,omitempty"`
	Cmprssn          bool                                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Cmprssn,omitempty"`
	TxPric           PriceData1                          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 TxPric,omitempty"`
	NtnlAmt          []NotionalAmount1                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 NtnlAmt,omitempty"`
	NtnlQty          []NotionalQuantity1                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 NtnlQty,omitempty"`
	Dlta             float64                             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Dlta,omitempty"`
	Qty              FinancialInstrumentQuantity32Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Qty,omitempty"`
	DlvryTp          PhysicalTransferType4Code           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 DlvryTp,omitempty"`
	ExctnTmStmp      ISODateTime                         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 ExctnTmStmp,omitempty"`
	FctvDt           ISODate                             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 FctvDt,omitempty"`
	XprtnDt          ISODate                             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 XprtnDt,omitempty"`
	EarlyTermntnDt   ISODate                             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 EarlyTermntnDt,omitempty"`
	SttlmDt          []ISODate                           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 SttlmDt,omitempty"`
	MstrAgrmt        MasterAgreement7                    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 MstrAgrmt,omitempty"`
	TradConf         TradeConfirmation1Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 TradConf,omitempty"`
	TradClr          TradeClearing5                      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 TradClr,omitempty"`
	IntrstRate       InterestRateLegs9                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 IntrstRate,omitempty"`
	Ccy              CurrencyExchange17                  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Ccy,omitempty"`
	Cmmdty           AssetClassCommodity2Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Cmmdty,omitempty"`
	NrgySpcfcAttrbts EnergySpecificAttribute6            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 NrgySpcfcAttrbts,omitempty"`
	Optn             OptionOrSwaption7                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Optn,omitempty"`
	Cdt              CreditDerivative4                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Cdt,omitempty"`
	OthrPmt          []OtherPayment3                     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 OthrPmt,omitempty"`
	Packg            Package1                            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Packg,omitempty"`
}

// May be one of AGEN, PRIN
type TradingCapacity7Code string

type Tranche3 struct {
	AttchmntPt float64 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 AttchmntPt,omitempty"`
	DtchmntPt  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 DtchmntPt,omitempty"`
}

type TrancheIndicator3Choice struct {
	Trnchd  Tranche3     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Trnchd,omitempty"`
	Utrnchd NoReasonCode `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Utrnchd,omitempty"`
}

// May be one of CORR, EROR, NEWT, POSC, VALU, COMP, MODI, OTHR, REVI, TERM
type TransactionOperationType7Code string

// Must match the pattern [A-Z0-9]{18}[0-9]{2}[A-Z0-9]{0,32}
type UTIIdentifier string

// May be one of UKWN, BSKT, INDX
type UnderlyingIdentification1Code string

type UniqueTransactionIdentifier1Choice struct {
	UnqTxIdr UTIIdentifier            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 UnqTxIdr,omitempty"`
	Prtry    GenericIdentification179 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.030.001.02 Prtry,omitempty"`
}

// May be one of ACRE, ALOW, ACCY, ARES, BAGG, BALE, BARL, BCUF, BDFT, BOTL, BOXX, BRTU, BUSL, CRTN, CELI, CMET, YARD, USTN, USQA, USPI, USOU, UCWT, USGA, USFO, USBA, OZTR, TOCD, MILI, MMET, MIBA, MBTU, PIEC, PUND, PWRD, SHAS, SCMT, SQFO, SQIN, SQKI, SMET, SQMI, SMIL, SQYA, THMS, TONS, MILE, TONE, METR, MWYC, MMOC, MWMC, MWHC, MWHO, MWDC, LOTS, LITR, KWYC, KWMC, KMOC, KWHC, KWDC, KWHO, KMET, KILO, IPNT, INCH, HUWG, HECT, GRAM, GWHO, GBTN, GBQA, GBPI, GBOU, GBGA, GBFO, GGEU, FUTU, FOOT, ENVO, ENVC, DMET, DGEU, DAYS, CBML, CBME, CBIN, CRAT, CNTR, CLRT, CEER, CDDA, CPDA, HDDA
type UnitOfMeasure12Code string

// May be one of CCPV, MTMA, MTMO
type ValuationType1Code string

// May be one of ALLD, XBHL, IBHL, FRID, MOND, SATD, SUND, THUD, TUED, WEDD, WDAY, WEND
type WeekDay3Code string

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdTime time.Time

func (t *xsdTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "15:04:05.999999999")
}
func (t xsdTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "15:04:05.999999999")
}
func (t xsdTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
