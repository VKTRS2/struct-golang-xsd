// Code generated by download. DO NOT EDIT.

package iso20022_reda_021_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type AnyBICDec2014Identifier string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type Document struct {
	SctiesAcctRpt SecuritiesAccountReportV01 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 SctiesAcctRpt"`
}

type ErrorHandling3Choice struct {
	Cd    ExternalSystemErrorHandling1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Cd,omitempty"`
	Prtry Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Prtry,omitempty"`
}

type ErrorHandling5 struct {
	Err  ErrorHandling3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Err"`
	Desc Max140Text           `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Desc,omitempty"`
}

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// May be no more than 4 items long
type ExternalSystemErrorHandling1Code string

// May be no more than 4 items long
type ExternalSystemPartyType1Code string

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Issr,omitempty"`
}

type GenericIdentification30 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 SchmeNm,omitempty"`
}

type GenericIdentification36 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 SchmeNm,omitempty"`
}

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

type MarketSpecificAttribute1 struct {
	Nm  Max35Text  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Nm"`
	Val Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Val"`
}

// May be no more than 140 items long
type Max140Text string

// May be no more than 16 items long
type Max16Text string

// May be no more than 350 items long
type Max350Text string

// May be no more than 35 items long
type Max35Text string

// Must match the pattern [0-9]{1,5}
type Max5NumericText string

// May be no more than 70 items long
type Max70Text string

type MessageHeader3 struct {
	MsgId       Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 MsgId"`
	CreDtTm     ISODateTime            `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 CreDtTm,omitempty"`
	ReqTp       RequestType2Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 ReqTp,omitempty"`
	OrgnlBizQry OriginalBusinessQuery1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 OrgnlBizQry,omitempty"`
	QryNm       Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 QryNm,omitempty"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Adr,omitempty"`
}

type OriginalBusinessQuery1 struct {
	MsgId   Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 MsgId"`
	MsgNmId Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 MsgNmId,omitempty"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 CreDtTm,omitempty"`
}

type Pagination1 struct {
	PgNb      Max5NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 PgNb"`
	LastPgInd bool            `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 LastPgInd"`
}

type PartyIdentification120Choice struct {
	AnyBIC   AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 AnyBIC,omitempty"`
	PrtryId  GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 PrtryId,omitempty"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 NmAndAdr,omitempty"`
}

type PartyIdentification136 struct {
	Id  PartyIdentification120Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Id"`
	LEI LEIIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 LEI,omitempty"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Ctry"`
}

// May be one of RT01, RT02, RT03, RT04, RT05
type RequestType1Code string

type RequestType2Choice struct {
	PmtCtrl RequestType1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 PmtCtrl,omitempty"`
	Enqry   RequestType2Code       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Enqry,omitempty"`
	Prtry   GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Prtry,omitempty"`
}

// May be one of RT11, RT12, RT13, RT14, RT15
type RequestType2Code string

type SecuritiesAccount19 struct {
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Id"`
	Tp GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Tp,omitempty"`
	Nm Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Nm,omitempty"`
}

type SecuritiesAccountOrBusinessError3Choice struct {
	SctiesAcct SystemSecuritiesAccount6 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 SctiesAcct,omitempty"`
	BizErr     []ErrorHandling5         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 BizErr,omitempty"`
}

type SecuritiesAccountOrOperationalError3Choice struct {
	SctiesAcctRpt []SecuritiesAccountReport3 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 SctiesAcctRpt,omitempty"`
	OprlErr       []ErrorHandling5           `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 OprlErr,omitempty"`
}

type SecuritiesAccountReport3 struct {
	SctiesAcctId    SecuritiesAccount19                     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 SctiesAcctId"`
	SctiesAcctOrErr SecuritiesAccountOrBusinessError3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 SctiesAcctOrErr"`
}

type SecuritiesAccountReportV01 struct {
	MsgHdr      MessageHeader3                             `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 MsgHdr,omitempty"`
	Pgntn       Pagination1                                `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Pgntn"`
	RptOrErr    SecuritiesAccountOrOperationalError3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 RptOrErr"`
	SplmtryData []SupplementaryData1                       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 SplmtryData,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type SystemPartyIdentification8 struct {
	Id           PartyIdentification136 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Id"`
	RspnsblPtyId PartyIdentification136 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 RspnsblPtyId,omitempty"`
}

type SystemPartyType1Choice struct {
	Cd    ExternalSystemPartyType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Cd,omitempty"`
	Prtry Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Prtry,omitempty"`
}

type SystemRestriction1 struct {
	VldFr ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 VldFr"`
	VldTo ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 VldTo,omitempty"`
	Tp    Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Tp"`
}

type SystemSecuritiesAccount6 struct {
	OpngDt       ISODate                            `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 OpngDt,omitempty"`
	ClsgDt       ISODate                            `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 ClsgDt,omitempty"`
	HldInd       bool                               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 HldInd,omitempty"`
	NegPos       bool                               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 NegPos,omitempty"`
	Tp           SystemSecuritiesAccountType1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Tp,omitempty"`
	AcctOwnr     SystemPartyIdentification8         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 AcctOwnr"`
	PtyTp        SystemPartyType1Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 PtyTp,omitempty"`
	MktSpcfcAttr []MarketSpecificAttribute1         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 MktSpcfcAttr,omitempty"`
	Rstrctn      []SystemRestriction1               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Rstrctn,omitempty"`
	EndInvstrFlg Exact4AlphaNumericText             `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 EndInvstrFlg,omitempty"`
	PricgSchme   Exact4AlphaNumericText             `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 PricgSchme,omitempty"`
}

type SystemSecuritiesAccountType1Choice struct {
	Cd    SystemSecuritiesAccountType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Cd,omitempty"`
	Prtry GenericIdentification30          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.021.001.01 Prtry,omitempty"`
}

// May be one of CSDP, CSDM, ICSA, TOFF, CSDO, ISSA
type SystemSecuritiesAccountType1Code string

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
