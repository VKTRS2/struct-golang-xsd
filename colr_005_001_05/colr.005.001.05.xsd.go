// Code generated by download. DO NOT EDIT.

package iso20022_colr_005_001_05

import (
	"bytes"
	"encoding/xml"
	"time"
)

type ActiveOrHistoricCurrencyAndAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

type AmountAndDirection20 struct {
	Amt       ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 Amt"`
	CdtDbtInd CreditDebitCode                   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 CdtDbtInd,omitempty"`
}

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type AnyBICDec2014Identifier string

type ClosingDate4Choice struct {
	Dt DateAndDateTime2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 Dt,omitempty"`
	Cd Date3Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 Cd,omitempty"`
}

type CollateralAccount3 struct {
	Id Max35Text                                  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 Id"`
	Tp CollateralAccountIdentificationType3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 Tp,omitempty"`
	Nm Max70Text                                  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 Nm,omitempty"`
}

type CollateralAccountIdentificationType3Choice struct {
	Tp    CollateralAccountType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 Tp,omitempty"`
	Prtry GenericIdentification36    `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 Prtry,omitempty"`
}

// May be one of HOUS, CLIE, LIPR, MGIN, DFLT
type CollateralAccountType1Code string

type CollateralCancellationReason1 struct {
	AddtlInf Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 AddtlInf,omitempty"`
	CxlRsnCd CollateralCancellationType1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 CxlRsnCd"`
}

type CollateralCancellationType1Choice struct {
	Cd    CollateralManagementCancellationReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 Cd,omitempty"`
	Prtry GenericIdentification30                     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 Prtry,omitempty"`
}

// May be one of PRER, PNSU
type CollateralManagementCancellationReason1Code string

type CollateralManagementCancellationRequestV05 struct {
	Ref         Reference3Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 Ref"`
	Oblgtn      Obligation7                   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 Oblgtn"`
	CxlRsn      CollateralCancellationReason1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 CxlRsn"`
	SplmtryData []SupplementaryData1          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 SplmtryData,omitempty"`
}

// May be one of GIVE, TAKE
type CollateralRole1Code string

type CollateralTransactionType1Choice struct {
	Cd    CollateralTransactionType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 Cd,omitempty"`
	Prtry GenericIdentification30        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 Prtry,omitempty"`
}

// May be one of AADJ, CDTA, CADJ, DADJ, DBVT, INIT, MADJ, PADJ, RATA, TERM
type CollateralTransactionType1Code string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

// May be one of CRDT, DBIT
type CreditDebitCode string

type Date3Choice struct {
	Cd    DateType2Code           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 Cd,omitempty"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 Prtry,omitempty"`
}

type DateAndDateTime2Choice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 Dt,omitempty"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 DtTm,omitempty"`
}

// May be one of OPEN
type DateType2Code string

type Document struct {
	CollMgmtCxlReq CollateralManagementCancellationRequestV05 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 CollMgmtCxlReq"`
}

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// May be one of BFWD, PAYM, CCPC, COMM, CRDS, CRTL, CRSP, CCIR, CRPR, EQUI, EQPT, EQUS, EXTD, EXPT, FIXI, FORX, FORW, FUTR, OPTN, LIQU, OTCD, REPO, RVPO, SLOA, SBSC, SCRP, SLEB, SHSL, SCIR, SCIE, SWPT, TBAS, TRBD, TRCP
type ExposureType5Code string

type GenericIdentification30 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 SchmeNm,omitempty"`
}

type GenericIdentification36 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 SchmeNm,omitempty"`
}

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// May be no more than 16 items long
type Max16Text string

// May be no more than 350 items long
type Max350Text string

// May be no more than 35 items long
type Max35Text string

// May be no more than 52 items long
type Max52Text string

// May be no more than 70 items long
type Max70Text string

type NameAndAddress6 struct {
	Nm  Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 Nm"`
	Adr PostalAddress2 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 Adr"`
}

type Obligation7 struct {
	PtyA        PartyIdentification178Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 PtyA"`
	SvcgPtyA    PartyIdentification178Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 SvcgPtyA,omitempty"`
	PtyB        PartyIdentification178Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 PtyB"`
	SvcgPtyB    PartyIdentification178Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 SvcgPtyB,omitempty"`
	CollAcctId  CollateralAccount3               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 CollAcctId,omitempty"`
	XpsrTp      ExposureType5Code                `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 XpsrTp,omitempty"`
	CollTxTp    CollateralTransactionType1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 CollTxTp,omitempty"`
	CollSd      CollateralRole1Code              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 CollSd,omitempty"`
	XpsrAmt     AmountAndDirection20             `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 XpsrAmt,omitempty"`
	ValtnDt     DateAndDateTime2Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 ValtnDt,omitempty"`
	ClsgDt      ClosingDate4Choice               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 ClsgDt,omitempty"`
	ReqdExctnDt DateAndDateTime2Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 ReqdExctnDt,omitempty"`
}

type PartyIdentification178Choice struct {
	AnyBIC   AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 AnyBIC,omitempty"`
	PrtryId  GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 PrtryId,omitempty"`
	NmAndAdr NameAndAddress6         `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 NmAndAdr,omitempty"`
}

type PostalAddress2 struct {
	StrtNm      Max70Text   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 StrtNm,omitempty"`
	PstCdId     Max16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 PstCdId"`
	TwnNm       Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 TwnNm"`
	CtrySubDvsn Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 CtrySubDvsn,omitempty"`
	Ctry        CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 Ctry"`
}

type Reference3Choice struct {
	ClntCollInstrId             Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 ClntCollInstrId,omitempty"`
	ClntCollTxId                Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 ClntCollTxId,omitempty"`
	CollPrpslId                 Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 CollPrpslId,omitempty"`
	CollPrpslRspnId             Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 CollPrpslRspnId,omitempty"`
	CollSbstitnConfId           Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 CollSbstitnConfId,omitempty"`
	CollSbstitnReqId            Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 CollSbstitnReqId,omitempty"`
	CollSbstitnRspnId           Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 CollSbstitnRspnId,omitempty"`
	CmonTxId                    Max52Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 CmonTxId,omitempty"`
	DsptNtfctnId                Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 DsptNtfctnId,omitempty"`
	IntrstPmtReqId              Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 IntrstPmtReqId,omitempty"`
	IntrstPmtRspnId             Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 IntrstPmtRspnId,omitempty"`
	IntrstPmtStmtId             Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 IntrstPmtStmtId,omitempty"`
	MrgnCallReqId               Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 MrgnCallReqId,omitempty"`
	MrgnCallRspnId              Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 MrgnCallRspnId,omitempty"`
	TrptyAgtSvcPrvdrCollInstrId Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 TrptyAgtSvcPrvdrCollInstrId,omitempty"`
	TrptyAgtSvcPrvdrCollTxId    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 TrptyAgtSvcPrvdrCollTxId,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.005.001.05 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
