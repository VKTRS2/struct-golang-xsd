// Code generated by download. DO NOT EDIT.

package iso20022_reda_034_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AuditTrail1 struct {
	FldNm     Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 FldNm"`
	OdFldVal  Max350Text  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 OdFldVal"`
	NewFldVal Max350Text  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 NewFldVal"`
	OprTmStmp ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 OprTmStmp"`
	InstgUsr  Max256Text  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 InstgUsr"`
	ApprvgUsr Max256Text  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 ApprvgUsr,omitempty"`
}

type AuditTrailOrBusinessError6Choice struct {
	AudtTrl []AuditTrail1    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 AudtTrl,omitempty"`
	BizErr  []ErrorHandling5 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 BizErr,omitempty"`
}

type DatePeriod2 struct {
	FrDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 FrDt"`
	ToDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 ToDt"`
}

type DatePeriodSearch1Choice struct {
	FrDt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 FrDt,omitempty"`
	ToDt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 ToDt,omitempty"`
	FrToDt DatePeriod2 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 FrToDt,omitempty"`
	EQDt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 EQDt,omitempty"`
	NEQDt  ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 NEQDt,omitempty"`
}

type Document struct {
	SctiesAudtTrlRpt SecuritiesAuditTrailReportV01 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 SctiesAudtTrlRpt"`
}

type ErrorHandling3Choice struct {
	Cd    ExternalSystemErrorHandling1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 Cd,omitempty"`
	Prtry Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 Prtry,omitempty"`
}

type ErrorHandling5 struct {
	Err  ErrorHandling3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 Err"`
	Desc Max140Text           `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 Desc,omitempty"`
}

// May be no more than 4 items long
type ExternalFinancialInstrumentIdentificationType1Code string

// May be no more than 4 items long
type ExternalSystemErrorHandling1Code string

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISIN2021Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource3Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 Cd,omitempty"`
	Prtry Max35Text                                          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 Prtry,omitempty"`
}

// May be no more than 140 items long
type Max140Text string

// May be no more than 16 items long
type Max16Text string

// May be no more than 256 items long
type Max256Text string

// May be no more than 350 items long
type Max350Text string

// May be no more than 35 items long
type Max35Text string

type MessageHeader12 struct {
	MsgId         Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 MsgId"`
	CreDtTm       ISODateTime                  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 CreDtTm,omitempty"`
	OrgnlBizInstr OriginalBusinessInstruction1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 OrgnlBizInstr,omitempty"`
}

type OriginalBusinessInstruction1 struct {
	MsgId   Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 MsgId"`
	MsgNmId Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 MsgNmId,omitempty"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 CreDtTm,omitempty"`
}

type OtherIdentification1 struct {
	Id  Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 Sfx,omitempty"`
	Tp  IdentificationSource3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 Tp"`
}

type SecuritiesAuditTrailOrOperationalError4Choice struct {
	SctiesAudtTrlRpt []SecuritiesAuditTrailReport4 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 SctiesAudtTrlRpt,omitempty"`
	OprlErr          []ErrorHandling5              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 OprlErr,omitempty"`
}

type SecuritiesAuditTrailReport4 struct {
	SctiesAudtTrlOrErr AuditTrailOrBusinessError6Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 SctiesAudtTrlOrErr"`
	DtPrd              DatePeriodSearch1Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 DtPrd,omitempty"`
	FinInstrmId        SecurityIdentification39         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 FinInstrmId"`
}

type SecuritiesAuditTrailReportV01 struct {
	MsgHdr      MessageHeader12                               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 MsgHdr,omitempty"`
	RptOrErr    SecuritiesAuditTrailOrOperationalError4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 RptOrErr"`
	SplmtryData []SupplementaryData1                          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 SplmtryData,omitempty"`
}

type SecurityIdentification39 struct {
	ISIN   ISIN2021Identifier     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 ISIN,omitempty"`
	OthrId []OtherIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 OthrId,omitempty"`
	Desc   Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 Desc,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.034.001.01 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
