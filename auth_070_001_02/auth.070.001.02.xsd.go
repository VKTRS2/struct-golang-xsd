// Code generated by download. DO NOT EDIT.

package iso20022_auth_070_001_02

import (
	"bytes"
	"encoding/xml"
	"time"
)

type ActiveOrHistoricCurrencyAndAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type AnyBICDec2014Identifier string

type CollateralMarginCorrection6 struct {
	TechRcrdId     Max140Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 TechRcrdId,omitempty"`
	RptgDtTm       ISODateTime                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 RptgDtTm"`
	EvtDt          ISODate                     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 EvtDt"`
	CtrPty         Counterparty39              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 CtrPty"`
	CollPrtflId    Max52Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 CollPrtflId"`
	PstdMrgnOrColl PostedMarginOrCollateral4   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 PstdMrgnOrColl,omitempty"`
	RcvdMrgnOrColl ReceivedMarginOrCollateral4 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 RcvdMrgnOrColl,omitempty"`
	SplmtryData    []SupplementaryData1        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 SplmtryData,omitempty"`
}

type CollateralMarginError4 struct {
	TechRcrdId  Max140Text           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 TechRcrdId,omitempty"`
	RptgDtTm    ISODateTime          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 RptgDtTm"`
	CtrPty      Counterparty39       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 CtrPty"`
	CollPrtflId Max52Text            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 CollPrtflId"`
	SplmtryData []SupplementaryData1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 SplmtryData,omitempty"`
}

type CollateralMarginMarginUpdate5 struct {
	TechRcrdId     Max140Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 TechRcrdId,omitempty"`
	RptgDtTm       ISODateTime                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 RptgDtTm"`
	EvtDt          ISODate                     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 EvtDt"`
	CtrPty         Counterparty39              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 CtrPty,omitempty"`
	CollPrtflId    Max52Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 CollPrtflId"`
	PstdMrgnOrColl PostedMarginOrCollateral4   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 PstdMrgnOrColl,omitempty"`
	RcvdMrgnOrColl ReceivedMarginOrCollateral4 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 RcvdMrgnOrColl,omitempty"`
	SplmtryData    []SupplementaryData1        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 SplmtryData,omitempty"`
}

type Counterparty39 struct {
	RptgCtrPty        OrganisationIdentification15Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 RptgCtrPty"`
	OthrCtrPty        PartyIdentification236Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 OthrCtrPty"`
	NttyRspnsblForRpt OrganisationIdentification15Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 NttyRspnsblForRpt,omitempty"`
	RptSubmitgNtty    OrganisationIdentification15Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 RptSubmitgNtty,omitempty"`
}

type Document struct {
	SctiesFincgRptgTxMrgnDataRpt SecuritiesFinancingReportingTransactionMarginDataReportV02 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 SctiesFincgRptgTxMrgnDataRpt"`
}

type GenericIdentification175 struct {
	Id      Max72Text `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 Issr,omitempty"`
}

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

// May be no more than 105 items long
type Max105Text string

// May be no more than 140 items long
type Max140Text string

// May be no more than 350 items long
type Max350Text string

// May be no more than 35 items long
type Max35Text string

// May be no more than 500 items long
type Max500Text string

// May be no more than 52 items long
type Max52Text string

// May be no more than 72 items long
type Max72Text string

type NaturalPersonIdentification2 struct {
	Id   GenericIdentification175 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 Id"`
	Nm   Max105Text               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 Nm,omitempty"`
	Dmcl Max500Text               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 Dmcl,omitempty"`
}

type OrganisationIdentification15Choice struct {
	LEI    LEIIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 LEI,omitempty"`
	Othr   OrganisationIdentification38 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 Othr,omitempty"`
	AnyBIC AnyBICDec2014Identifier      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 AnyBIC,omitempty"`
}

type OrganisationIdentification38 struct {
	Id   GenericIdentification175 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 Id"`
	Nm   Max105Text               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 Nm,omitempty"`
	Dmcl Max500Text               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 Dmcl,omitempty"`
}

type PartyIdentification236Choice struct {
	Lgl  OrganisationIdentification15Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 Lgl,omitempty"`
	Ntrl NaturalPersonIdentification2       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 Ntrl,omitempty"`
}

type PostedMarginOrCollateral4 struct {
	InitlMrgnPstd ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 InitlMrgnPstd,omitempty"`
	VartnMrgnPstd ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 VartnMrgnPstd,omitempty"`
	XcssCollPstd  ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 XcssCollPstd,omitempty"`
}

type ReceivedMarginOrCollateral4 struct {
	InitlMrgnRcvd ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 InitlMrgnRcvd,omitempty"`
	VartnMrgnRcvd ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 VartnMrgnRcvd,omitempty"`
	XcssCollRcvd  ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 XcssCollRcvd,omitempty"`
}

// May be one of NOTX
type ReportPeriodActivity1Code string

type SecuritiesFinancingReportingTransactionMarginDataReportV02 struct {
	TradData    TradeData39Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 TradData"`
	SplmtryData []SupplementaryData1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 SplmtryData,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type TradeData39Choice struct {
	DataSetActn ReportPeriodActivity1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 DataSetActn,omitempty"`
	Rpt         []TradeReport21Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 Rpt,omitempty"`
}

type TradeReport21Choice struct {
	New     CollateralMarginCorrection6   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 New,omitempty"`
	Err     CollateralMarginError4        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 Err,omitempty"`
	Crrctn  CollateralMarginCorrection6   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 Crrctn,omitempty"`
	TradUpd CollateralMarginMarginUpdate5 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.070.001.02 TradUpd,omitempty"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
