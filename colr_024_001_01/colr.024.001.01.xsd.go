// Code generated by download. DO NOT EDIT.

package iso20022_colr_024_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type ActiveOrHistoricCurrencyAndAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AlternatePartyIdentification7 struct {
	IdTp    IdentificationType42Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 IdTp"`
	Ctry    CountryCode                `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Ctry"`
	AltrnId Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 AltrnId"`
}

type AmountAndDirection49 struct {
	Amt                 ActiveCurrencyAndAmount           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Amt"`
	CdtDbtInd           CreditDebitCode                   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 CdtDbtInd,omitempty"`
	OrgnlCcyAndOrdrdAmt ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 OrgnlCcyAndOrdrdAmt,omitempty"`
	FXDtls              ForeignExchangeTerms23            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 FXDtls,omitempty"`
}

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type AnyBICDec2014Identifier string

type BlockChainAddressWallet3 struct {
	Id Max140Text              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Id"`
	Tp GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Tp,omitempty"`
	Nm Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Nm,omitempty"`
}

type CollateralParties8 struct {
	PtyA     PartyIdentificationAndAccount202 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 PtyA"`
	ClntPtyA PartyIdentificationAndAccount193 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 ClntPtyA,omitempty"`
	PtyB     PartyIdentificationAndAccount203 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 PtyB"`
	ClntPtyB PartyIdentificationAndAccount193 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 ClntPtyB,omitempty"`
	TrptyAgt PartyIdentification136           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 TrptyAgt,omitempty"`
}

// May be one of GIVE, TAKE
type CollateralRole1Code string

type CollateralTransactionType1Choice struct {
	Cd    CollateralTransactionType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Cd,omitempty"`
	Prtry GenericIdentification30        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Prtry,omitempty"`
}

// May be one of AADJ, CDTA, CADJ, DADJ, DBVT, INIT, MADJ, PADJ, RATA, TERM
type CollateralTransactionType1Code string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

// May be one of CRDT, DBIT
type CreditDebitCode string

type DateAndDateTime2Choice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Dt,omitempty"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 DtTm,omitempty"`
}

type Document struct {
	TrptyCollAllgmtNtfctnCxlAdvc TripartyCollateralAllegementNotificationCancellationAdviceV01 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 TrptyCollAllgmtNtfctnCxlAdvc"`
}

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// May be one of BFWD, PAYM, CBCO, COMM, CRDS, CRTL, CRSP, CCIR, CRPR, EQPT, EQUS, EXTD, EXPT, FIXI, FORX, FORW, FUTR, OPTN, LIQU, OTCD, RVPO, SLOA, SBSC, SCRP, SLEB, SCIR, SCIE, SWPT, TBAS, TRCP, UDMS, CCPC, EQUI, TRBD, REPO, SHSL, MGLD
type ExposureType14Code string

type ExposureType23Choice struct {
	Cd    ExposureType14Code      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Cd,omitempty"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Prtry,omitempty"`
}

type ForeignExchangeTerms23 struct {
	UnitCcy  ActiveCurrencyCode      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 UnitCcy"`
	QtdCcy   ActiveCurrencyCode      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 QtdCcy"`
	XchgRate float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 XchgRate"`
	RsltgAmt ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 RsltgAmt"`
}

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Issr,omitempty"`
}

type GenericIdentification30 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 SchmeNm,omitempty"`
}

type GenericIdentification36 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 SchmeNm,omitempty"`
}

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationType42Choice struct {
	Cd    TypeOfIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Cd,omitempty"`
	Prtry GenericIdentification30   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Prtry,omitempty"`
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

// May be no more than 140 items long
type Max140Text string

// May be no more than 16 items long
type Max16Text string

// May be no more than 350 items long
type Max350Text string

// May be no more than 35 items long
type Max35Text string

// May be no more than 52 items long
type Max52Text string

// May be no more than 70 items long
type Max70Text string

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Adr,omitempty"`
}

type PartyIdentification120Choice struct {
	AnyBIC   AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 AnyBIC,omitempty"`
	PrtryId  GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 PrtryId,omitempty"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 NmAndAdr,omitempty"`
}

type PartyIdentification136 struct {
	Id  PartyIdentification120Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Id"`
	LEI LEIIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 LEI,omitempty"`
}

type PartyIdentificationAndAccount193 struct {
	Id      PartyIdentification120Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Id"`
	LEI     LEIIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 LEI,omitempty"`
	AltrnId AlternatePartyIdentification7 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 AltrnId,omitempty"`
}

type PartyIdentificationAndAccount202 struct {
	Id                 PartyIdentification120Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Id"`
	LEI                LEIIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 LEI,omitempty"`
	AltrnId            AlternatePartyIdentification7 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 AltrnId,omitempty"`
	SfkpgAcct          SecuritiesAccount19           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 SfkpgAcct,omitempty"`
	BlckChainAdrOrWllt BlockChainAddressWallet3      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 BlckChainAdrOrWllt,omitempty"`
	AcctOwnr           PartyIdentification136        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 AcctOwnr,omitempty"`
	PtyCpcty           TradingPartyCapacity5Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 PtyCpcty,omitempty"`
}

type PartyIdentificationAndAccount203 struct {
	Id                 PartyIdentification120Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Id"`
	LEI                LEIIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 LEI,omitempty"`
	AltrnId            AlternatePartyIdentification7 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 AltrnId,omitempty"`
	SfkpgAcct          SecuritiesAccount19           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 SfkpgAcct,omitempty"`
	BlckChainAdrOrWllt BlockChainAddressWallet3      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 BlckChainAdrOrWllt,omitempty"`
	PtyCpcty           TradingPartyCapacity5Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 PtyCpcty,omitempty"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Ctry"`
}

type SecuritiesAccount19 struct {
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Id"`
	Tp GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Tp,omitempty"`
	Nm Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Nm,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

// May be one of AGEN, PRIN
type TradingCapacity7Code string

type TradingPartyCapacity5Choice struct {
	Cd    TradingCapacity7Code    `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Cd,omitempty"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 Prtry,omitempty"`
}

type TransactionIdentifications44 struct {
	TrptyAgtSvcPrvdrCollInstrId Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 TrptyAgtSvcPrvdrCollInstrId"`
	TrptyAgtSvcPrvdrCollTxId    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 TrptyAgtSvcPrvdrCollTxId,omitempty"`
	ClntCollInstrId             Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 ClntCollInstrId,omitempty"`
	ClntCollTxId                Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 ClntCollTxId,omitempty"`
	CtrPtyCollInstrId           Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 CtrPtyCollInstrId,omitempty"`
	CtrPtyCollTxId              Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 CtrPtyCollTxId,omitempty"`
	CmonTxId                    Max52Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 CmonTxId,omitempty"`
}

type TripartyCollateralAllegementNotificationCancellationAdviceV01 struct {
	TxInstrId      TransactionIdentifications44     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 TxInstrId"`
	CollTxTp       CollateralTransactionType1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 CollTxTp"`
	XpsrTp         ExposureType23Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 XpsrTp"`
	CollSd         CollateralRole1Code              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 CollSd"`
	ElgbltySetPrfl GenericIdentification1           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 ElgbltySetPrfl,omitempty"`
	CollPties      CollateralParties8               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 CollPties"`
	TxAmt          AmountAndDirection49             `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 TxAmt,omitempty"`
	ReqdExctnDt    DateAndDateTime2Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 ReqdExctnDt,omitempty"`
	SplmtryData    SupplementaryData1               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.024.001.01 SplmtryData,omitempty"`
}

// May be one of ARNU, CCPT, CHTY, CORP, DRLC, FIIN, TXID
type TypeOfIdentification1Code string

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
