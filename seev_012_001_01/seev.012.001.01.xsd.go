// Code generated by download. DO NOT EDIT.

package iso20022_seev_012_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AddressType3Choice struct {
	Cd    AddressType2Code        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Cd,omitempty"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Prtry,omitempty"`
}

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type AnyBICDec2014Identifier string

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type BICFIDec2014Identifier string

type Contact5 struct {
	NmPrfx    NamePrefix2Code             `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 NmPrfx,omitempty"`
	Nm        Max140Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Nm,omitempty"`
	PhneNb    PhoneNumber                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 PhneNb,omitempty"`
	MobNb     PhoneNumber                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 MobNb,omitempty"`
	FaxNb     PhoneNumber                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 FaxNb,omitempty"`
	EmailAdr  Max2048Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 EmailAdr,omitempty"`
	EmailPurp Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 EmailPurp,omitempty"`
	JobTitl   Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 JobTitl,omitempty"`
	Rspnsblty Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Rspnsblty,omitempty"`
	Dept      Max70Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Dept,omitempty"`
	Othr      []OtherContact1             `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Othr,omitempty"`
	PrefrdMtd PreferredContactMethod1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 PrefrdMtd,omitempty"`
	VldFr     ISODate                     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 VldFr,omitempty"`
	VldTo     ISODate                     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 VldTo,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type Document struct {
	PtyRpt PartyReportV01 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 PtyRpt"`
}

// May be one of X020, X030, X050
type ErrorHandling1Code string

type ErrorHandling2Choice struct {
	Cd    ErrorHandling1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Cd,omitempty"`
	Prtry Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Prtry,omitempty"`
}

type ErrorHandling3Choice struct {
	Cd    ExternalSystemErrorHandling1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Cd,omitempty"`
	Prtry Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Prtry,omitempty"`
}

type ErrorHandling4 struct {
	Err  ErrorHandling2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Err"`
	Desc Max140Text           `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Desc,omitempty"`
}

type ErrorHandling5 struct {
	Err  ErrorHandling3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Err"`
	Desc Max140Text           `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Desc,omitempty"`
}

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// May be no more than 4 items long
type ExternalSystemErrorHandling1Code string

// May be no more than 4 items long
type ExternalSystemPartyType1Code string

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Issr,omitempty"`
}

type GenericIdentification30 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 SchmeNm,omitempty"`
}

type GenericIdentification36 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 SchmeNm,omitempty"`
}

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

// May be one of LOCK, ULCK
type LockStatus1Code string

type MarketSpecificAttribute1 struct {
	Nm  Max35Text  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Nm"`
	Val Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Val"`
}

// May be no more than 128 items long
type Max128Text string

// May be no more than 140 items long
type Max140Text string

// May be no more than 16 items long
type Max16Text string

// May be no more than 2048 items long
type Max2048Text string

// May be no more than 256 items long
type Max256Text string

// May be no more than 350 items long
type Max350Text string

// May be no more than 35 items long
type Max35Text string

// May be no more than 4 items long
type Max4Text string

// May be no more than 70 items long
type Max70Text string

type MessageHeader3 struct {
	MsgId       Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 MsgId"`
	CreDtTm     ISODateTime            `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 CreDtTm,omitempty"`
	ReqTp       RequestType2Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 ReqTp,omitempty"`
	OrgnlBizQry OriginalBusinessQuery1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 OrgnlBizQry,omitempty"`
	QryNm       Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 QryNm,omitempty"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Adr,omitempty"`
}

// May be one of DOCT, MADM, MISS, MIST, MIKS
type NamePrefix2Code string

type OriginalBusinessQuery1 struct {
	MsgId   Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 MsgId"`
	MsgNmId Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 MsgNmId,omitempty"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 CreDtTm,omitempty"`
}

type OtherContact1 struct {
	ChanlTp Max4Text   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 ChanlTp"`
	Id      Max128Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Id,omitempty"`
}

type PartyIdentification120Choice struct {
	AnyBIC   AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 AnyBIC,omitempty"`
	PrtryId  GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 PrtryId,omitempty"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 NmAndAdr,omitempty"`
}

type PartyIdentification136 struct {
	Id  PartyIdentification120Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Id"`
	LEI LEIIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 LEI,omitempty"`
}

type PartyLockStatus1 struct {
	VldFr  ISODate         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 VldFr,omitempty"`
	Sts    LockStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Sts"`
	LckRsn []Max35Text     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 LckRsn,omitempty"`
}

type PartyName4 struct {
	VldFr  ISODate    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 VldFr,omitempty"`
	Nm     Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Nm"`
	ShrtNm Max35Text  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 ShrtNm,omitempty"`
}

type PartyOrBusinessError3Choice struct {
	SysPty SystemParty5     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 SysPty,omitempty"`
	BizErr []ErrorHandling4 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 BizErr,omitempty"`
}

type PartyOrOperationalError3Choice struct {
	PtyRpt  []PartyReport3   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 PtyRpt,omitempty"`
	OprlErr []ErrorHandling5 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 OprlErr,omitempty"`
}

type PartyReport3 struct {
	PtyId    SystemPartyIdentification8  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 PtyId"`
	PtyOrErr PartyOrBusinessError3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 PtyOrErr"`
}

type PartyReportV01 struct {
	MsgHdr      MessageHeader3                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 MsgHdr,omitempty"`
	RptOrErr    PartyOrOperationalError3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 RptOrErr"`
	SplmtryData []SupplementaryData1           `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 SplmtryData,omitempty"`
}

// Must match the pattern \+[0-9]{1,3}-[0-9()+\-]{1,30}
type PhoneNumber string

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Ctry"`
}

type PostalAddress25 struct {
	AdrTp       AddressType3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 AdrTp,omitempty"`
	Dept        Max70Text          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Dept,omitempty"`
	SubDept     Max70Text          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 SubDept,omitempty"`
	StrtNm      Max70Text          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 BldgNb,omitempty"`
	BldgNm      Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 BldgNm,omitempty"`
	Flr         Max70Text          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Flr,omitempty"`
	PstBx       Max16Text          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 PstBx,omitempty"`
	Room        Max70Text          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Room,omitempty"`
	PstCd       Max16Text          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 PstCd,omitempty"`
	TwnNm       Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 TwnNm,omitempty"`
	TwnLctnNm   Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 TwnLctnNm,omitempty"`
	DstrctNm    Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 DstrctNm,omitempty"`
	CtrySubDvsn Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Ctry,omitempty"`
	AdrLine     []Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 AdrLine,omitempty"`
	VldFr       ISODate            `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 VldFr,omitempty"`
}

// May be one of LETT, MAIL, PHON, FAXX, CELL
type PreferredContactMethod1Code string

// May be one of RT01, RT02, RT03, RT04, RT05
type RequestType1Code string

type RequestType2Choice struct {
	PmtCtrl RequestType1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 PmtCtrl,omitempty"`
	Enqry   RequestType2Code       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Enqry,omitempty"`
	Prtry   GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Prtry,omitempty"`
}

// May be one of RT11, RT12, RT13, RT14, RT15
type RequestType2Code string

// May be one of DMST, FRGN, MXED
type ResidenceType1Code string

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type SystemParty5 struct {
	PtyId        SystemPartyIdentification9       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 PtyId,omitempty"`
	Adr          PostalAddress25                  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Adr,omitempty"`
	CtctDtls     []Contact5                       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 CtctDtls,omitempty"`
	OpngDt       ISODate                          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 OpngDt,omitempty"`
	ClsgDt       ISODate                          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 ClsgDt,omitempty"`
	Tp           SystemPartyType1Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Tp,omitempty"`
	TechAdr      []TechnicalIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 TechAdr,omitempty"`
	MktSpcfcAttr []MarketSpecificAttribute1       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 MktSpcfcAttr,omitempty"`
	Nm           PartyName4                       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Nm,omitempty"`
	ResTp        ResidenceType1Code               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 ResTp,omitempty"`
	LckSts       PartyLockStatus1                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 LckSts,omitempty"`
	Rstrctn      []SystemRestriction1             `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Rstrctn,omitempty"`
}

type SystemPartyIdentification8 struct {
	Id           PartyIdentification136 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Id"`
	RspnsblPtyId PartyIdentification136 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 RspnsblPtyId,omitempty"`
}

type SystemPartyIdentification9 struct {
	Id           PartyIdentification136 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Id"`
	RspnsblPtyId PartyIdentification136 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 RspnsblPtyId,omitempty"`
	VldFr        ISODate                `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 VldFr,omitempty"`
}

type SystemPartyType1Choice struct {
	Cd    ExternalSystemPartyType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Cd,omitempty"`
	Prtry Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Prtry,omitempty"`
}

type SystemRestriction1 struct {
	VldFr ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 VldFr"`
	VldTo ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 VldTo,omitempty"`
	Tp    Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 Tp"`
}

type TechnicalIdentification2Choice struct {
	BICFI   BICFIDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 BICFI,omitempty"`
	TechAdr Max256Text             `xml:"urn:iso:std:iso:20022:tech:xsd:reda.017.001.01 TechAdr,omitempty"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
