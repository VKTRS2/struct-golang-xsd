// Code generated by download. DO NOT EDIT.

package iso20022_auth_012_001_02

import (
	"bytes"
	"encoding/xml"
	"time"
)

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

// May be one of BILA, BROK
type BrokeredDeal1Code string

// Must match the pattern [A-Z]{6,6}
type CFIOct2015Identifier string

type Collateral18 struct {
	Valtn       SecuredCollateral2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 Valtn"`
	Hrcut       float64                  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 Hrcut,omitempty"`
	SpclCollInd SpecialCollateral2Code   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 SpclCollInd,omitempty"`
}

// May be one of NOPL, POOL
type CollateralPool1Code string

type CollateralValuation6 struct {
	NmnlAmt ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 NmnlAmt,omitempty"`
	ISIN    ISINOct2015Identifier   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 ISIN"`
}

type CollateralValuation7 struct {
	PoolSts CollateralPool1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 PoolSts"`
	Tp      CFIOct2015Identifier    `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 Tp"`
	Sctr    string                  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 Sctr"`
	NmnlAmt ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 NmnlAmt,omitempty"`
}

type CounterpartyIdentification3Choice struct {
	LEI         LEIIdentifier      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 LEI,omitempty"`
	SctrAndLctn SectorAndLocation1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 SctrAndLctn,omitempty"`
	NmAndLctn   NameAndLocation1   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 NmAndLctn,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 Dt,omitempty"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 DtTm,omitempty"`
}

type DateTimePeriod1 struct {
	FrDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 FrDtTm"`
	ToDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 ToDtTm"`
}

type Document struct {
	MnyMktScrdMktSttstclRpt MoneyMarketSecuredMarketStatisticalReportV02 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 MnyMktScrdMktSttstclRpt"`
}

type FloatingRateNote2 struct {
	RefRateIndx ISINOct2015Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 RefRateIndx"`
	BsisPtSprd  float64               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 BsisPtSprd"`
}

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// May be one of FIXE, VARI
type InterestRateType1Code string

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

// May be no more than 105 items long
type Max105Text string

// May be no more than 350 items long
type Max350Text string

// May be no more than 70 items long
type Max70Text string

type MoneyMarketReportHeader1 struct {
	RptgAgt LEIIdentifier   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 RptgAgt"`
	RefPrd  DateTimePeriod1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 RefPrd"`
}

type MoneyMarketSecuredMarketStatisticalReportV02 struct {
	RptHdr      MoneyMarketReportHeader1   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 RptHdr"`
	ScrdMktRpt  SecuredMarketReport4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 ScrdMktRpt"`
	SplmtryData []SupplementaryData1       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 SplmtryData,omitempty"`
}

// May be one of BORR, LEND
type MoneyMarketTransactionType1Code string

type NameAndLocation1 struct {
	Nm   Max70Text   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 Nm"`
	Lctn CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 Lctn"`
}

// May be one of NONO, NOVA
type NovationStatus1Code string

// May be one of NOTX, NORA
type ReportPeriodActivity3Code string

type SectorAndLocation1 struct {
	Sctr string      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 Sctr"`
	Lctn CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 Lctn"`
}

type SecuredCollateral2Choice struct {
	SnglColl  CollateralValuation6   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 SnglColl,omitempty"`
	MltplColl []CollateralValuation6 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 MltplColl,omitempty"`
	PoolColl  CollateralValuation6   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 PoolColl,omitempty"`
	OthrColl  []CollateralValuation7 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 OthrColl,omitempty"`
}

type SecuredMarketReport4Choice struct {
	DataSetActn ReportPeriodActivity3Code   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 DataSetActn,omitempty"`
	Tx          []SecuredMarketTransaction4 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 Tx,omitempty"`
}

type SecuredMarketTransaction4 struct {
	RptdTxSts       TransactionOperationType1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 RptdTxSts"`
	NvtnSts         NovationStatus1Code               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 NvtnSts,omitempty"`
	BrnchId         LEIIdentifier                     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 BrnchId,omitempty"`
	UnqTxIdr        Max105Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 UnqTxIdr,omitempty"`
	PrtryTxId       Max105Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 PrtryTxId"`
	RltdPrtryTxId   Max105Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 RltdPrtryTxId,omitempty"`
	CtrPtyPrtryTxId Max105Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 CtrPtyPrtryTxId,omitempty"`
	CtrPtyId        CounterpartyIdentification3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 CtrPtyId"`
	TrptyAgtId      LEIIdentifier                     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 TrptyAgtId,omitempty"`
	TradDt          DateAndDateTimeChoice             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 TradDt"`
	SttlmDt         ISODate                           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 SttlmDt"`
	MtrtyDt         ISODate                           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 MtrtyDt"`
	TxTp            MoneyMarketTransactionType1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 TxTp"`
	TxNmnlAmt       ActiveCurrencyAndAmount           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 TxNmnlAmt"`
	RateTp          InterestRateType1Code             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 RateTp"`
	DealRate        float64                           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 DealRate,omitempty"`
	FltgRateRpAgrmt FloatingRateNote2                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 FltgRateRpAgrmt,omitempty"`
	BrkrdDeal       BrokeredDeal1Code                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 BrkrdDeal,omitempty"`
	Coll            Collateral18                      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 Coll"`
	SplmtryData     []SupplementaryData1              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 SplmtryData,omitempty"`
}

// May be one of GENE, SPEC, MRRP
type SpecialCollateral2Code string

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.012.001.02 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

// May be one of AMND, CANC, CORR, NEWT
type TransactionOperationType1Code string

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
