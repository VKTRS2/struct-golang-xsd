// Code generated by download. DO NOT EDIT.

package iso20022_acmt_006_001_07

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AcceptedStatusReason1Choice struct {
	Cd    AcceptedStatusReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Cd,omitempty"`
	Prtry GenericIdentification36   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Prtry,omitempty"`
}

// May be one of PLAC, SECT
type AcceptedStatusReason1Code string

type Account23 struct {
	AcctId       Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 AcctId"`
	RltdAcctDtls GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 RltdAcctDtls,omitempty"`
}

// May be one of RECE, ACCP, EXEC, STNP
type AccountManagementStatus1Code string

type AccountManagementStatusAndReason5 struct {
	Sts         Status25Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Sts"`
	StsRsn      []AcceptedStatusReason1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 StsRsn,omitempty"`
	AcctApplId  Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 AcctApplId,omitempty"`
	ExstgAcctId []Account23                   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 ExstgAcctId,omitempty"`
	AcctId      Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 AcctId,omitempty"`
	AcctSts     AccountStatus2                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 AcctSts,omitempty"`
	BlckdSts    BlockedStatusReason2Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 BlckdSts,omitempty"`
	FATCARptgDt ISODate                       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 FATCARptgDt,omitempty"`
	CRSRptgDt   ISODate                       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 CRSRptgDt,omitempty"`
}

type AccountManagementStatusReportV07 struct {
	MsgId        MessageIdentification1            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 MsgId"`
	RltdRef      []AdditionalReference13           `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 RltdRef"`
	StsRpt       AccountManagementStatusAndReason5 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 StsRpt"`
	MktPrctcVrsn MarketPracticeVersion1            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 MktPrctcVrsn,omitempty"`
	Xtnsn        []Extension1                      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Xtnsn,omitempty"`
}

type AccountStatus2 struct {
	Nbld    EnabledStatusReason1Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Nbld,omitempty"`
	Dsbld   DisabledStatusReason1Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Dsbld,omitempty"`
	Pdg     PendingStatusReason1Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Pdg,omitempty"`
	PdgOpng PendingOpeningStatusReason1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 PdgOpng,omitempty"`
	Profrm  ProformaStatusReason1Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Profrm,omitempty"`
	Clsd    ClosedStatusReason1Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Clsd,omitempty"`
	ClsrPdg ClosurePendingStatusReason1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 ClsrPdg,omitempty"`
	Othr    []OtherAccountStatus1             `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Othr,omitempty"`
}

type AdditionalReference13 struct {
	Ref     Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Ref"`
	RefIssr PartyIdentification125Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 RefIssr,omitempty"`
	MsgNm   Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 MsgNm,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type AnyBICDec2014Identifier string

type BlockedReason2Choice struct {
	Cd    BlockedReason2Code      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Cd,omitempty"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Prtry,omitempty"`
}

// May be one of BKRP, CMMT, CNFS, MORT, PCOM, PLDG, TRPE, SANC, TRAN
type BlockedReason2Code string

type BlockedStatusReason2 struct {
	TxTp     TransactionType5Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 TxTp"`
	Blckd    bool                   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Blckd"`
	Rsn      []BlockedReason2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Rsn,omitempty"`
	AddtlInf Max350Text             `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 AddtlInf"`
}

type BlockedStatusReason2Choice struct {
	NoSpcfdRsn NoReasonCode           `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 NoSpcfdRsn,omitempty"`
	Rsn        []BlockedStatusReason2 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Rsn,omitempty"`
}

type ClosedStatusReason1 struct {
	Cd       ClosedStatusReason2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Cd"`
	AddtlInf Max350Text                `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 AddtlInf,omitempty"`
}

type ClosedStatusReason1Choice struct {
	NoSpcfdRsn NoReasonCode          `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 NoSpcfdRsn,omitempty"`
	Rsn        []ClosedStatusReason1 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Rsn,omitempty"`
}

// May be one of ASIN, CLIN
type ClosedStatusReason1Code string

type ClosedStatusReason2Choice struct {
	Cd    ClosedStatusReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Cd,omitempty"`
	Prtry GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Prtry,omitempty"`
}

type ClosurePendingStatusReason1 struct {
	Cd       ClosurePendingStatusReason2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Cd"`
	AddtlInf Max350Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 AddtlInf,omitempty"`
}

type ClosurePendingStatusReason1Choice struct {
	NoSpcfdRsn NoReasonCode                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 NoSpcfdRsn,omitempty"`
	Rsn        []ClosurePendingStatusReason1 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Rsn,omitempty"`
}

// May be one of CLOS, PEND
type ClosurePendingStatusReason1Code string

type ClosurePendingStatusReason2Choice struct {
	Cd    ClosurePendingStatusReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Cd,omitempty"`
	Prtry GenericIdentification36         `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Prtry,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

// May be one of CLOS, BKRP, CMMT, CNFS, MORT, PCOM, PLDG, TRPE, SANC, TRAN, REJT
type DisabledReason2Code string

type DisabledStatusReason1 struct {
	Cd       DisabledStatusReason2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Cd"`
	AddtlInf Max350Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 AddtlInf,omitempty"`
}

type DisabledStatusReason1Choice struct {
	NoSpcfdRsn NoReasonCode            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 NoSpcfdRsn,omitempty"`
	Rsn        []DisabledStatusReason1 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Rsn,omitempty"`
}

type DisabledStatusReason2Choice struct {
	Cd    DisabledReason2Code     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Cd,omitempty"`
	Prtry GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Prtry,omitempty"`
}

type Document struct {
	AcctMgmtStsRpt AccountManagementStatusReportV07 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 AcctMgmtStsRpt"`
}

type EnabledStatusReason1 struct {
	Cd       EnabledStatusReason2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Cd"`
	AddtlInf Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 AddtlInf,omitempty"`
}

type EnabledStatusReason1Choice struct {
	NoSpcfdRsn NoReasonCode           `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 NoSpcfdRsn,omitempty"`
	Rsn        []EnabledStatusReason1 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Rsn,omitempty"`
}

// May be one of MODI
type EnabledStatusReason1Code string

type EnabledStatusReason2Choice struct {
	Cd    EnabledStatusReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Cd,omitempty"`
	Prtry GenericIdentification36  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Prtry,omitempty"`
}

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

type Extension1 struct {
	PlcAndNm Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 PlcAndNm"`
	Txt      Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Txt"`
}

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Issr,omitempty"`
}

type GenericIdentification36 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 SchmeNm,omitempty"`
}

type GenericIdentification47 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Id"`
	Issr    Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Issr"`
	SchmeNm Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 SchmeNm,omitempty"`
}

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type ISOYearMonth time.Time

func (t *ISOYearMonth) UnmarshalText(text []byte) error {
	return (*xsdGYearMonth)(t).UnmarshalText(text)
}
func (t ISOYearMonth) MarshalText() ([]byte, error) {
	return xsdGYearMonth(t).MarshalText()
}

// May be one of ALLL, SELL, BUYI, SWIO, TRIN, TOUT, SUBS, REDM, CDEP, CWIT, DIVP, CAEV, CROI, CROO, DIVI, INSP, OTHR, REAA, RWPL, RDIV, SSPL, SUAA
type InvestmentFundTransactionType1Code string

type MarketPracticeVersion1 struct {
	Nm Max35Text    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Nm"`
	Dt ISOYearMonth `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Dt,omitempty"`
	Nb Max35Text    `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Nb,omitempty"`
}

// May be no more than 16 items long
type Max16Text string

// May be no more than 350 items long
type Max350Text string

// May be no more than 35 items long
type Max35Text string

// Must match the pattern [a-zA-Z0-9]{1,4}
type Max4AlphaNumericText string

// May be no more than 70 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 CreDtTm"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Adr,omitempty"`
}

// May be one of NORE
type NoReasonCode string

type OtherAccountStatus1 struct {
	Sts GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Sts"`
	Rsn GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Rsn,omitempty"`
}

type PartyIdentification125Choice struct {
	AnyBIC   AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 AnyBIC,omitempty"`
	PrtryId  GenericIdentification1  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 PrtryId,omitempty"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 NmAndAdr,omitempty"`
}

type PendingOpeningStatusReason1 struct {
	Cd       PendingOpeningStatusReason2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Cd"`
	AddtlInf Max350Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 AddtlInf,omitempty"`
}

type PendingOpeningStatusReason1Choice struct {
	NoSpcfdRsn NoReasonCode                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 NoSpcfdRsn,omitempty"`
	Rsn        []PendingOpeningStatusReason1 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Rsn,omitempty"`
}

// May be one of ATHR, ATHP, FRDM, KYCM, NOTO, REST, RIGH
type PendingOpeningStatusReason1Code string

type PendingOpeningStatusReason2Choice struct {
	Cd    PendingOpeningStatusReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Cd,omitempty"`
	Prtry GenericIdentification36         `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Prtry,omitempty"`
}

type PendingStatusReason14 struct {
	Cd       PendingStatusReason2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Cd"`
	AddtlInf Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 AddtlInf,omitempty"`
}

type PendingStatusReason1Choice struct {
	NoSpcfdRsn NoReasonCode            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 NoSpcfdRsn,omitempty"`
	Rsn        []PendingStatusReason14 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Rsn,omitempty"`
}

// May be one of KYCM, FRDM, RIGH, ATHR, ATHP, MODI
type PendingStatusReason1Code string

type PendingStatusReason2Choice struct {
	Cd    PendingStatusReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Cd,omitempty"`
	Prtry GenericIdentification36  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Prtry,omitempty"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Ctry"`
}

type ProformaStatusReason1 struct {
	Cd       ProformaStatusReason2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Cd"`
	AddtlInf Max350Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 AddtlInf,omitempty"`
}

type ProformaStatusReason1Choice struct {
	NoSpcfdRsn NoReasonCode            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 NoSpcfdRsn,omitempty"`
	Rsn        []ProformaStatusReason1 `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Rsn,omitempty"`
}

// May be one of MODI, RIGH
type ProformaStatusReason1Code string

type ProformaStatusReason2Choice struct {
	Cd    ProformaStatusReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Cd,omitempty"`
	Prtry GenericIdentification36   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Prtry,omitempty"`
}

type RejectedReason16Choice struct {
	Cd    RejectedStatusReason6Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Cd,omitempty"`
	Prtry GenericIdentification36   `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Prtry,omitempty"`
}

// May be one of SAFE, NSLA
type RejectedStatusReason6Code string

type RejectionReason31 struct {
	Rsn         RejectedReason16Choice `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Rsn"`
	AddtlRsnInf Max350Text             `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 AddtlRsnInf,omitempty"`
}

type Status25Choice struct {
	Sts   AccountManagementStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Sts,omitempty"`
	Rjctd []RejectionReason31          `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Rjctd,omitempty"`
}

type TransactionType5Choice struct {
	Cd    InvestmentFundTransactionType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Cd,omitempty"`
	Prtry GenericIdentification47            `xml:"urn:iso:std:iso:20022:tech:xsd:acmt.006.001.07 Prtry,omitempty"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdGYearMonth time.Time

func (t *xsdGYearMonth) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYearMonth) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
