// Code generated by download. DO NOT EDIT.

package iso20022_seev_044_002_10

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AccountIdentification10 struct {
	IdCd SafekeepingAccountIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 IdCd"`
}

type AccountIdentification43Choice struct {
	ForAllAccts AccountIdentification10   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 ForAllAccts,omitempty"`
	AcctsList   []AccountIdentification48 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 AcctsList,omitempty"`
}

type AccountIdentification48 struct {
	SfkpgAcct RestrictedFINXMax35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 SfkpgAcct"`
	AcctOwnr  PartyIdentification136Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 AcctOwnr,omitempty"`
	SfkpgPlc  SafekeepingPlaceFormat32Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 SfkpgPlc,omitempty"`
}

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type AnyBICDec2014Identifier string

type CorporateAction48 struct {
	DtDtls  CorporateActionDate66                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 DtDtls,omitempty"`
	EvtStag CorporateActionEventStageFormat15Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 EvtStag,omitempty"`
	LtryTp  LotteryTypeFormat5Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 LtryTp,omitempty"`
}

type CorporateActionDate66 struct {
	RcrdDt   DateFormat49Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 RcrdDt,omitempty"`
	ExDvddDt DateFormat49Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 ExDvddDt,omitempty"`
}

// May be one of FULL, PART, RESC
type CorporateActionEventStage4Code string

type CorporateActionEventStageFormat15Choice struct {
	Cd    CorporateActionEventStage4Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Cd,omitempty"`
	Prtry GenericIdentification47        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Prtry,omitempty"`
}

// May be one of ACTV, ATTI, BRUP, DFLT, BONU, EXRI, CAPD, CAPG, CAPI, DRCA, DVCA, CHAN, COOP, CLSA, CONS, CONV, CREV, DECR, DETI, DSCL, DVOP, DRIP, DRAW, DTCH, EXOF, REDM, MCAL, INCR, PPMT, INTR, RHDI, LIQU, EXTM, MRGR, NOOF, CERT, ODLT, OTHR, PARI, PCAL, PRED, PINK, PLAC, PDEF, PRIO, BPUT, REDO, REMK, BIDS, SPLR, RHTS, DVSC, SHPR, SMAL, SOFF, DVSE, SPLF, TREC, TEND, DLST, SUSP, EXWA, WTRC, WRTH, ACCU, TNDP
type CorporateActionEventType32Code string

type CorporateActionEventType97Choice struct {
	Cd    CorporateActionEventType32Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Cd,omitempty"`
	Prtry GenericIdentification47        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Prtry,omitempty"`
}

type CorporateActionGeneralInformation150 struct {
	CorpActnEvtId      RestrictedFINXMax16Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 CorpActnEvtId"`
	OffclCorpActnEvtId RestrictedFINXMax16Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 OffclCorpActnEvtId,omitempty"`
	ClssActnNb         RestrictedFINXMax16Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 ClssActnNb,omitempty"`
	EvtTp              CorporateActionEventType97Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 EvtTp"`
	MndtryVlntryEvtTp  CorporateActionMandatoryVoluntary4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 MndtryVlntryEvtTp"`
	FinInstrmId        SecurityIdentification20                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 FinInstrmId"`
}

// May be one of MAND, CHOS, VOLU
type CorporateActionMandatoryVoluntary1Code string

type CorporateActionMandatoryVoluntary4Choice struct {
	Cd    CorporateActionMandatoryVoluntary1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Cd,omitempty"`
	Prtry GenericIdentification47                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Prtry,omitempty"`
}

type CorporateActionMovementPreliminaryAdviceCancellationAdvice002V10 struct {
	MvmntPrlimryAdvcId DocumentIdentification37             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 MvmntPrlimryAdvcId"`
	CorpActnGnlInf     CorporateActionGeneralInformation150 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 CorpActnGnlInf"`
	AcctDtls           AccountIdentification43Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 AcctDtls"`
	CorpActnDtls       CorporateAction48                    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 CorpActnDtls,omitempty"`
	IssrAgt            []PartyIdentification137Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 IssrAgt,omitempty"`
	PngAgt             []PartyIdentification137Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 PngAgt,omitempty"`
	SubPngAgt          []PartyIdentification137Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 SubPngAgt,omitempty"`
	Regar              PartyIdentification137Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Regar,omitempty"`
	RsellngAgt         []PartyIdentification137Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 RsellngAgt,omitempty"`
	PhysSctiesAgt      PartyIdentification137Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 PhysSctiesAgt,omitempty"`
	DrpAgt             PartyIdentification137Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 DrpAgt,omitempty"`
	SlctnAgt           []PartyIdentification137Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 SlctnAgt,omitempty"`
	InfAgt             PartyIdentification137Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 InfAgt,omitempty"`
	SplmtryData        []SupplementaryData1                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 SplmtryData,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DateAndDateTime2Choice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Dt,omitempty"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 DtTm,omitempty"`
}

type DateCode22Choice struct {
	Cd    DateType8Code           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Cd,omitempty"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Prtry,omitempty"`
}

type DateFormat49Choice struct {
	Dt   DateAndDateTime2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Dt,omitempty"`
	DtCd DateCode22Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 DtCd,omitempty"`
}

// May be one of UKWN, ONGO
type DateType8Code string

type Document struct {
	CorpActnMvmntPrlimryAdvcCxlAdvc CorporateActionMovementPreliminaryAdviceCancellationAdvice002V10 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 CorpActnMvmntPrlimryAdvcCxlAdvc"`
}

type DocumentIdentification37 struct {
	Id    RestrictedFINXMax16Text    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Id"`
	LkgTp ProcessingPosition10Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 LkgTp,omitempty"`
}

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// May be no more than 4 items long
type ExternalFinancialInstrumentIdentificationType1Code string

type GenericIdentification47 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Id"`
	Issr    Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Issr"`
	SchmeNm Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 SchmeNm,omitempty"`
}

type GenericIdentification84 struct {
	Id      RestrictedFINXMax34Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Id"`
	Issr    Max4AlphaNumericText    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Issr"`
	SchmeNm Max4AlphaNumericText    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 SchmeNm,omitempty"`
}

type GenericIdentification85 struct {
	Tp GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Tp"`
	Id RestrictedFINXMax30Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Id,omitempty"`
}

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource4Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Cd,omitempty"`
	Prtry RestrictedFINExact2Text                            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Prtry,omitempty"`
}

// May be one of ORIG, SUPP
type LotteryType1Code string

type LotteryTypeFormat5Choice struct {
	Cd    LotteryType1Code        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Cd,omitempty"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Prtry,omitempty"`
}

// May be no more than 16 items long
type Max16Text string

// May be no more than 350 items long
type Max350Text string

// Must match the pattern [a-zA-Z0-9]{1,4}
type Max4AlphaNumericText string

type NameAndAddress12 struct {
	Nm RestrictedFINXMax140Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Nm"`
}

type OtherIdentification2 struct {
	Id  RestrictedFINXMax31Text     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Sfx,omitempty"`
	Tp  IdentificationSource4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Tp"`
}

type PartyIdentification136Choice struct {
	AnyBIC  AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 AnyBIC,omitempty"`
	PrtryId GenericIdentification84 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 PrtryId,omitempty"`
}

type PartyIdentification137Choice struct {
	AnyBIC   AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 AnyBIC,omitempty"`
	PrtryId  GenericIdentification84 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 PrtryId,omitempty"`
	NmAndAdr NameAndAddress12        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 NmAndAdr,omitempty"`
}

type ProcessingPosition10Choice struct {
	Cd    ProcessingPosition3Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Cd,omitempty"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Prtry,omitempty"`
}

// May be one of AFTE, WITH, BEFO, INFO
type ProcessingPosition3Code string

// Must match the pattern XX|TS
type RestrictedFINExact2Text string

// Must match the pattern [0-9a-zA-Z/\-\?:\(\)\.\n\r,'\+ ]{1,140}
type RestrictedFINXMax140Text string

// Must match the pattern ([0-9a-zA-Z\-\?:\(\)\.,'\+ ]([0-9a-zA-Z\-\?:\(\)\.,'\+ ]*(/[0-9a-zA-Z\-\?:\(\)\.,'\+ ])?)*)
type RestrictedFINXMax16Text string

// Must match the pattern ([0-9a-zA-Z\-\?:\(\)\.,'\+ ]([0-9a-zA-Z\-\?:\(\)\.,'\+ ]*(/[0-9a-zA-Z\-\?:\(\)\.,'\+ ])?)*)
type RestrictedFINXMax30Text string

// Must match the pattern [0-9a-zA-Z/\-\?:\(\)\.,'\+ ]{1,31}
type RestrictedFINXMax31Text string

// Must match the pattern ([0-9a-zA-Z\-\?:\(\)\.,'\+ ]([0-9a-zA-Z\-\?:\(\)\.,'\+ ]*(/[0-9a-zA-Z\-\?:\(\)\.,'\+ ])?)*)
type RestrictedFINXMax34Text string

// Must match the pattern [0-9a-zA-Z/\-\?:\(\)\.,'\+ ]{1,35}
type RestrictedFINXMax35Text string

// May be one of GENR
type SafekeepingAccountIdentification1Code string

// May be one of CUST, ICSD, NCSD, SHHE
type SafekeepingPlace1Code string

// May be one of SHHE, ALLP
type SafekeepingPlace2Code string

type SafekeepingPlaceFormat32Choice struct {
	Id      SafekeepingPlaceTypeAndText9           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Id,omitempty"`
	Ctry    CountryCode                            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Ctry,omitempty"`
	TpAndId SafekeepingPlaceTypeAndIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 TpAndId,omitempty"`
	Prtry   GenericIdentification85                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Prtry,omitempty"`
}

type SafekeepingPlaceTypeAndIdentification1 struct {
	SfkpgPlcTp SafekeepingPlace1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 SfkpgPlcTp"`
	Id         AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Id"`
}

type SafekeepingPlaceTypeAndText9 struct {
	SfkpgPlcTp SafekeepingPlace2Code   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 SfkpgPlcTp"`
	Id         RestrictedFINXMax30Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Id,omitempty"`
}

type SecurityIdentification20 struct {
	ISIN   ISINOct2015Identifier    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 ISIN,omitempty"`
	OthrId []OtherIdentification2   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 OthrId,omitempty"`
	Desc   RestrictedFINXMax140Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Desc,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.044.002.10 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
