// Code generated by download. DO NOT EDIT.

package iso20022_fxtr_032_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.032.001.01 Dt,omitempty"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.032.001.01 DtTm,omitempty"`
}

type DateFormat18Choice struct {
	Dt         DateAndDateTimeChoice `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.032.001.01 Dt,omitempty"`
	NotSpcfdDt DateType8Code         `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.032.001.01 NotSpcfdDt,omitempty"`
}

// May be one of UKWN, ONGO
type DateType8Code string

type Document struct {
	FXTradCaptrRptReq ForeignExchangeTradeCaptureReportRequestV01 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.032.001.01 FXTradCaptrRptReq"`
}

type ForeignExchangeTradeCaptureReportRequestV01 struct {
	QryReqId    MessageIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.032.001.01 QryReqId"`
	QryOrdrSts  QueryOrderStatus1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.032.001.01 QryOrdrSts"`
	QryTp       QueryDataType1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.032.001.01 QryTp,omitempty"`
	QryStartNb  Max35NumericText       `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.032.001.01 QryStartNb"`
	QryByPrd    bool                   `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.032.001.01 QryByPrd"`
	QryPrd      Period4                `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.032.001.01 QryPrd,omitempty"`
	QryTradId   Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.032.001.01 QryTradId,omitempty"`
	QryEndId    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.032.001.01 QryEndId,omitempty"`
	SplmtryData []SupplementaryData1   `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.032.001.01 SplmtryData,omitempty"`
	QryPgSz     Max35NumericText       `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.032.001.01 QryPgSz,omitempty"`
	QryParamVal Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.032.001.01 QryParamVal,omitempty"`
}

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// May be no more than 350 items long
type Max350Text string

// Must match the pattern [0-9]{1,35}
type Max35NumericText string

// May be no more than 35 items long
type Max35Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.032.001.01 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.032.001.01 CreDtTm"`
}

type Period4 struct {
	StartDt DateFormat18Choice `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.032.001.01 StartDt"`
	EndDt   DateFormat18Choice `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.032.001.01 EndDt"`
}

// May be one of QFXT, QOTD
type QueryDataType1Code string

// May be one of QUCO, QOFP, QFEO, QPEO, QUAO
type QueryOrderStatus1Code string

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.032.001.01 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:fxtr.032.001.01 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
