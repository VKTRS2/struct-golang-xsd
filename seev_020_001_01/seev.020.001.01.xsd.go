// Code generated by download. DO NOT EDIT.

package iso20022_seev_020_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AccountIdentification2Choice struct {
	CshAcctId    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 CshAcctId,omitempty"`
	SctiesAcctId Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 SctiesAcctId,omitempty"`
}

type ActiveCurrencyAnd13DecimalAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AgentCAMovementCancellationRequestV01 struct {
	Id                DocumentIdentification8     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 Id"`
	AgtCAMvmntInstrId DocumentIdentification8     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 AgtCAMvmntInstrId"`
	CorpActnGnlInf    CorporateActionInformation1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 CorpActnGnlInf"`
	MvmntDtls         MovementInstruction1        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 MvmntDtls,omitempty"`
}

type AlternateSecurityIdentification3 struct {
	Id         Max70Text   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 Id"`
	DmstIdSrc  CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 DmstIdSrc,omitempty"`
	PrtryIdSrc Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 PrtryIdSrc,omitempty"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

type CashAccount19 struct {
	CdtDbtInd  CreditDebitCode              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 CdtDbtInd"`
	AcctOwnrId PartyIdentification2Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 AcctOwnrId,omitempty"`
	AcctId     AccountIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 AcctId"`
}

type CashMovement2 struct {
	Amt      ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 Amt"`
	AcctDtls []CashAccount19         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 AcctDtls"`
}

type CashProceeds1 struct {
	PstngAmt    ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 PstngAmt"`
	RcncltnDtls Max350Text              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 RcncltnDtls,omitempty"`
	AcctDtls    []CashAccount19         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 AcctDtls"`
}

// May be one of GENL, DISN, REOR
type CorporateActionEventProcessingType1Code string

type CorporateActionEventProcessingType1FormatChoice struct {
	Cd    CorporateActionEventProcessingType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 Cd,omitempty"`
	Prtry GenericIdentification13                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 Prtry,omitempty"`
}

// May be one of ACTV, ATTI, BIDS, BONU, BPUT, BRUP, CAPG, CAPI, CERT, CHAN, CLSA, CONS, CONV, COOP, DECR, DETI, DFLT, DLST, DRAW, DRIP, DSCL, DTCH, DVCA, DVOP, DVSC, DVSE, EXOF, EXRI, EXTM, EXWA, INCR, INTR, LIQU, MCAL, MRGR, ODLT, PARI, PCAL, PDEF, PINK, PLAC, PPMT, PRED, PRII, PRIO, REDM, REDO, REMK, RHDI, RHTS, SHPR, SMAL, SOFF, SPLF, SPLR, SUSP, TEND, TREC, WRTH, WTRC, OTHR
type CorporateActionEventType2Code string

type CorporateActionEventType2FormatChoice struct {
	Cd    CorporateActionEventType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 Cd,omitempty"`
	Prtry GenericIdentification13       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 Prtry,omitempty"`
}

type CorporateActionInformation1 struct {
	AgtId             PartyIdentification2Choice                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 AgtId"`
	IssrCorpActnId    Max35Text                                       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 IssrCorpActnId,omitempty"`
	CorpActnPrcgId    Max35Text                                       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 CorpActnPrcgId,omitempty"`
	EvtTp             CorporateActionEventType2FormatChoice           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 EvtTp"`
	MndtryVlntryEvtTp CorporateActionMandatoryVoluntary1FormatChoice  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 MndtryVlntryEvtTp"`
	EvtPrcgTp         CorporateActionEventProcessingType1FormatChoice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 EvtPrcgTp,omitempty"`
	UndrlygScty       FinancialInstrumentDescription3                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 UndrlygScty"`
}

// May be one of MAND, CHOS, VOLU
type CorporateActionMandatoryVoluntary1Code string

type CorporateActionMandatoryVoluntary1FormatChoice struct {
	Cd    CorporateActionMandatoryVoluntary1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 Cd,omitempty"`
	Prtry GenericIdentification13                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 Prtry,omitempty"`
}

type CorporateActionMovement1 struct {
	OrdrTp            DistributionInstructionType1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 OrdrTp"`
	HghPrtyInd        bool                               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 HghPrtyInd"`
	OptnNb            Exact3NumericText                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 OptnNb,omitempty"`
	OptnTp            CorporateActionOption1FormatChoice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 OptnTp,omitempty"`
	ReqdExctnDt       ISODate                            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 ReqdExctnDt"`
	AcctOwnrId        PartyIdentification2Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 AcctOwnrId,omitempty"`
	AcctId            Max35Text                          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 AcctId,omitempty"`
	ConfdBalSctiesQty UnitOrFaceAmount1Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 ConfdBalSctiesQty,omitempty"`
}

type CorporateActionOption1FormatChoice struct {
	Cd    CorporateActionOptionType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 Cd,omitempty"`
	Prtry GenericIdentification13        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 Prtry,omitempty"`
}

// May be one of BSPL, BUYA, CASE, CASH, CEXC, CTEN, CONN, CONY, EXER, LAPS, MPUT, NOAC, OFFR, OVER, SECU, SLLE, SPLI, NOQU, OTHR, QINV
type CorporateActionOptionType1Code string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

// May be one of CRDT, DBIT
type CreditDebitCode string

// May be one of GDEB, IDEB, GRET, CHAN, IRET
type DistributionInstructionType1Code string

type Document struct {
	AgtCAMvmntCxlReq AgentCAMovementCancellationRequestV01 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 AgtCAMvmntCxlReq"`
}

type DocumentIdentification8 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 CreDtTm,omitempty"`
}

// Must match the pattern [0-9]{3}
type Exact3NumericText string

type FinancialInstrumentDescription3 struct {
	SctyId     SecurityIdentification7    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 SctyId"`
	PlcOfListg MICIdentifier              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 PlcOfListg,omitempty"`
	SfkpgPlc   PartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 SfkpgPlc,omitempty"`
}

type ForeignExchangeTerms9 struct {
	UnitCcy  ActiveCurrencyCode      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 UnitCcy"`
	QtdCcy   ActiveCurrencyCode      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 QtdCcy"`
	XchgRate float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 XchgRate"`
	RsltgAmt ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 RsltgAmt"`
	OrgnlAmt ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 OrgnlAmt,omitempty"`
}

// May be one of BEAR, REGD
type FormOfSecurity1Code string

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 Issr,omitempty"`
}

type GenericIdentification13 struct {
	Id      Max4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 Id"`
	SchmeNm Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 SchmeNm,omitempty"`
	Issr    Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 Issr"`
}

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// Must match the pattern [A-Z0-9]{4,4}
type MICIdentifier string

// May be no more than 140 items long
type Max140Text string

// May be no more than 16 items long
type Max16Text string

// May be no more than 350 items long
type Max350Text string

// May be no more than 35 items long
type Max35Text string

// Must match the pattern [a-zA-Z0-9]{1,4}
type Max4AlphaNumericText string

// May be no more than 70 items long
type Max70Text string

type MovementInstruction1 struct {
	MvmntGnlInf            CorporateActionMovement1      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 MvmntGnlInf"`
	UndrlygSctiesMvmntDtls []UnderlyingSecurityMovement1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 UndrlygSctiesMvmntDtls,omitempty"`
	UndrlygCshMvmntDtls    []CashMovement2               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 UndrlygCshMvmntDtls,omitempty"`
	PrcdsMvmntDtls         []ProceedsMovement1           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 PrcdsMvmntDtls,omitempty"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 Adr,omitempty"`
}

type PartyIdentification2Choice struct {
	BICOrBEI AnyBICIdentifier       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 BICOrBEI,omitempty"`
	PrtryId  GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 PrtryId,omitempty"`
	NmAndAdr NameAndAddress5        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 NmAndAdr,omitempty"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 Ctry"`
}

type PriceValue1 struct {
	Amt ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 Amt"`
}

type ProceedsMovement1 struct {
	CshPrcdsMvmntDtls    []CashProceeds1       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 CshPrcdsMvmntDtls,omitempty"`
	SctiesPrcdsMvmntDtls []SecuritiesProceeds1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 SctiesPrcdsMvmntDtls,omitempty"`
	TaxDtls              TaxVoucher1           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 TaxDtls,omitempty"`
}

type SecuritiesAccount10 struct {
	CdtDbtInd     CreditDebitCode                    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 CdtDbtInd"`
	AcctOwnrId    PartyIdentification2Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 AcctOwnrId,omitempty"`
	AcctOwnrNtlty string                             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 AcctOwnrNtlty,omitempty"`
	AcctId        Max35Text                          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 AcctId"`
	BalTp         SecuritiesBalanceType9FormatChoice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 BalTp,omitempty"`
	SctyHldgForm  FormOfSecurity1Code                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 SctyHldgForm,omitempty"`
}

type SecuritiesAccount8 struct {
	CdtDbtInd    CreditDebitCode                     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 CdtDbtInd"`
	AcctOwnrId   PartyIdentification2Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 AcctOwnrId,omitempty"`
	AcctId       Max35Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 AcctId"`
	BalTp        SecuritiesBalanceType10FormatChoice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 BalTp,omitempty"`
	OptnTp       CorporateActionOption1FormatChoice  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 OptnTp,omitempty"`
	OptnNb       Exact3NumericText                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 OptnNb,omitempty"`
	SctyHldgForm FormOfSecurity1Code                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 SctyHldgForm,omitempty"`
	StmpDty      StampDutyType1FormatChoice          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 StmpDty,omitempty"`
}

// May be one of AVLB, REST, RDIS, RREM
type SecuritiesBalanceType10Code string

type SecuritiesBalanceType10FormatChoice struct {
	Cd    SecuritiesBalanceType10Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 Cd,omitempty"`
	Prtry GenericIdentification13     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 Prtry,omitempty"`
}

// May be one of AVLB, ELEC, UNEL, RDIS, RREM
type SecuritiesBalanceType9Code string

type SecuritiesBalanceType9FormatChoice struct {
	Cd    SecuritiesBalanceType9Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 Cd,omitempty"`
	Prtry GenericIdentification13    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 Prtry,omitempty"`
}

type SecuritiesProceeds1 struct {
	SctyId      SecurityIdentification7 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 SctyId"`
	PstngQty    UnitOrFaceAmount1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 PstngQty"`
	AcctDtls    []SecuritiesAccount10   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 AcctDtls"`
	RcncltnDtls Max350Text              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 RcncltnDtls,omitempty"`
}

type SecurityIdentification7 struct {
	ISIN   ISINIdentifier                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 ISIN,omitempty"`
	OthrId AlternateSecurityIdentification3 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 OthrId,omitempty"`
	Desc   Max140Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 Desc,omitempty"`
}

// May be one of SDRU, SDRT, SDRN, SDRQ
type StampDutyType1Code string

type StampDutyType1FormatChoice struct {
	Cd    StampDutyType1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 Cd,omitempty"`
	Prtry GenericIdentification13 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 Prtry,omitempty"`
}

type TaxVoucher1 struct {
	TaxVchrRate                 float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 TaxVchrRate"`
	TaxCdt                      ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 TaxCdt,omitempty"`
	TaxDdctn                    ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 TaxDdctn,omitempty"`
	GrssAmt                     ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 GrssAmt"`
	NetAmt                      ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 NetAmt"`
	RcrdDtHldg                  UnitOrFaceAmount1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 RcrdDtHldg"`
	TaxCdtRate                  float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 TaxCdtRate,omitempty"`
	WhldgTaxAmt                 ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 WhldgTaxAmt,omitempty"`
	WhldgTaxRate                float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 WhldgTaxRate,omitempty"`
	ScripDvddRinvstmtPricPerShr PriceValue1             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 ScripDvddRinvstmtPricPerShr,omitempty"`
	CshAmtBrghtFwd              ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 CshAmtBrghtFwd,omitempty"`
	AlltdShrsCost               PriceValue1             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 AlltdShrsCost,omitempty"`
	CshAmtCrrdFwd               ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 CshAmtCrrdFwd,omitempty"`
	NtnlTax                     ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 NtnlTax,omitempty"`
	NtnlDvddPybl                ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 NtnlDvddPybl,omitempty"`
	BrgnDt                      ISODate                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 BrgnDt,omitempty"`
	BrgnSttlmDt                 ISODate                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 BrgnSttlmDt,omitempty"`
	StmpDtyAmt                  ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 StmpDtyAmt,omitempty"`
	ChrgAmt                     ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 ChrgAmt,omitempty"`
	ComssnAmt                   ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 ComssnAmt,omitempty"`
	FXDtls                      ForeignExchangeTerms9   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 FXDtls,omitempty"`
}

type UnderlyingSecurityMovement1 struct {
	SctyId    SecurityIdentification7 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 SctyId"`
	SctiesQty UnitOrFaceAmount1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 SctiesQty"`
	AcctDtls  []SecuritiesAccount8    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 AcctDtls"`
}

type UnitOrFaceAmount1Choice struct {
	Unit    float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 Unit,omitempty"`
	FaceAmt ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:seev.020.001.01 FaceAmt,omitempty"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
