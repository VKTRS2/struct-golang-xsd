// Code generated by download. DO NOT EDIT.

package iso20022_catm_007_001_04

import (
	"bytes"
	"encoding/base64"
	"encoding/xml"
	"time"
)

// May be one of HS25, HS38, HS51, HS01
type Algorithm11Code string

// May be one of HS25, HS38, HS51, HS01, SH31, SH32, SH33, SH35, SHK1, SHK2
type Algorithm16Code string

// May be one of MACC, MCCS, CMA1, MCC1, CMA9, CMA5, CMA2, CM31, CM32, CM33, MCS3, CCA1, CCA2, CCA3
type Algorithm17Code string

// May be one of EA2C, E3DC, DKP9, UKPT, UKA2, EA9C, EA5C, DA12, DA19, DA25, N108, EA5R, EA9R, EA2R, E3DR, E36C, E36R, SD5C, UKA1, UKA3
type Algorithm24Code string

// May be one of ERS2, ERS1, RPSS, ERS3, ED32, ED33, ED35, ED23, ED25, ES22, ES32, ES33, ES35, ES23, ES25, ED22
type Algorithm25Code string

// May be one of ERSA, RSAO
type Algorithm7Code string

// May be one of MGF1
type Algorithm8Code string

type AlgorithmIdentification12 struct {
	Algo  Algorithm8Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Algo"`
	Param Parameter5     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Param,omitempty"`
}

type AlgorithmIdentification18 struct {
	Algo  Algorithm8Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Algo"`
	Param Parameter9     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Param,omitempty"`
}

type AlgorithmIdentification19 struct {
	Algo  Algorithm7Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Algo"`
	Param Parameter10    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Param,omitempty"`
}

type AlgorithmIdentification21 struct {
	Algo Algorithm16Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Algo"`
}

type AlgorithmIdentification22 struct {
	Algo  Algorithm17Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Algo"`
	Param Parameter7      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Param,omitempty"`
}

type AlgorithmIdentification29 struct {
	Algo  Algorithm24Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Algo"`
	Param Parameter12     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Param,omitempty"`
}

type AlgorithmIdentification30 struct {
	Algo  Algorithm25Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Algo"`
	Param Parameter15     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Param,omitempty"`
}

// May be one of CNAT, LATT, OATT, OUAT, CATT
type AttributeType1Code string

// May be one of EMAL, CHLG
type AttributeType2Code string

type AuthenticatedData7 struct {
	Vrsn        float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Vrsn,omitempty"`
	Rcpt        []Recipient10Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Rcpt"`
	MACAlgo     AlgorithmIdentification22 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 MACAlgo"`
	NcpsltdCntt EncapsulatedContent3      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 NcpsltdCntt"`
	MAC         Max140Binary              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 MAC"`
}

// May be one of LNGT, NUL8, NULG, NULL, RAND
type BytePadding1Code string

// May be one of CRTC, CRTR, CRTK, WLSR, WLSA
type CardPaymentServiceType10Code string

type CertificateIssuer1 struct {
	RltvDstngshdNm []RelativeDistinguishedName1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 RltvDstngshdNm"`
}

type CertificateManagementRequest2 struct {
	POIId            GenericIdentification176     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 POIId"`
	TMId             GenericIdentification176     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 TMId,omitempty"`
	CertSvc          CardPaymentServiceType10Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 CertSvc"`
	SctyDomn         Max70Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 SctyDomn,omitempty"`
	BinryCertfctnReq Max20000Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 BinryCertfctnReq,omitempty"`
	CertfctnReq      CertificationRequest1        `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 CertfctnReq,omitempty"`
	ClntCert         Max10KBinary                 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 ClntCert,omitempty"`
	WhtListId        PointOfInteraction6          `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 WhtListId,omitempty"`
}

type CertificateManagementRequestV04 struct {
	Hdr         TMSHeader1                    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Hdr"`
	CertMgmtReq CertificateManagementRequest2 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 CertMgmtReq"`
	SctyTrlr    ContentInformationType25      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 SctyTrlr,omitempty"`
}

type CertificationRequest1 struct {
	CertReqInf CertificationRequest2 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 CertReqInf"`
	KeyId      Max140Text            `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 KeyId,omitempty"`
	KeyVrsn    Max140Text            `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 KeyVrsn,omitempty"`
}

type CertificationRequest2 struct {
	Vrsn           float64                      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Vrsn,omitempty"`
	SbjtNm         CertificateIssuer1           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 SbjtNm,omitempty"`
	SbjtPblcKeyInf PublicRSAKey2                `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 SbjtPblcKeyInf"`
	Attr           []RelativeDistinguishedName2 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Attr"`
}

type ContentInformationType25 struct {
	CnttTp       ContentType2Code   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 CnttTp"`
	AuthntcdData AuthenticatedData7 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 AuthntcdData,omitempty"`
	SgndData     SignedData6        `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 SgndData,omitempty"`
}

// May be one of DATA, SIGN, EVLP, DGST, AUTH
type ContentType2Code string

type Document struct {
	CertMgmtReq CertificateManagementRequestV04 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 CertMgmtReq"`
}

type EncapsulatedContent3 struct {
	CnttTp ContentType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 CnttTp"`
	Cntt   Max100KBinary    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Cntt,omitempty"`
}

// May be one of TR31, TR34, I238
type EncryptionFormat2Code string

type GenericIdentification176 struct {
	Id     Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Id"`
	Tp     PartyType33Code   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Tp,omitempty"`
	Issr   PartyType33Code   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Issr,omitempty"`
	Ctry   Min2Max3AlphaText `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Ctry,omitempty"`
	ShrtNm Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 ShrtNm,omitempty"`
}

type GenericIdentification177 struct {
	Id       Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Id"`
	Tp       PartyType33Code    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Tp,omitempty"`
	Issr     PartyType33Code    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Issr,omitempty"`
	Ctry     Min2Max3AlphaText  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Ctry,omitempty"`
	ShrtNm   Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 ShrtNm,omitempty"`
	RmotAccs NetworkParameters7 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 RmotAccs,omitempty"`
	Glctn    Geolocation1       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Glctn,omitempty"`
}

type GenericInformation1 struct {
	Nm  Max70Text  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Nm"`
	Val Max140Text `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Val,omitempty"`
}

type Geolocation1 struct {
	GeogcCordints GeolocationGeographicCoordinates1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 GeogcCordints,omitempty"`
	UTMCordints   GeolocationUTMCoordinates1        `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 UTMCordints,omitempty"`
}

type GeolocationGeographicCoordinates1 struct {
	Lat  Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Lat"`
	Long Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Long"`
}

type GeolocationUTMCoordinates1 struct {
	UTMZone    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 UTMZone"`
	UTMEstwrd  Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 UTMEstwrd"`
	UTMNrthwrd Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 UTMNrthwrd"`
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IssuerAndSerialNumber2 struct {
	Issr  CertificateIssuer1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Issr"`
	SrlNb Max500Binary       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 SrlNb"`
}

type KEK7 struct {
	Vrsn          float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Vrsn,omitempty"`
	KEKId         KEKIdentifier2            `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 KEKId"`
	KeyNcrptnAlgo AlgorithmIdentification29 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 KeyNcrptnAlgo"`
	NcrptdKey     Max500Binary              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 NcrptdKey"`
}

type KEKIdentifier2 struct {
	KeyId     Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 KeyId"`
	KeyVrsn   Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 KeyVrsn"`
	SeqNb     float64         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 SeqNb,omitempty"`
	DerivtnId Min5Max16Binary `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 DerivtnId,omitempty"`
}

type KeyTransport7 struct {
	Vrsn          float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Vrsn,omitempty"`
	RcptId        Recipient9Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 RcptId"`
	KeyNcrptnAlgo AlgorithmIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 KeyNcrptnAlgo"`
	NcrptdKey     Max5000Binary             `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 NcrptdKey"`
}

type Max100KBinary []byte

func (t *Max100KBinary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max100KBinary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

type Max10KBinary []byte

func (t *Max10KBinary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max10KBinary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

type Max140Binary []byte

func (t *Max140Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max140Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// May be no more than 140 items long
type Max140Text string

// May be no more than 20000 items long
type Max20000Text string

type Max3000Binary []byte

func (t *Max3000Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max3000Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

type Max35Binary []byte

func (t *Max35Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max35Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// May be no more than 35 items long
type Max35Text string

type Max5000Binary []byte

func (t *Max5000Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max5000Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

type Max500Binary []byte

func (t *Max500Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max500Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// May be no more than 500 items long
type Max500Text string

// May be no more than 6 items long
type Max6Text string

// May be no more than 70 items long
type Max70Text string

// Must match the pattern [a-zA-Z]{2,3}
type Min2Max3AlphaText string

type Min5Max16Binary []byte

func (t *Min5Max16Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Min5Max16Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

type NetworkParameters7 struct {
	Adr        []NetworkParameters9 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Adr"`
	UsrNm      Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 UsrNm,omitempty"`
	AccsCd     Max35Binary          `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 AccsCd,omitempty"`
	SvrCert    []Max10KBinary       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 SvrCert,omitempty"`
	SvrCertIdr []Max140Binary       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 SvrCertIdr,omitempty"`
	ClntCert   []Max10KBinary       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 ClntCert,omitempty"`
	SctyPrfl   Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 SctyPrfl,omitempty"`
}

type NetworkParameters9 struct {
	NtwkTp NetworkType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 NtwkTp"`
	AdrVal Max500Text       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 AdrVal"`
}

// May be one of IPNW, PSTN
type NetworkType1Code string

type Parameter10 struct {
	NcrptnFrmt   EncryptionFormat2Code     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 NcrptnFrmt,omitempty"`
	DgstAlgo     Algorithm16Code           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 DgstAlgo,omitempty"`
	MskGnrtrAlgo AlgorithmIdentification18 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 MskGnrtrAlgo,omitempty"`
}

type Parameter12 struct {
	NcrptnFrmt   EncryptionFormat2Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 NcrptnFrmt,omitempty"`
	InitlstnVctr Max500Binary          `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 InitlstnVctr,omitempty"`
	BPddg        BytePadding1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 BPddg,omitempty"`
}

type Parameter15 struct {
	DgstAlgo     Algorithm16Code           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 DgstAlgo,omitempty"`
	MskGnrtrAlgo AlgorithmIdentification12 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 MskGnrtrAlgo,omitempty"`
	SaltLngth    float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 SaltLngth,omitempty"`
	TrlrFld      float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 TrlrFld,omitempty"`
	OIDCrvNm     Max140Text                `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 OIDCrvNm,omitempty"`
}

type Parameter5 struct {
	DgstAlgo Algorithm11Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 DgstAlgo,omitempty"`
}

type Parameter7 struct {
	InitlstnVctr Max500Binary     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 InitlstnVctr,omitempty"`
	BPddg        BytePadding1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 BPddg,omitempty"`
}

type Parameter9 struct {
	DgstAlgo Algorithm16Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 DgstAlgo,omitempty"`
}

// May be one of OPOI, MERC, ACCP, ITAG, ACQR, CISS, DLIS, MTMG, TAXH, TMGT
type PartyType33Code string

type PointOfInteraction6 struct {
	ManfctrIdr Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 ManfctrIdr"`
	Mdl        Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Mdl"`
	SrlNb      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 SrlNb"`
}

type PublicRSAKey1 struct {
	Mdlus Max5000Binary `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Mdlus"`
	Expnt Max5000Binary `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Expnt"`
}

type PublicRSAKey2 struct {
	Algo       Algorithm7Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Algo,omitempty"`
	PblcKeyVal PublicRSAKey1  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 PblcKeyVal"`
}

type Recipient10Choice struct {
	KeyTrnsprt KeyTransport7  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 KeyTrnsprt,omitempty"`
	KEK        KEK7           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 KEK,omitempty"`
	KeyIdr     KEKIdentifier2 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 KeyIdr,omitempty"`
}

type Recipient9Choice struct {
	IssrAndSrlNb IssuerAndSerialNumber2 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 IssrAndSrlNb,omitempty"`
	KeyIdr       KEKIdentifier2         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 KeyIdr,omitempty"`
}

type RelativeDistinguishedName1 struct {
	AttrTp  AttributeType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 AttrTp"`
	AttrVal Max140Text         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 AttrVal"`
}

type RelativeDistinguishedName2 struct {
	AttrTp  AttributeType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 AttrTp"`
	AttrVal Max140Text         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 AttrVal"`
}

type SignedData6 struct {
	Vrsn        float64                     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Vrsn,omitempty"`
	DgstAlgo    []AlgorithmIdentification21 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 DgstAlgo,omitempty"`
	NcpsltdCntt EncapsulatedContent3        `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 NcpsltdCntt,omitempty"`
	Cert        []Max5000Binary             `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Cert,omitempty"`
	Sgnr        []Signer5                   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Sgnr,omitempty"`
}

type Signer5 struct {
	Vrsn        float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Vrsn,omitempty"`
	SgnrId      Recipient9Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 SgnrId,omitempty"`
	DgstAlgo    AlgorithmIdentification21 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 DgstAlgo"`
	SgndAttrbts []GenericInformation1     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 SgndAttrbts,omitempty"`
	SgntrAlgo   AlgorithmIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 SgntrAlgo"`
	Sgntr       Max3000Binary             `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Sgntr"`
}

type TMSHeader1 struct {
	DwnldTrf bool                     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 DwnldTrf"`
	FrmtVrsn Max6Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 FrmtVrsn"`
	XchgId   float64                  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 XchgId"`
	CreDtTm  ISODateTime              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 CreDtTm"`
	InitgPty GenericIdentification176 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 InitgPty"`
	RcptPty  GenericIdentification177 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 RcptPty,omitempty"`
	Tracblt  []Traceability8          `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 Tracblt,omitempty"`
}

type Traceability8 struct {
	RlayId      GenericIdentification177 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 RlayId"`
	PrtcolNm    Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 PrtcolNm,omitempty"`
	PrtcolVrsn  Max6Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 PrtcolVrsn,omitempty"`
	TracDtTmIn  ISODateTime              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 TracDtTmIn"`
	TracDtTmOut ISODateTime              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.007.001.04 TracDtTmOut"`
}

type xsdBase64Binary []byte

func (b *xsdBase64Binary) UnmarshalText(text []byte) (err error) {
	*b, err = base64.StdEncoding.DecodeString(string(text))
	return
}
func (b xsdBase64Binary) MarshalText() ([]byte, error) {
	var buf bytes.Buffer
	enc := base64.NewEncoder(base64.StdEncoding, &buf)
	enc.Write([]byte(b))
	enc.Close()
	return buf.Bytes(), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}
