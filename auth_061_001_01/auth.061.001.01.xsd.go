// Code generated by download. DO NOT EDIT.

package iso20022_auth_061_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

type ActiveCurrencyAnd24Amount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type CCPInvestmentsReportV01 struct {
	Invstmt     []Investment1Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 Invstmt"`
	SplmtryData []SupplementaryData1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 SplmtryData,omitempty"`
}

type Deposit1 struct {
	MtrtyDt  ISODate                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 MtrtyDt"`
	Val      ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 Val"`
	CtrPtyId LEIIdentifier           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 CtrPtyId"`
}

type Document struct {
	CCPInvstmtsRpt CCPInvestmentsReportV01 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 CCPInvstmtsRpt"`
}

type FinancialInstrument59 struct {
	Id   ISINOct2015Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 Id"`
	Issr LEIIdentifier         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 Issr"`
	Sctr string                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 Sctr,omitempty"`
}

type GeneralCollateral3 struct {
	FinInstrmId      []FinancialInstrument59 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 FinInstrmId,omitempty"`
	ElgblFinInstrmId []ISINOct2015Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 ElgblFinInstrmId,omitempty"`
}

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type Investment1Choice struct {
	UscrdCshDpst   Deposit1                         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 UscrdCshDpst,omitempty"`
	CntrlBkDpst    Deposit1                         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 CntrlBkDpst,omitempty"`
	RpAgrmt        RepurchaseAgreement2             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 RpAgrmt,omitempty"`
	OthrInvstmts   OtherInvestment1                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 OthrInvstmts,omitempty"`
	OutrghtInvstmt SecurityIdentificationAndAmount1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 OutrghtInvstmt,omitempty"`
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

// May be no more than 140 items long
type Max140Text string

// May be no more than 350 items long
type Max350Text string

type OtherInvestment1 struct {
	Desc Max140Text              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 Desc"`
	Amt  ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 Amt"`
}

// May be one of SVGN, EQUI, OTHR
type ProductType7Code string

type RepurchaseAgreement2 struct {
	MtrtyDt     ISODate                        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 MtrtyDt"`
	ScndLegPric ActiveCurrencyAndAmount        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 ScndLegPric"`
	CollMktVal  ActiveCurrencyAndAmount        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 CollMktVal"`
	CtrPty      LEIIdentifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 CtrPty"`
	RpAgrmtTp   RepurchaseAgreementType3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 RpAgrmtTp"`
	TrptyAgtId  LEIIdentifier                  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 TrptyAgtId,omitempty"`
}

type RepurchaseAgreementType3Choice struct {
	SpcfcColl SpecificCollateral2 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 SpcfcColl,omitempty"`
	GnlColl   GeneralCollateral3  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 GnlColl,omitempty"`
}

type SecurityIdentificationAndAmount1 struct {
	Id          ISINOct2015Identifier     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 Id"`
	MktVal      ActiveCurrencyAnd24Amount `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 MktVal"`
	FinInstrmTp ProductType7Code          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 FinInstrmTp"`
}

type SpecificCollateral2 struct {
	FinInstrmId FinancialInstrument59 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 FinInstrmId"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.061.001.01 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}
