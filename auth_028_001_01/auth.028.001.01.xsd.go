// Code generated by download. DO NOT EDIT.

package iso20022_auth_028_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

type DateTimePeriod1 struct {
	FrDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:auth.028.001.01 FrDtTm"`
	ToDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:auth.028.001.01 ToDtTm"`
}

type Document struct {
	MnyMktSttstclRptStsAdvc MoneyMarketStatisticalReportStatusAdviceV01 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.028.001.01 MnyMktSttstclRptStsAdvc"`
}

// May be no more than 4 items long
type ExternalValidationRuleIdentification1Code string

type GenericValidationRuleIdentification1 struct {
	Id      Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.028.001.01 Id"`
	Desc    Max350Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.028.001.01 Desc,omitempty"`
	SchmeNm ValidationRuleSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.028.001.01 SchmeNm,omitempty"`
	Issr    Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.028.001.01 Issr,omitempty"`
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

// May be no more than 105 items long
type Max105Text string

// May be no more than 350 items long
type Max350Text string

// May be no more than 35 items long
type Max35Text string

type MoneyMarketStatisticalReportStatusAdviceV01 struct {
	StsRptHdr   MoneyMarketStatusReportHeader1  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.028.001.01 StsRptHdr"`
	TxSts       []MoneyMarketTransactionStatus2 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.028.001.01 TxSts,omitempty"`
	SplmtryData []SupplementaryData1            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.028.001.01 SplmtryData,omitempty"`
}

type MoneyMarketStatusReportHeader1 struct {
	RptgAgt   LEIIdentifier                          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.028.001.01 RptgAgt"`
	RptgPrd   DateTimePeriod1                        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.028.001.01 RptgPrd"`
	RptSts    StatisticalReportingStatus1Code        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.028.001.01 RptSts"`
	VldtnRule []GenericValidationRuleIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.028.001.01 VldtnRule,omitempty"`
}

type MoneyMarketTransactionStatus2 struct {
	UnqTxIdr    Max105Text                             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.028.001.01 UnqTxIdr,omitempty"`
	PrtryTxId   Max105Text                             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.028.001.01 PrtryTxId"`
	BrnchId     LEIIdentifier                          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.028.001.01 BrnchId,omitempty"`
	Sts         StatisticalReportingStatus2Code        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.028.001.01 Sts"`
	VldtnRule   []GenericValidationRuleIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.028.001.01 VldtnRule,omitempty"`
	SplmtryData []SupplementaryData1                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.028.001.01 SplmtryData,omitempty"`
}

// May be one of ACPT, ACTC, PART, PDNG, RCVD, RJCT, RMDR, INCF, CRPT
type StatisticalReportingStatus1Code string

// May be one of ACPT, RJCT, WARN
type StatisticalReportingStatus2Code string

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.028.001.01 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.028.001.01 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type ValidationRuleSchemeName1Choice struct {
	Cd    ExternalValidationRuleIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.028.001.01 Cd,omitempty"`
	Prtry Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.028.001.01 Prtry,omitempty"`
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}
