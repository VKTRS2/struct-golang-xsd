// Code generated by download. DO NOT EDIT.

package iso20022_secl_005_001_02

import (
	"bytes"
	"encoding/xml"
	"time"
)

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type ActiveOrHistoricCurrencyAndAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

type AlternatePartyIdentification4 struct {
	IdTp    IdentificationType6Choice `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 IdTp"`
	Ctry    CountryCode               `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Ctry"`
	AltrnId Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 AltrnId"`
}

type Amount2 struct {
	OrgnlCcyAmt ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 OrgnlCcyAmt,omitempty"`
	RptgAmt     float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 RptgAmt"`
}

type AmountAndDirection20 struct {
	Amt       ActiveOrHistoricCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Amt"`
	CdtDbtInd CreditDebitCode                   `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 CdtDbtInd,omitempty"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// May be one of HOUS, CLIE, LIPR
type ClearingAccountType1Code string

type Collateral6 struct {
	PstHrcutVal ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 PstHrcutVal"`
	MktVal      ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 MktVal"`
	CollTp      CollateralType1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 CollTp"`
}

// May be one of CASH, SECU, LCRE, OTHR
type CollateralType1Code string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

// May be one of CRDT, DBIT
type CreditDebitCode string

// Must match the pattern [A-Z]{3,3}
type CurrencyCode string

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Dt,omitempty"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 DtTm,omitempty"`
}

type Document struct {
	MrgnRpt MarginReportV02 `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 MrgnRpt"`
}

// May be one of DAIL, INDA, ONDE
type EventFrequency6Code string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// Must match the pattern [0-9]{5}
type Exact5NumericText string

// May be no more than 4 items long
type ExternalFinancialInstrumentIdentificationType1Code string

type GenericIdentification29 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 SchmeNm,omitempty"`
}

type GenericIdentification30 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 SchmeNm,omitempty"`
}

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource3Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Cd,omitempty"`
	Prtry Max35Text                                          `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Prtry,omitempty"`
}

type IdentificationType6Choice struct {
	Cd    TypeOfIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Cd,omitempty"`
	Prtry GenericIdentification30   `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Prtry,omitempty"`
}

type Margin3 struct {
	InitlMrgn Amount2            `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 InitlMrgn,omitempty"`
	VartnMrgn []VariationMargin3 `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 VartnMrgn,omitempty"`
	OthrMrgn  []Margin4          `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 OthrMrgn,omitempty"`
}

type Margin4 struct {
	Tp        MarginType1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Tp"`
	Amt       Amount2           `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Amt"`
	CdtDbtInd CreditDebitCode   `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 CdtDbtInd,omitempty"`
}

type MarginCalculation1 struct {
	TtlMrgnAmt    AmountAndDirection20    `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 TtlMrgnAmt"`
	CollOnDpst    []Collateral6           `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 CollOnDpst,omitempty"`
	MinRqrmntDpst ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 MinRqrmntDpst,omitempty"`
	MrgnRslt      MarginResult1Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 MrgnRslt,omitempty"`
}

type MarginCalculation2 struct {
	FinInstrmId   SecurityIdentification14 `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 FinInstrmId,omitempty"`
	XpsrAmt       Amount2                  `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 XpsrAmt,omitempty"`
	TtlMrgnAmt    AmountAndDirection20     `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 TtlMrgnAmt"`
	CollOnDpst    []Collateral6            `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 CollOnDpst,omitempty"`
	MinRqrmntDpst ActiveCurrencyAndAmount  `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 MinRqrmntDpst,omitempty"`
	MrgnRslt      MarginResult1Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 MrgnRslt,omitempty"`
	MrgnTpAmt     Margin3                  `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 MrgnTpAmt,omitempty"`
}

// May be one of EQUI, FIXI
type MarginProduct1Code string

type MarginProductType1Choice struct {
	Cd    MarginProduct1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Cd,omitempty"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Prtry,omitempty"`
}

type MarginReport2 struct {
	MrgnPdct          []MarginProductType1Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 MrgnPdct,omitempty"`
	MrgnAcct          SecuritiesAccount18               `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 MrgnAcct"`
	CollsdMrgnAcctInd bool                              `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 CollsdMrgnAcctInd,omitempty"`
	NonClrMmb         []PartyIdentificationAndAccount31 `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 NonClrMmb,omitempty"`
	MrgnClctnSummry   MarginCalculation1                `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 MrgnClctnSummry,omitempty"`
	MrgnClctn         []MarginCalculation2              `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 MrgnClctn"`
}

type MarginReportV02 struct {
	RptParams   ReportParameters3           `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 RptParams"`
	Pgntn       Pagination                  `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Pgntn"`
	ClrMmb      PartyIdentification35Choice `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 ClrMmb"`
	RptSummry   MarginCalculation1          `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 RptSummry,omitempty"`
	RptDtls     []MarginReport2             `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 RptDtls"`
	SplmtryData []SupplementaryData1        `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 SplmtryData,omitempty"`
}

type MarginResult1Choice struct {
	XcssAmt  ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 XcssAmt,omitempty"`
	DfcitAmt ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 DfcitAmt,omitempty"`
}

type MarginType1Choice struct {
	Cd    MarginType1Code         `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Cd,omitempty"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Prtry,omitempty"`
}

// May be one of SEMA, ADFM, SCMA, COMA, UFMA, CEMA, INDE, NEMA, INMA, VAMA, INCA
type MarginType1Code string

// May be no more than 140 items long
type Max140Text string

// May be no more than 16 items long
type Max16Text string

// May be no more than 350 items long
type Max350Text string

// May be no more than 35 items long
type Max35Text string

// Must match the pattern [0-9]{1,5}
type Max5NumericText string

// May be no more than 70 items long
type Max70Text string

type NameAndAddress6 struct {
	Nm  Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Nm"`
	Adr PostalAddress2 `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Adr"`
}

type OtherIdentification1 struct {
	Id  Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Sfx,omitempty"`
	Tp  IdentificationSource3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Tp"`
}

type Pagination struct {
	PgNb      Max5NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 PgNb"`
	LastPgInd bool            `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 LastPgInd"`
}

type PartyIdentification33Choice struct {
	AnyBIC   AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 AnyBIC,omitempty"`
	PrtryId  GenericIdentification29 `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 PrtryId,omitempty"`
	NmAndAdr NameAndAddress6         `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 NmAndAdr,omitempty"`
}

type PartyIdentification35Choice struct {
	BIC     AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 BIC,omitempty"`
	PrtryId GenericIdentification29 `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 PrtryId,omitempty"`
}

type PartyIdentificationAndAccount31 struct {
	Id       PartyIdentification33Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Id"`
	AltrnId  AlternatePartyIdentification4 `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 AltrnId,omitempty"`
	AddtlInf PartyTextInformation1         `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 AddtlInf,omitempty"`
	ClrAcct  SecuritiesAccount18           `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 ClrAcct,omitempty"`
}

type PartyTextInformation1 struct {
	DclrtnDtls  Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 DclrtnDtls,omitempty"`
	PtyCtctDtls Max140Text `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 PtyCtctDtls,omitempty"`
	RegnDtls    Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 RegnDtls,omitempty"`
}

type PostalAddress2 struct {
	StrtNm      Max70Text   `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 StrtNm,omitempty"`
	PstCdId     Max16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 PstCdId"`
	TwnNm       Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 TwnNm"`
	CtrySubDvsn Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 CtrySubDvsn,omitempty"`
	Ctry        CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Ctry"`
}

type ReportParameters3 struct {
	RptId        Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 RptId"`
	RptDtAndTm   DateAndDateTimeChoice `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 RptDtAndTm"`
	RptCcy       CurrencyCode          `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 RptCcy"`
	ClctnDtAndTm ISODateTime           `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 ClctnDtAndTm"`
	Frqcy        EventFrequency6Code   `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Frqcy"`
	RptNb        Exact5NumericText     `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 RptNb,omitempty"`
}

type SecuritiesAccount18 struct {
	Id Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Id"`
	Tp ClearingAccountType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Tp"`
	Nm Max70Text                `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Nm,omitempty"`
}

type SecurityIdentification14 struct {
	ISIN   ISINIdentifier         `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 ISIN,omitempty"`
	OthrId []OtherIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 OthrId,omitempty"`
	Desc   Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Desc,omitempty"`
}

// May be one of SHOR, LONG
type ShortLong1Code string

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type TotalVariationMargin1 struct {
	ShrtLngInd ShortLong1Code `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 ShrtLngInd,omitempty"`
	AmtDtls    Amount2        `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 AmtDtls"`
}

// May be one of ARNU, CCPT, CHTY, CORP, DRLC, FIIN, TXID
type TypeOfIdentification1Code string

type VariationMargin3 struct {
	FinInstrmId  SecurityIdentification14 `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 FinInstrmId,omitempty"`
	TtlVartnMrgn []TotalVariationMargin1  `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 TtlVartnMrgn"`
	TtlMrkToMkt  Amount2                  `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 TtlMrkToMkt"`
	MrkToMktNetd []Amount2                `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 MrkToMktNetd,omitempty"`
	MrkToMktGrss []Amount2                `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 MrkToMktGrss,omitempty"`
	MrkToMktFls  []Amount2                `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 MrkToMktFls,omitempty"`
	FlsHrcut     Amount2                  `xml:"urn:iso:std:iso:20022:tech:xsd:secl.005.001.02 FlsHrcut,omitempty"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
