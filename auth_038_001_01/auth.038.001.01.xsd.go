// Code generated by download. DO NOT EDIT.

package iso20022_auth_038_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type ContactDetails2 struct {
	NmPrfx   NamePrefix1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 NmPrfx,omitempty"`
	Nm       Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 Nm,omitempty"`
	PhneNb   PhoneNumber     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 PhneNb,omitempty"`
	MobNb    PhoneNumber     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 MobNb,omitempty"`
	FaxNb    PhoneNumber     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 FaxNb,omitempty"`
	EmailAdr Max2048Text     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 EmailAdr,omitempty"`
	Othr     Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 Othr,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type Document struct {
	InvcTaxRptStsAdvc InvoiceTaxReportStatusAdviceV01 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 InvcTaxRptStsAdvc"`
}

// May be no more than 4 items long
type ExternalValidationRuleIdentification1Code string

type GenericValidationRuleIdentification1 struct {
	Id      Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 Id"`
	Desc    Max350Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 Desc,omitempty"`
	SchmeNm ValidationRuleSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 SchmeNm,omitempty"`
	Issr    Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 Issr,omitempty"`
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type InvoiceTaxReportStatusAdviceV01 struct {
	StsRptHdr   InvoiceTaxStatusReportHeader1        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 StsRptHdr"`
	TxSts       []InvoiceTaxReportTransactionStatus1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 TxSts,omitempty"`
	SplmtryData []SupplementaryData1                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 SplmtryData,omitempty"`
}

type InvoiceTaxReportTransactionStatus1 struct {
	TaxRptId    Max35Text                              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 TaxRptId"`
	Sts         TaxReportingStatus2Code                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 Sts"`
	VldtnRule   []GenericValidationRuleIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 VldtnRule,omitempty"`
	SplmtryData []SupplementaryData1                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 SplmtryData,omitempty"`
}

type InvoiceTaxStatusReportHeader1 struct {
	TaxAuthrty TaxOrganisationIdentification1         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 TaxAuthrty,omitempty"`
	MsgId      MessageIdentification1                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 MsgId"`
	OrgnlMsgId MessageIdentification1                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 OrgnlMsgId"`
	RptSts     TaxReportingStatus1Code                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 RptSts"`
	VldtnRule  []GenericValidationRuleIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 VldtnRule,omitempty"`
}

// May be no more than 140 items long
type Max140Text string

// May be no more than 16 items long
type Max16Text string

// May be no more than 2048 items long
type Max2048Text string

// May be no more than 350 items long
type Max350Text string

// May be no more than 35 items long
type Max35Text string

// May be no more than 70 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 CreDtTm"`
}

// May be one of DOCT, MIST, MISS, MADM
type NamePrefix1Code string

// Must match the pattern \+[0-9]{1,3}-[0-9()+\-]{1,30}
type PhoneNumber string

type PostalAddress6 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 AdrTp,omitempty"`
	Dept        Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 Dept,omitempty"`
	SubDept     Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 SubDept,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 Ctry,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 AdrLine,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type TaxOrganisationIdentification1 struct {
	Nm       Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 Nm"`
	PstlAdr  PostalAddress6  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 PstlAdr,omitempty"`
	CtctDtls ContactDetails2 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 CtctDtls,omitempty"`
}

// May be one of ACPT, RCVD, RJCT, INCF, CRPT, WARN, ACTC, PART
type TaxReportingStatus1Code string

// May be one of ACPT, RJCT, WARN
type TaxReportingStatus2Code string

type ValidationRuleSchemeName1Choice struct {
	Cd    ExternalValidationRuleIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 Cd,omitempty"`
	Prtry Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.038.001.01 Prtry,omitempty"`
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}
