// Code generated by download. DO NOT EDIT.

package iso20022_camt_088_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

type ClearingSystemIdentification2Choice struct {
	Cd    ExternalClearingSystemIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 Cd,omitempty"`
	Prtry Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 Prtry,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type Document struct {
	NetRpt NetReportV01 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 NetRpt"`
}

// May be no more than 5 items long
type ExternalClearingSystemIdentification1Code string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type ISOTime time.Time

func (t *ISOTime) UnmarshalText(text []byte) error {
	return (*xsdTime)(t).UnmarshalText(text)
}
func (t ISOTime) MarshalText() ([]byte, error) {
	return xsdTime(t).MarshalText()
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

// May be no more than 105 items long
type Max105Text string

// Must match the pattern [0-9]{1,10}
type Max10NumericText string

// May be no more than 16 items long
type Max16Text string

// May be no more than 34 items long
type Max34Text string

// May be no more than 350 items long
type Max350Text string

// May be no more than 35 items long
type Max35Text string

// Must match the pattern [0-9]{1,5}
type Max5NumericText string

// May be no more than 70 items long
type Max70Text string

type NameAndAddress8 struct {
	Nm         Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 Nm"`
	Adr        PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 Adr,omitempty"`
	AltrntvIdr []Max35Text    `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 AltrntvIdr,omitempty"`
}

type NetObligation1 struct {
	OblgtnId          Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 OblgtnId"`
	Amt               ActiveCurrencyAndAmount      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 Amt"`
	PtcptNetgId       NettingIdentification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 PtcptNetgId"`
	OblgtnDrctn       PaymentReceipt1Code          `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 OblgtnDrctn"`
	CtrPtyNetgId      NettingIdentification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 CtrPtyNetgId"`
	NetSvcCtrPtyId    PartyIdentification73Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 NetSvcCtrPtyId,omitempty"`
	CtrPtySttlmInstrs SettlementParties29          `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 CtrPtySttlmInstrs,omitempty"`
	TxsNb             Max10NumericText             `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 TxsNb,omitempty"`
}

type NetReportData1 struct {
	MsgId        Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 MsgId"`
	CreDtTm      ISODateTime                 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 CreDtTm"`
	NetgCutOffTm ISOTime                     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 NetgCutOffTm"`
	RptDt        ISODate                     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 RptDt"`
	ValDt        ISODate                     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 ValDt"`
	RptTp        Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 RptTp,omitempty"`
	NetRptSvcr   PartyIdentification73Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 NetRptSvcr,omitempty"`
	NetSvcTp     Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 NetSvcTp,omitempty"`
	MsgPgntn     Pagination                  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 MsgPgntn,omitempty"`
}

type NetReportV01 struct {
	NetRptData     NetReportData1              `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 NetRptData"`
	NetSvcPtcptId  PartyIdentification73Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 NetSvcPtcptId"`
	NetSvcCtrPtyId PartyIdentification73Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 NetSvcCtrPtyId,omitempty"`
	NetOblgtn      []NetObligation1            `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 NetOblgtn"`
	SplmtryData    []SupplementaryData1        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 SplmtryData,omitempty"`
}

type NettingIdentification1Choice struct {
	TradPty   PartyIdentification73Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 TradPty,omitempty"`
	NetgGrpId Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 NetgGrpId,omitempty"`
}

type Pagination struct {
	PgNb      Max5NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 PgNb"`
	LastPgInd bool            `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 LastPgInd"`
}

type PartyIdentification44 struct {
	AnyBIC     AnyBICIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 AnyBIC"`
	AltrntvIdr []Max35Text      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 AltrntvIdr,omitempty"`
}

type PartyIdentification59 struct {
	PtyNm      Max34Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 PtyNm,omitempty"`
	AnyBIC     PartyIdentification44               `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 AnyBIC,omitempty"`
	AcctNb     Max34Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 AcctNb,omitempty"`
	Adr        Max105Text                          `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 Adr,omitempty"`
	ClrSysId   ClearingSystemIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 ClrSysId,omitempty"`
	LglNttyIdr LEIIdentifier                       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 LglNttyIdr,omitempty"`
}

type PartyIdentification73Choice struct {
	NmAndAdr NameAndAddress8       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 NmAndAdr,omitempty"`
	AnyBIC   PartyIdentification44 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 AnyBIC,omitempty"`
	PtyId    PartyIdentification59 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 PtyId,omitempty"`
}

// May be one of PAYM, RECE, NONE
type PaymentReceipt1Code string

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 Ctry"`
}

type SettlementParties29 struct {
	DlvryAgt    PartyIdentification73Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 DlvryAgt,omitempty"`
	Intrmy      PartyIdentification73Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 Intrmy,omitempty"`
	RcvgAgt     PartyIdentification73Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 RcvgAgt"`
	BnfcryInstn PartyIdentification73Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 BnfcryInstn,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.088.001.01 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdTime time.Time

func (t *xsdTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "15:04:05.999999999")
}
func (t xsdTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "15:04:05.999999999")
}
func (t xsdTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
