// Code generated by download. DO NOT EDIT.

package iso20022_camt_019_001_07

import (
	"bytes"
	"encoding/xml"
	"time"
)

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type BusinessDay8 struct {
	SysId       []SystemIdentification2Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 SysId"`
	BizDayOrErr BusinessDayReportOrError10Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 BizDayOrErr"`
}

type BusinessDay9 struct {
	SysDt        DateAndDateTime2Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 SysDt,omitempty"`
	SysSts       SystemStatus3                  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 SysSts,omitempty"`
	SysInfPerCcy []SystemAvailabilityAndEvents3 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 SysInfPerCcy,omitempty"`
}

type BusinessDayReportOrError10Choice struct {
	BizDayInf BusinessDay9     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 BizDayInf,omitempty"`
	BizErr    []ErrorHandling5 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 BizErr,omitempty"`
}

type BusinessDayReportOrError9Choice struct {
	BizRpt  []BusinessDay8   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 BizRpt,omitempty"`
	OprlErr []ErrorHandling5 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 OprlErr,omitempty"`
}

type ClosureReason2Choice struct {
	Cd    SystemClosureReason1Code `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 Cd,omitempty"`
	Prtry Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 Prtry,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DateAndDateTime2Choice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 Dt,omitempty"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 DtTm,omitempty"`
}

type DateTimePeriod1 struct {
	FrDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 FrDtTm"`
	ToDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 ToDtTm"`
}

type DateTimePeriod1Choice struct {
	FrDtTm ISODateTime     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 FrDtTm,omitempty"`
	ToDtTm ISODateTime     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 ToDtTm,omitempty"`
	DtTmRg DateTimePeriod1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 DtTmRg,omitempty"`
}

type Document struct {
	RtrBizDayInf ReturnBusinessDayInformationV07 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 RtrBizDayInf"`
}

type ErrorHandling3Choice struct {
	Cd    ExternalSystemErrorHandling1Code `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 Cd,omitempty"`
	Prtry Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 Prtry,omitempty"`
}

type ErrorHandling5 struct {
	Err  ErrorHandling3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 Err"`
	Desc Max140Text           `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 Desc,omitempty"`
}

// May be no more than 4 items long
type ExternalEnquiryRequestType1Code string

// May be no more than 3 items long
type ExternalMarketInfrastructure1Code string

// May be no more than 4 items long
type ExternalPaymentControlRequestType1Code string

// May be no more than 4 items long
type ExternalSystemErrorHandling1Code string

// May be no more than 4 items long
type ExternalSystemEventType1Code string

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 Issr,omitempty"`
}

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type ISOTime time.Time

func (t *ISOTime) UnmarshalText(text []byte) error {
	return (*xsdTime)(t).UnmarshalText(text)
}
func (t ISOTime) MarshalText() ([]byte, error) {
	return xsdTime(t).MarshalText()
}

type MarketInfrastructureIdentification1Choice struct {
	Cd    ExternalMarketInfrastructure1Code `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 Cd,omitempty"`
	Prtry Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 Prtry,omitempty"`
}

// May be no more than 140 items long
type Max140Text string

// May be no more than 350 items long
type Max350Text string

// May be no more than 35 items long
type Max35Text string

type MessageHeader7 struct {
	MsgId       Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 MsgId"`
	CreDtTm     ISODateTime            `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 CreDtTm,omitempty"`
	ReqTp       RequestType4Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 ReqTp,omitempty"`
	OrgnlBizQry OriginalBusinessQuery1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 OrgnlBizQry,omitempty"`
	QryNm       Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 QryNm,omitempty"`
}

type OriginalBusinessQuery1 struct {
	MsgId   Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 MsgId"`
	MsgNmId Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 MsgNmId,omitempty"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 CreDtTm,omitempty"`
}

type RequestType4Choice struct {
	PmtCtrl ExternalPaymentControlRequestType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 PmtCtrl,omitempty"`
	Enqry   ExternalEnquiryRequestType1Code        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 Enqry,omitempty"`
	Prtry   GenericIdentification1                 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 Prtry,omitempty"`
}

type ReturnBusinessDayInformationV07 struct {
	MsgHdr      MessageHeader7                  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 MsgHdr"`
	RptOrErr    BusinessDayReportOrError9Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 RptOrErr"`
	SplmtryData []SupplementaryData1            `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 SplmtryData,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type SystemAvailabilityAndEvents3 struct {
	SysCcy  ActiveCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 SysCcy,omitempty"`
	SsnPrd  TimePeriod1        `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 SsnPrd,omitempty"`
	Evt     []SystemEvent3     `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 Evt,omitempty"`
	ClsrInf []SystemClosure2   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 ClsrInf,omitempty"`
}

type SystemClosure2 struct {
	Prd DateTimePeriod1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 Prd,omitempty"`
	Rsn ClosureReason2Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 Rsn"`
}

// May be one of BHOL, SMTN, NOOP, RCVR, ADTW
type SystemClosureReason1Code string

type SystemEvent3 struct {
	Tp       SystemEventType4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 Tp"`
	SchdldTm ISODateTime            `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 SchdldTm"`
	FctvTm   ISODateTime            `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 FctvTm,omitempty"`
	StartTm  ISODateTime            `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 StartTm,omitempty"`
	EndTm    ISODateTime            `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 EndTm,omitempty"`
}

type SystemEventType4Choice struct {
	Cd    ExternalSystemEventType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 Cd,omitempty"`
	Prtry GenericIdentification1       `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 Prtry,omitempty"`
}

type SystemIdentification2Choice struct {
	MktInfrstrctrId MarketInfrastructureIdentification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 MktInfrstrctrId,omitempty"`
	Ctry            CountryCode                               `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 Ctry,omitempty"`
}

type SystemStatus2Choice struct {
	Cd    SystemStatus2Code      `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 Cd,omitempty"`
	Prtry GenericIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 Prtry,omitempty"`
}

// May be one of SUSP, ACTV, CLSD, CLSG
type SystemStatus2Code string

type SystemStatus3 struct {
	Sts     SystemStatus2Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 Sts"`
	VldtyTm DateTimePeriod1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 VldtyTm,omitempty"`
}

type TimePeriod1 struct {
	FrTm ISOTime `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 FrTm"`
	ToTm ISOTime `xml:"urn:iso:std:iso:20022:tech:xsd:camt.019.001.07 ToTm"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdTime time.Time

func (t *xsdTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "15:04:05.999999999")
}
func (t xsdTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "15:04:05.999999999")
}
func (t xsdTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
