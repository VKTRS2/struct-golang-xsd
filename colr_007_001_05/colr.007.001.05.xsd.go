// Code generated by download. DO NOT EDIT.

package iso20022_colr_007_001_05

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AccountIdentification4Choice struct {
	IBAN IBAN2007Identifier            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 IBAN,omitempty"`
	Othr GenericAccountIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Othr,omitempty"`
}

type AccountSchemeName1Choice struct {
	Cd    ExternalAccountIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Cd,omitempty"`
	Prtry Max35Text                          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Prtry,omitempty"`
}

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type ActiveOrHistoricCurrencyAnd13DecimalAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type Agreement4 struct {
	AgrmtDtls  Max140Text                `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 AgrmtDtls"`
	AgrmtId    Max140Text                `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 AgrmtId,omitempty"`
	AgrmtDt    ISODate                   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 AgrmtDt"`
	BaseCcy    ActiveCurrencyCode        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 BaseCcy"`
	AgrmtFrmwk AgreementFramework1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 AgrmtFrmwk,omitempty"`
}

type AgreementFramework1Choice struct {
	AgrmtFrmwk AgreementFramework1Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 AgrmtFrmwk,omitempty"`
	PrtryId    GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 PrtryId,omitempty"`
}

// May be one of FBAA, BBAA, DERV, ISDA, NONR
type AgreementFramework1Code string

type AlternatePartyIdentification8 struct {
	IdTp    IdentificationType43Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 IdTp"`
	Ctry    CountryCode                `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Ctry"`
	AltrnId Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 AltrnId"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

type CashCollateral2 struct {
	CollId    Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 CollId,omitempty"`
	CshAcctId AccountIdentification4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 CshAcctId,omitempty"`
	RtrXcss   bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 RtrXcss,omitempty"`
	DpstAmt   ActiveCurrencyAndAmount      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 DpstAmt,omitempty"`
	DpstTp    DepositType1Code             `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 DpstTp,omitempty"`
	MtrtyDt   ISODate                      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 MtrtyDt,omitempty"`
	ValDt     ISODate                      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 ValDt,omitempty"`
	XchgRate  float64                      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 XchgRate,omitempty"`
	CollVal   ActiveCurrencyAndAmount      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 CollVal"`
	Hrcut     float64                      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Hrcut,omitempty"`
}

type CashCollateral3 struct {
	CollId    Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 CollId,omitempty"`
	CshAcctId AccountIdentification4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 CshAcctId,omitempty"`
	DpstAmt   ActiveCurrencyAndAmount      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 DpstAmt,omitempty"`
	DpstTp    DepositType1Code             `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 DpstTp,omitempty"`
	MtrtyDt   ISODate                      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 MtrtyDt,omitempty"`
	ValDt     ISODate                      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 ValDt,omitempty"`
	XchgRate  float64                      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 XchgRate,omitempty"`
	CollVal   ActiveCurrencyAndAmount      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 CollVal"`
	Hrcut     float64                      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Hrcut,omitempty"`
}

type Collateral16 struct {
	MrgnCallReqId   Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 MrgnCallReqId"`
	MrgnCallRspnId  Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 MrgnCallRspnId,omitempty"`
	StdSttlmInstrs  Max140Text              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 StdSttlmInstrs,omitempty"`
	CollPrpslRspnId Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 CollPrpslRspnId,omitempty"`
	SctiesColl      []SecuritiesCollateral8 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 SctiesColl,omitempty"`
	CshColl         []CashCollateral3       `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 CshColl,omitempty"`
	OthrColl        []OtherCollateral5      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 OthrColl,omitempty"`
}

type Collateral17 struct {
	MrgnCallReqId   Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 MrgnCallReqId"`
	MrgnCallRspnId  Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 MrgnCallRspnId,omitempty"`
	StdSttlmInstrs  Max140Text              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 StdSttlmInstrs,omitempty"`
	CollPrpslRspnId Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 CollPrpslRspnId,omitempty"`
	SctiesColl      []SecuritiesCollateral8 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 SctiesColl,omitempty"`
	CshColl         []CashCollateral2       `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 CshColl,omitempty"`
	OthrColl        []OtherCollateral5      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 OthrColl,omitempty"`
}

type CollateralAccount3 struct {
	Id Max35Text                                  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Id"`
	Tp CollateralAccountIdentificationType3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Tp,omitempty"`
	Nm Max70Text                                  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Nm,omitempty"`
}

type CollateralAccountIdentificationType3Choice struct {
	Tp    CollateralAccountType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Tp,omitempty"`
	Prtry GenericIdentification36    `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Prtry,omitempty"`
}

// May be one of HOUS, CLIE, LIPR, MGIN, DFLT
type CollateralAccountType1Code string

type CollateralMovement10 struct {
	AgrdAmt    ActiveCurrencyAndAmount     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 AgrdAmt"`
	MvmntDrctn []CollateralMovement5Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 MvmntDrctn,omitempty"`
}

type CollateralMovement11 struct {
	Dlvr Collateral16 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Dlvr"`
	Rtr  Collateral17 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Rtr,omitempty"`
}

type CollateralMovement5Choice struct {
	CollMvmntDrctn CollateralMovement11 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 CollMvmntDrctn,omitempty"`
	Rtr            Collateral17         `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Rtr,omitempty"`
}

type CollateralOwnership2 struct {
	Prtry  bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Prtry"`
	ClntNm PartyIdentification100Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 ClntNm,omitempty"`
}

type CollateralProposal5Choice struct {
	CollPrpslDtls   CollateralProposal6  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 CollPrpslDtls,omitempty"`
	SgrtdIndpdntAmt CollateralMovement10 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 SgrtdIndpdntAmt,omitempty"`
}

type CollateralProposal6 struct {
	VartnMrgn       CollateralMovement10 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 VartnMrgn"`
	SgrtdIndpdntAmt CollateralMovement10 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 SgrtdIndpdntAmt,omitempty"`
}

type CollateralProposalV05 struct {
	TxId        Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 TxId"`
	Oblgtn      Obligation5          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Oblgtn"`
	Agrmt       Agreement4           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Agrmt,omitempty"`
	TpAndDtls   Proposal5            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 TpAndDtls"`
	SplmtryData []SupplementaryData1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 SplmtryData,omitempty"`
}

type ContactIdentification2 struct {
	NmPrfx   NamePrefix1Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 NmPrfx,omitempty"`
	GvnNm    Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 GvnNm,omitempty"`
	Nm       Max35Text       `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Nm"`
	PhneNb   PhoneNumber     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 PhneNb,omitempty"`
	MobNb    PhoneNumber     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 MobNb,omitempty"`
	FaxNb    PhoneNumber     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 FaxNb,omitempty"`
	EmailAdr Max256Text      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 EmailAdr,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Dt,omitempty"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 DtTm,omitempty"`
}

type DateCode9Choice struct {
	Cd    DateType2Code           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Cd,omitempty"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Prtry,omitempty"`
}

type DateFormat14Choice struct {
	Dt   ISODate         `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Dt,omitempty"`
	DtCd DateCode9Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 DtCd,omitempty"`
}

// May be one of OPEN
type DateType2Code string

type DeliveringPartiesAndAccount15 struct {
	Dpstry PartyIdentification102Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Dpstry"`
	Pty1   PartyIdentificationAndAccount126 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Pty1"`
	Pty2   PartyIdentificationAndAccount127 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Pty2,omitempty"`
}

// May be one of FITE, CALL
type DepositType1Code string

type Document struct {
	CollPrpsl CollateralProposalV05 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 CollPrpsl"`
}

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// May be one of BFWD, PAYM, CCPC, COMM, CRDS, CRTL, CRSP, CCIR, CRPR, EQUI, EQPT, EQUS, EXTD, EXPT, FIXI, FORX, FORW, FUTR, OPTN, LIQU, OTCD, REPO, RVPO, SLOA, SBSC, SCRP, SLEB, SHSL, SCIR, SCIE, SWPT, TBAS, TRBD, TRCP
type ExposureType5Code string

// May be no more than 4 items long
type ExternalAccountIdentification1Code string

// May be no more than 4 items long
type ExternalFinancialInstrumentIdentificationType1Code string

type FinancialInstrumentQuantity1Choice struct {
	Unit     float64 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Unit,omitempty"`
	FaceAmt  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 FaceAmt,omitempty"`
	AmtsdVal float64 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 AmtsdVal,omitempty"`
}

type GenericAccountIdentification1 struct {
	Id      Max34Text                `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Id"`
	SchmeNm AccountSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 SchmeNm,omitempty"`
	Issr    Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Issr,omitempty"`
}

type GenericIdentification30 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 SchmeNm,omitempty"`
}

type GenericIdentification36 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 SchmeNm,omitempty"`
}

type GenericIdentification78 struct {
	Tp GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Tp"`
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Id,omitempty"`
}

// Must match the pattern [A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}
type IBAN2007Identifier string

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource3Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Cd,omitempty"`
	Prtry Max35Text                                          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Prtry,omitempty"`
}

type IdentificationType43Choice struct {
	Cd    TypeOfIdentification2Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Cd,omitempty"`
	Prtry GenericIdentification36   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Prtry,omitempty"`
}

// May be no more than 140 items long
type Max140Text string

// May be no more than 16 items long
type Max16Text string

// May be no more than 256 items long
type Max256Text string

// May be no more than 34 items long
type Max34Text string

// May be no more than 350 items long
type Max350Text string

// May be no more than 35 items long
type Max35Text string

// May be no more than 70 items long
type Max70Text string

type NameAndAddress13 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Nm"`
	Adr PostalAddress8 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Adr,omitempty"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Adr,omitempty"`
}

type NameAndAddress6 struct {
	Nm  Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Nm"`
	Adr PostalAddress2 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Adr"`
}

// May be one of DOCT, MIST, MISS, MADM
type NamePrefix1Code string

type Obligation5 struct {
	PtyA       PartyIdentification100Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 PtyA"`
	SvcgPtyA   PartyIdentification100Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 SvcgPtyA,omitempty"`
	PtyB       PartyIdentification100Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 PtyB"`
	SvcgPtyB   PartyIdentification100Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 SvcgPtyB,omitempty"`
	CollAcctId CollateralAccount3           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 CollAcctId,omitempty"`
	XpsrTp     ExposureType5Code            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 XpsrTp,omitempty"`
	ValtnDt    DateAndDateTimeChoice        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 ValtnDt"`
}

type OtherCollateral5 struct {
	CollId       Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 CollId,omitempty"`
	LttrOfCdtId  Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 LttrOfCdtId,omitempty"`
	LttrOfCdtAmt ActiveCurrencyAndAmount        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 LttrOfCdtAmt,omitempty"`
	GrntAmt      ActiveCurrencyAndAmount        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 GrntAmt,omitempty"`
	OthrTpOfColl OtherTypeOfCollateral2         `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 OthrTpOfColl,omitempty"`
	IsseDt       DateFormat14Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 IsseDt,omitempty"`
	XpryDt       DateFormat14Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 XpryDt,omitempty"`
	LtdCvrgInd   bool                           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 LtdCvrgInd,omitempty"`
	Issr         PartyIdentification100Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Issr,omitempty"`
	ValDt        ISODate                        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 ValDt,omitempty"`
	XchgRate     float64                        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 XchgRate,omitempty"`
	MktVal       ActiveCurrencyAndAmount        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 MktVal,omitempty"`
	Hrcut        float64                        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Hrcut,omitempty"`
	CollVal      ActiveCurrencyAndAmount        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 CollVal"`
	SfkpgPlc     SafekeepingPlaceFormat10Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 SfkpgPlc,omitempty"`
	SfkpgAcct    SecuritiesAccount19            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 SfkpgAcct,omitempty"`
}

type OtherIdentification1 struct {
	Id  Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Sfx,omitempty"`
	Tp  IdentificationSource3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Tp"`
}

type OtherTypeOfCollateral2 struct {
	Desc Max140Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Desc"`
	Qty  FinancialInstrumentQuantity1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Qty,omitempty"`
}

type PartyIdentification100Choice struct {
	AnyBIC   AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 AnyBIC,omitempty"`
	PrtryId  GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 PrtryId,omitempty"`
	NmAndAdr NameAndAddress6         `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 NmAndAdr,omitempty"`
}

type PartyIdentification101Choice struct {
	BIC      AnyBICIdentifier        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 BIC,omitempty"`
	PrtryId  GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 PrtryId,omitempty"`
	NmAndAdr NameAndAddress13        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 NmAndAdr,omitempty"`
}

type PartyIdentification102Choice struct {
	AnyBIC   AnyBICIdentifier `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 AnyBIC,omitempty"`
	NmAndAdr NameAndAddress5  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 NmAndAdr,omitempty"`
	Ctry     CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Ctry,omitempty"`
}

type PartyIdentificationAndAccount126 struct {
	PtyId    PartyIdentification100Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 PtyId"`
	AcctId   Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 AcctId,omitempty"`
	PrcgId   Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 PrcgId,omitempty"`
	PrcgDt   DateAndDateTimeChoice        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 PrcgDt,omitempty"`
	SubAcct  SubAccount5                  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 SubAcct,omitempty"`
	CtctPrsn ContactIdentification2       `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 CtctPrsn,omitempty"`
}

type PartyIdentificationAndAccount127 struct {
	Id        PartyIdentification101Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Id"`
	AltrnId   AlternatePartyIdentification8 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 AltrnId,omitempty"`
	SfkpgAcct Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 SfkpgAcct,omitempty"`
	PrcgId    Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 PrcgId,omitempty"`
	AddtlInf  PartyTextInformation1         `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 AddtlInf,omitempty"`
}

type PartyTextInformation1 struct {
	DclrtnDtls  Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 DclrtnDtls,omitempty"`
	PtyCtctDtls Max140Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 PtyCtctDtls,omitempty"`
	RegnDtls    Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 RegnDtls,omitempty"`
}

// Must match the pattern \+[0-9]{1,3}-[0-9()+\-]{1,30}
type PhoneNumber string

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Ctry"`
}

type PostalAddress2 struct {
	StrtNm      Max70Text   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 StrtNm,omitempty"`
	PstCdId     Max16Text   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 PstCdId"`
	TwnNm       Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 TwnNm"`
	CtrySubDvsn Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 CtrySubDvsn,omitempty"`
	Ctry        CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Ctry"`
}

type PostalAddress8 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Ctry"`
}

type Price2 struct {
	Tp  YieldedOrValueType1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Tp"`
	Val PriceRateOrAmountChoice   `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Val"`
}

type PriceRateOrAmountChoice struct {
	Rate float64                                    `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Rate,omitempty"`
	Amt  ActiveOrHistoricCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Amt,omitempty"`
}

// May be one of DISC, PREM, PARV
type PriceValueType1Code string

type Proposal5 struct {
	CollPrpslTp ProposalType1Code         `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 CollPrpslTp"`
	CollPrpsl   CollateralProposal5Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 CollPrpsl"`
}

// May be one of INIT, COUN
type ProposalType1Code string

type ReceivingPartiesAndAccount15 struct {
	Dpstry PartyIdentification102Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Dpstry"`
	Pty1   PartyIdentificationAndAccount126 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Pty1"`
	Pty2   PartyIdentificationAndAccount127 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Pty2,omitempty"`
}

// May be one of CUST, ICSD, NCSD, SHHE
type SafekeepingPlace1Code string

// May be one of SHHE
type SafekeepingPlace3Code string

type SafekeepingPlaceFormat10Choice struct {
	Id      SafekeepingPlaceTypeAndText8             `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Id,omitempty"`
	Ctry    CountryCode                              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Ctry,omitempty"`
	TpAndId SafekeepingPlaceTypeAndAnyBICIdentifier1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 TpAndId,omitempty"`
	Prtry   GenericIdentification78                  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Prtry,omitempty"`
}

type SafekeepingPlaceTypeAndAnyBICIdentifier1 struct {
	SfkpgPlcTp SafekeepingPlace1Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 SfkpgPlcTp"`
	Id         AnyBICIdentifier      `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Id"`
}

type SafekeepingPlaceTypeAndText8 struct {
	SfkpgPlcTp SafekeepingPlace3Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 SfkpgPlcTp"`
	Id         Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Id,omitempty"`
}

type SecuritiesAccount19 struct {
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Id"`
	Tp GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Tp,omitempty"`
	Nm Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Nm,omitempty"`
}

type SecuritiesCollateral8 struct {
	CollId      Max35Text                          `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 CollId,omitempty"`
	SctyId      SecurityIdentification19           `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 SctyId"`
	MtrtyDt     DateAndDateTimeChoice              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 MtrtyDt,omitempty"`
	LtdCvrgInd  bool                               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 LtdCvrgInd,omitempty"`
	Qty         FinancialInstrumentQuantity1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Qty"`
	Pric        Price2                             `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Pric,omitempty"`
	MktVal      ActiveCurrencyAndAmount            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 MktVal,omitempty"`
	Hrcut       float64                            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Hrcut,omitempty"`
	CollVal     ActiveCurrencyAndAmount            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 CollVal,omitempty"`
	ValDt       ISODate                            `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 ValDt,omitempty"`
	SfkpgAcct   SecuritiesAccount19                `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 SfkpgAcct,omitempty"`
	SfkpgPlc    SafekeepingPlaceFormat10Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 SfkpgPlc"`
	SttlmParams SettlementDetails118               `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 SttlmParams,omitempty"`
}

type SecurityIdentification19 struct {
	ISIN   ISINOct2015Identifier  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 ISIN,omitempty"`
	OthrId []OtherIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 OthrId,omitempty"`
	Desc   Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Desc,omitempty"`
}

type SettlementDetails118 struct {
	TradDt     ISODateTime              `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 TradDt"`
	SttlmPties SettlementParties7Choice `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 SttlmPties,omitempty"`
	CollOwnrsh CollateralOwnership2     `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 CollOwnrsh"`
}

type SettlementParties7Choice struct {
	DlvrgSttlmPties DeliveringPartiesAndAccount15 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 DlvrgSttlmPties,omitempty"`
	RcvgSttlmPties  ReceivingPartiesAndAccount15  `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 RcvgSttlmPties,omitempty"`
}

type SubAccount5 struct {
	Id    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Id"`
	Nm    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Nm,omitempty"`
	Chrtc Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Chrtc,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

// May be one of ARNU, CHTY, CORP, FIIN, TXID
type TypeOfIdentification2Code string

type YieldedOrValueType1Choice struct {
	Yldd  bool                `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 Yldd,omitempty"`
	ValTp PriceValueType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:colr.007.001.05 ValTp,omitempty"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
