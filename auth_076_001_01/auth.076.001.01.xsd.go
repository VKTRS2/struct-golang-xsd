// Code generated by download. DO NOT EDIT.

package iso20022_auth_076_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type AnyBICDec2014Identifier string

type CommunicationAddress7 struct {
	Email  Max2048Text `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 Email,omitempty"`
	PhneNb PhoneNumber `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 PhneNb,omitempty"`
	MobNb  PhoneNumber `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 MobNb,omitempty"`
	FaxNb  PhoneNumber `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 FaxNb,omitempty"`
	TlxAdr Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 TlxAdr,omitempty"`
	URLAdr Max2048Text `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 URLAdr,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type Document struct {
	FinSprvsdPtyIdntyRpt FinancialSupervisedPartyIdentityReportV01 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 FinSprvsdPtyIdntyRpt"`
}

// May be no more than 4 items long
type ExternalAuthorityIdentification1Code string

type FinancialSupervisedPartyIdentityReportV01 struct {
	PtyData     []PartyReport1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 PtyData"`
	SplmtryData []SupplementaryData1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 SplmtryData,omitempty"`
}

type GenericIdentification36 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 SchmeNm,omitempty"`
}

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

// May be no more than 10 items long
type Max10Text string

// May be no more than 16 items long
type Max16Text string

// May be no more than 20000 items long
type Max20000Text string

// May be no more than 2048 items long
type Max2048Text string

// May be no more than 350 items long
type Max350Text string

// May be no more than 35 items long
type Max35Text string

// May be no more than 70 items long
type Max70Text string

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 Adr,omitempty"`
}

type PartyCancellation1 struct {
	TechRcrdId  Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 TechRcrdId,omitempty"`
	Id          PartyIdentification136 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 Id"`
	SplmtryData []SupplementaryData1   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 SplmtryData,omitempty"`
}

type PartyDetail1 struct {
	FullNm        Max350Text                                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 FullNm,omitempty"`
	Ctry          CountryCode                               `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 Ctry,omitempty"`
	PtyTp         Max10Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 PtyTp"`
	SprvsgAuthrty SupervisingAuthorityIdentification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 SprvsgAuthrty"`
	PstlAdr       PostalAddress6                            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 PstlAdr,omitempty"`
	Ctct          CommunicationAddress7                     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 Ctct,omitempty"`
	Cmnt          Max20000Text                              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 Cmnt,omitempty"`
}

type PartyIdentification120Choice struct {
	AnyBIC   AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 AnyBIC,omitempty"`
	PrtryId  GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 PrtryId,omitempty"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 NmAndAdr,omitempty"`
}

type PartyIdentification136 struct {
	Id  PartyIdentification120Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 Id"`
	LEI LEIIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 LEI,omitempty"`
}

type PartyReport1Choice struct {
	Upd PartyUpdate1       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 Upd,omitempty"`
	Cxl PartyCancellation1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 Cxl,omitempty"`
}

type PartyUpdate1 struct {
	TechRcrdId   Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 TechRcrdId,omitempty"`
	Id           PartyIdentification136 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 Id"`
	PrvsId       PartyIdentification136 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 PrvsId,omitempty"`
	Othr         PartyDetail1           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 Othr"`
	Sts          []StatusDetail1        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 Sts"`
	TechVldtyPrd Period4Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 TechVldtyPrd,omitempty"`
	SplmtryData  []SupplementaryData1   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 SplmtryData,omitempty"`
}

type Period2 struct {
	FrDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 FrDt"`
	ToDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 ToDt"`
}

type Period4Choice struct {
	Dt       ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 Dt,omitempty"`
	FrDt     ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 FrDt,omitempty"`
	ToDt     ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 ToDt,omitempty"`
	FrDtToDt Period2 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 FrDtToDt,omitempty"`
}

// Must match the pattern \+[0-9]{1,3}-[0-9()+\-]{1,30}
type PhoneNumber string

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 Ctry"`
}

type PostalAddress6 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 AdrTp,omitempty"`
	Dept        Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 Dept,omitempty"`
	SubDept     Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 SubDept,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 Ctry,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 AdrLine,omitempty"`
}

type StatusDetail1 struct {
	Ctry          CountryCode                         `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 Ctry,omitempty"`
	CmptntAuthrty SupervisingAuthorityIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 CmptntAuthrty"`
	Sts           Max10Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 Sts,omitempty"`
	StsRsn        Max10Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 StsRsn"`
	ActvtyPrd     Period4Choice                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 ActvtyPrd,omitempty"`
	Cmnt          Max20000Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 Cmnt,omitempty"`
}

type SupervisingAuthorityIdentification1 struct {
	Id  SupervisingAuthorityIdentification1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 Id,omitempty"`
	LEI LEIIdentifier                             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 LEI,omitempty"`
}

type SupervisingAuthorityIdentification1Choice struct {
	PrtryId ExternalAuthorityIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 PrtryId,omitempty"`
	FullNm  Max350Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 FullNm,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.076.001.01 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}
