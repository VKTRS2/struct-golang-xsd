// Code generated by download. DO NOT EDIT.

package iso20022_auth_072_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type ContactDetails4 struct {
	Nm       Max140Text  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 Nm"`
	PhneNb   PhoneNumber `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 PhneNb"`
	EmailAdr Max2048Text `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 EmailAdr"`
	Fctn     Max140Text  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 Fctn"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type Document struct {
	SttlmIntlrRpt SettlementInternaliserReportV01 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 SttlmIntlrRpt"`
}

// Must match the pattern [A-Z]{2}
type Exact2UpperCaseAlphaText string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type InternalisationData1 struct {
	Aggt      InternalisationData2     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 Aggt"`
	FaildRate InternalisationDataRate1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 FaildRate"`
}

type InternalisationData2 struct {
	Sttld InternalisationDataVolume1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 Sttld"`
	Faild InternalisationDataVolume1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 Faild"`
	Ttl   InternalisationDataVolume1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 Ttl"`
}

type InternalisationDataRate1 struct {
	VolPctg float64 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 VolPctg"`
	Val     float64 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 Val"`
}

type InternalisationDataVolume1 struct {
	Vol float64 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 Vol"`
	Val float64 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 Val"`
}

type IssuerCSDIdentification1 struct {
	LEI                  LEIIdentifier            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 LEI,omitempty"`
	FrstTwoCharsInstrmId Exact2UpperCaseAlphaText `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 FrstTwoCharsInstrmId"`
	Ctry                 CountryCode              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 Ctry,omitempty"`
}

type IssuerCSDReport1 struct {
	Id        IssuerCSDIdentification1                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 Id"`
	OvrllTtl  InternalisationData1                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 OvrllTtl"`
	FinInstrm SettlementInternaliserFinancialInstrument1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 FinInstrm"`
	TxTp      SettlementInternaliserTransactionType1     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 TxTp"`
	ClntTp    SettlementInternaliserClientType1          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 ClntTp"`
	TtlCshTrf InternalisationData1                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 TtlCshTrf"`
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

// May be no more than 140 items long
type Max140Text string

// May be no more than 2048 items long
type Max2048Text string

// May be no more than 350 items long
type Max350Text string

// Must match the pattern \+[0-9]{1,3}-[0-9()+\-]{1,30}
type PhoneNumber string

type SettlementInternaliser1 struct {
	Id        SettlementInternaliserIdentification1      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 Id"`
	OvrllTtl  InternalisationData1                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 OvrllTtl"`
	FinInstrm SettlementInternaliserFinancialInstrument1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 FinInstrm"`
	TxTp      SettlementInternaliserTransactionType1     `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 TxTp"`
	ClntTp    SettlementInternaliserClientType1          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 ClntTp"`
	TtlCshTrf InternalisationData1                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 TtlCshTrf"`
}

type SettlementInternaliserClientType1 struct {
	Prfssnl InternalisationData1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 Prfssnl"`
	Rtl     InternalisationData1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 Rtl"`
}

type SettlementInternaliserFinancialInstrument1 struct {
	Eqty                 InternalisationData1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 Eqty"`
	SvrgnDebt            InternalisationData1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 SvrgnDebt"`
	Bd                   InternalisationData1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 Bd"`
	OthrTrfblScties      InternalisationData1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 OthrTrfblScties"`
	XchgTradgFnds        InternalisationData1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 XchgTradgFnds"`
	CllctvInvstmtUdrtkgs InternalisationData1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 CllctvInvstmtUdrtkgs"`
	MnyMktInstrm         InternalisationData1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 MnyMktInstrm"`
	EmssnAllwnc          InternalisationData1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 EmssnAllwnc"`
	OthrFinInstrms       InternalisationData1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 OthrFinInstrms"`
}

type SettlementInternaliserIdentification1 struct {
	LEI         LEIIdentifier            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 LEI"`
	RspnsblPrsn ContactDetails4          `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 RspnsblPrsn"`
	Ctry        CountryCode              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 Ctry"`
	BrnchId     Exact2UpperCaseAlphaText `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 BrnchId,omitempty"`
}

type SettlementInternaliserReportHeader1 struct {
	CreDtTm ISODateTime                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 CreDtTm"`
	RptgDt  ISODate                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 RptgDt"`
	Ccy     ActiveCurrencyCode            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 Ccy"`
	RptSts  TransactionOperationType4Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 RptSts"`
}

type SettlementInternaliserReportV01 struct {
	RptHdr      SettlementInternaliserReportHeader1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 RptHdr"`
	SttlmIntlr  SettlementInternaliser1             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 SttlmIntlr"`
	IssrCSD     []IssuerCSDReport1                  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 IssrCSD"`
	SplmtryData []SupplementaryData1                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 SplmtryData,omitempty"`
}

type SettlementInternaliserTransactionType1 struct {
	SctiesBuyOrSell   InternalisationData1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 SctiesBuyOrSell"`
	CollMgmtOpr       InternalisationData1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 CollMgmtOpr"`
	SctiesLndgOrBrrwg InternalisationData1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 SctiesLndgOrBrrwg"`
	RpAgrmt           InternalisationData1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 RpAgrmt"`
	OthrTxs           InternalisationData1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 OthrTxs"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.072.001.01 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

// May be one of NEWT, AMND, CANC
type TransactionOperationType4Code string

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
