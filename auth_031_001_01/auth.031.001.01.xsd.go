// Code generated by gen. DO NOT EDIT.

package iso20022_auth_031_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

type Document struct {
	FinInstrmRptgStsAdvc FinancialInstrumentReportingStatusAdviceV01 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.031.001.01 FinInstrmRptgStsAdvc"`
}

// May be no more than 4 items long
type ExternalValidationRuleIdentification1Code string

type FinancialInstrumentReportingStatusAdviceV01 struct {
	StsAdvc     []MessageReportHeader4 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.031.001.01 StsAdvc"`
	SplmtryData []SupplementaryData1   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.031.001.01 SplmtryData,omitempty"`
}

type GenericValidationRuleIdentification1 struct {
	Id      Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.031.001.01 Id"`
	Desc    Max350Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:auth.031.001.01 Desc,omitempty"`
	SchmeNm ValidationRuleSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:auth.031.001.01 SchmeNm,omitempty"`
	Issr    Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:auth.031.001.01 Issr,omitempty"`
}

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

// May be no more than 140 items long
type Max140Text string

// Must match the pattern [0-9]{1,15}
type Max15NumericText string

// May be no more than 350 items long
type Max350Text string

// May be no more than 35 items long
type Max35Text string

type MessageReportHeader4 struct {
	MsgRptIdr   Max140Text            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.031.001.01 MsgRptIdr,omitempty"`
	MsgSts      StatusAdviceReport3   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.031.001.01 MsgSts,omitempty"`
	RcrdSts     []StatusReportRecord3 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.031.001.01 RcrdSts,omitempty"`
	SplmtryData []SupplementaryData1  `xml:"urn:iso:std:iso:20022:tech:xsd:auth.031.001.01 SplmtryData,omitempty"`
}

type NumberOfRecordsPerStatus1 struct {
	DtldNbOfRcrds Max15NumericText           `xml:"urn:iso:std:iso:20022:tech:xsd:auth.031.001.01 DtldNbOfRcrds"`
	DtldSts       ReportingRecordStatus1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.031.001.01 DtldSts"`
}

type OriginalReportStatistics3 struct {
	TtlNbOfRcrds    Max15NumericText            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.031.001.01 TtlNbOfRcrds"`
	NbOfRcrdsPerSts []NumberOfRecordsPerStatus1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.031.001.01 NbOfRcrdsPerSts"`
}

// May be one of ACPT, ACTC, PART, RCVD, RJCT, RMDR, WARN, INCF, CRPT
type ReportingMessageStatus1Code string

// May be one of ACPT, ACPD, PDNG, RCVD, RJCT, RJPD, WARN
type ReportingRecordStatus1Code string

type StatusAdviceReport3 struct {
	Sts       ReportingMessageStatus1Code            `xml:"urn:iso:std:iso:20022:tech:xsd:auth.031.001.01 Sts"`
	VldtnRule []GenericValidationRuleIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.031.001.01 VldtnRule,omitempty"`
	MsgDt     ISODate                                `xml:"urn:iso:std:iso:20022:tech:xsd:auth.031.001.01 MsgDt,omitempty"`
	Sttstcs   OriginalReportStatistics3              `xml:"urn:iso:std:iso:20022:tech:xsd:auth.031.001.01 Sttstcs,omitempty"`
}

type StatusReportRecord3 struct {
	OrgnlRcrdId Max140Text                             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.031.001.01 OrgnlRcrdId"`
	Sts         ReportingRecordStatus1Code             `xml:"urn:iso:std:iso:20022:tech:xsd:auth.031.001.01 Sts"`
	VldtnRule   []GenericValidationRuleIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.031.001.01 VldtnRule,omitempty"`
	SplmtryData []SupplementaryData1                   `xml:"urn:iso:std:iso:20022:tech:xsd:auth.031.001.01 SplmtryData,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.031.001.01 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.031.001.01 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type ValidationRuleSchemeName1Choice struct {
	Cd    ExternalValidationRuleIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:auth.031.001.01 Cd,omitempty"`
	Prtry Max35Text                                 `xml:"urn:iso:std:iso:20022:tech:xsd:auth.031.001.01 Prtry,omitempty"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}
