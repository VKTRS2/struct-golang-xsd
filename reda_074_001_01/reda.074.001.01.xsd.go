// Code generated by download. DO NOT EDIT.

package iso20022_reda_074_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AlternatePartyIdentification7 struct {
	IdTp    IdentificationType42Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 IdTp"`
	Ctry    CountryCode                `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Ctry"`
	AltrnId Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 AltrnId"`
}

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type AnyBICDec2014Identifier string

type BlockChainAddressWallet3 struct {
	Id Max140Text              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Id"`
	Tp GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Tp,omitempty"`
	Nm Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Nm,omitempty"`
}

type CollateralParties4 struct {
	PtyB           PartyIdentification232  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 PtyB"`
	ClntPtyB       PartyIdentification232  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 ClntPtyB,omitempty"`
	ElgbltySetPrfl GenericIdentification37 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 ElgbltySetPrfl,omitempty"`
}

// May be one of GIVE, TAKE
type CollateralRole1Code string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DateOrDateTimePeriod3Choice struct {
	Dt   Period4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Dt,omitempty"`
	DtTm Period8Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 DtTm,omitempty"`
}

type DateTimePeriod1 struct {
	FrDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 FrDtTm"`
	ToDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 ToDtTm"`
}

type Document struct {
	TrptyCollUnltrlRmvlReq TripartyCollateralUnilateralRemovalRequestV01 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 TrptyCollUnltrlRmvlReq"`
}

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// May be no more than 4 items long
type ExternalFinancialInstrumentIdentificationType1Code string

// May be one of EXTN, REMO, TERM
type FinancialInstrumentRemoval1Code string

type GenericIdentification30 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 SchmeNm,omitempty"`
}

type GenericIdentification36 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 SchmeNm,omitempty"`
}

type GenericIdentification37 struct {
	Id   Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Id"`
	Issr Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Issr,omitempty"`
}

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource3Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Cd,omitempty"`
	Prtry Max35Text                                          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Prtry,omitempty"`
}

type IdentificationType42Choice struct {
	Cd    TypeOfIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Cd,omitempty"`
	Prtry GenericIdentification30   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Prtry,omitempty"`
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

// May be no more than 140 items long
type Max140Text string

// May be no more than 16 items long
type Max16Text string

// May be no more than 350 items long
type Max350Text string

// May be no more than 35 items long
type Max35Text string

// May be no more than 52 items long
type Max52Text string

// Must match the pattern [0-9]{1,5}
type Max5NumericText string

// May be no more than 70 items long
type Max70Text string

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Adr,omitempty"`
}

type OtherIdentification1 struct {
	Id  Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Sfx,omitempty"`
	Tp  IdentificationSource3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Tp"`
}

type Pagination1 struct {
	PgNb      Max5NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 PgNb"`
	LastPgInd bool            `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 LastPgInd"`
}

type PartyIdentification120Choice struct {
	AnyBIC   AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 AnyBIC,omitempty"`
	PrtryId  GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 PrtryId,omitempty"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 NmAndAdr,omitempty"`
}

type PartyIdentification232 struct {
	Id      PartyIdentification120Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Id"`
	LEI     LEIIdentifier                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 LEI,omitempty"`
	AltrnId AlternatePartyIdentification7 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 AltrnId,omitempty"`
}

type Period2 struct {
	FrDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 FrDt"`
	ToDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 ToDt"`
}

type Period4Choice struct {
	Dt       ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Dt,omitempty"`
	FrDt     ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 FrDt,omitempty"`
	ToDt     ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 ToDt,omitempty"`
	FrDtToDt Period2 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 FrDtToDt,omitempty"`
}

type Period8Choice struct {
	DtTm     ISODateTime     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 DtTm,omitempty"`
	FrDtTm   ISODateTime     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 FrDtTm,omitempty"`
	ToDtTm   ISODateTime     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 ToDtTm,omitempty"`
	FrDtToDt DateTimePeriod1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 FrDtToDt,omitempty"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Ctry"`
}

type Reference21 struct {
	SndrCollTxId    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 SndrCollTxId,omitempty"`
	RcvrCollTxId    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 RcvrCollTxId,omitempty"`
	SndrCollCtrctId Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 SndrCollCtrctId,omitempty"`
	RcvrCollCtrctId Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 RcvrCollCtrctId,omitempty"`
	CmonTxId        Max52Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 CmonTxId,omitempty"`
}

type Removal1Choice struct {
	Cd    FinancialInstrumentRemoval1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Cd,omitempty"`
	Prtry GenericIdentification30         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Prtry,omitempty"`
}

type RemovalProcessing2Choice struct {
	FinInstrmId SecurityIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 FinInstrmId,omitempty"`
	IndxId      GenericIdentification37  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 IndxId,omitempty"`
	IssrCtry    CountryCode              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 IssrCtry,omitempty"`
}

type RemovalTypeAndReason1 struct {
	RmvlTp    Removal1Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 RmvlTp"`
	Rsn       GenericIdentification30     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Rsn,omitempty"`
	ExclsnPrd DateOrDateTimePeriod3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 ExclsnPrd,omitempty"`
}

type RequestDetails28 struct {
	Rmvl                RemovalTypeAndReason1      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Rmvl"`
	FinInstrmAndAttrbts []RemovalProcessing2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 FinInstrmAndAttrbts,omitempty"`
	CtrPty              CollateralParties4         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 CtrPty,omitempty"`
	SfkpgAcct           SecuritiesAccount19        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 SfkpgAcct,omitempty"`
	BlckChainAdrOrWllt  BlockChainAddressWallet3   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 BlckChainAdrOrWllt,omitempty"`
	Ref                 Reference21                `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Ref,omitempty"`
}

type SecuritiesAccount19 struct {
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Id"`
	Tp GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Tp,omitempty"`
	Nm Max70Text               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Nm,omitempty"`
}

type SecurityIdentification19 struct {
	ISIN   ISINOct2015Identifier  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 ISIN,omitempty"`
	OthrId []OtherIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 OthrId,omitempty"`
	Desc   Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Desc,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type TripartyCollateralUnilateralRemovalRequestV01 struct {
	Pgntn       Pagination1            `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 Pgntn"`
	RmvlReqId   Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 RmvlReqId"`
	PtyA        PartyIdentification232 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 PtyA"`
	ClntPtyA    PartyIdentification232 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 ClntPtyA,omitempty"`
	CollSd      CollateralRole1Code    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 CollSd"`
	ReqDtls     RequestDetails28       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 ReqDtls"`
	SplmtryData SupplementaryData1     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.074.001.01 SplmtryData,omitempty"`
}

// May be one of ARNU, CCPT, CHTY, CORP, DRLC, FIIN, TXID
type TypeOfIdentification1Code string

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
