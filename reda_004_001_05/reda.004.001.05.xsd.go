// Code generated by download. DO NOT EDIT.

package iso20022_reda_004_001_05

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AccountIdentification4Choice struct {
	IBAN IBAN2007Identifier            `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 IBAN,omitempty"`
	Othr GenericAccountIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Othr,omitempty"`
}

type AccountIdentificationAndName5 struct {
	Id AccountIdentification4Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Id"`
	Nm Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Nm,omitempty"`
}

type AccountSchemeName1Choice struct {
	Cd    ExternalAccountIdentification1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Cd,omitempty"`
	Prtry Max35Text                          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Prtry,omitempty"`
}

type ActiveCurrencyAnd13DecimalAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type AdditionalInformation15 struct {
	InfTp  GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 InfTp"`
	InfVal Max350Text              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 InfVal"`
}

type AdditionalReference10 struct {
	Ref     Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Ref"`
	RefIssr PartyIdentification139 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 RefIssr,omitempty"`
	MsgNm   Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 MsgNm,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

// May be one of CAPL, INCO
type AnnualChargePaymentType1Code string

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type AnyBICDec2014Identifier string

// May be one of FWNG, PREC
type BusinessDayConvention1Code string

// Must match the pattern [A-Z]{6,6}
type CFIOct2015Identifier string

type CashAccount202 struct {
	Ccy        ActiveCurrencyCode `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Ccy,omitempty"`
	PmryAcct   CashAccount203     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 PmryAcct,omitempty"`
	ScndryAcct CashAccount203     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 ScndryAcct,omitempty"`
}

type CashAccount203 struct {
	AcctId     AccountIdentificationAndName5 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AcctId"`
	Svcr       AnyBICDec2014Identifier       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Svcr,omitempty"`
	AcctTpDesc Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AcctTpDesc,omitempty"`
}

type ChargeType8Choice struct {
	Cd    InvestmentFundMiFIDFee2Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Cd,omitempty"`
	Prtry GenericIdentification47     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Prtry,omitempty"`
}

type ContactAttributes5 struct {
	Nm       Max350Text              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Nm"`
	PstlAdr  PostalAddress1          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 PstlAdr,omitempty"`
	PhneNb   PhoneNumber             `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 PhneNb,omitempty"`
	FaxNb    PhoneNumber             `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 FaxNb,omitempty"`
	EmailAdr Max256Text              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 EmailAdr,omitempty"`
	URLAdr   Max2048Text             `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 URLAdr,omitempty"`
	AnyBIC   AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AnyBIC,omitempty"`
	LEI      LEIIdentifier           `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 LEI,omitempty"`
}

type ContactAttributes6 struct {
	Nm       Max350Text              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Nm,omitempty"`
	PstlAdr  PostalAddress1          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 PstlAdr,omitempty"`
	PhneNb   PhoneNumber             `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 PhneNb,omitempty"`
	FaxNb    PhoneNumber             `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 FaxNb,omitempty"`
	EmailAdr Max256Text              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 EmailAdr,omitempty"`
	URLAdr   Max2048Text             `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 URLAdr,omitempty"`
	AnyBIC   AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AnyBIC,omitempty"`
	LEI      LEIIdentifier           `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 LEI,omitempty"`
}

type CostsAndCharges2 struct {
	ExAnteRefDt    ISODate                   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 ExAnteRefDt,omitempty"`
	IndvCostOrChrg []IndividualCostOrCharge2 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 IndvCostOrChrg"`
	AddtlInf       AdditionalInformation15   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AddtlInf,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

// May be one of DIST, ACCU
type DistributionPolicy1Code string

type DistributionStrategy1 struct {
	ExctnOnly                           DistributionStrategy1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 ExctnOnly,omitempty"`
	ExctnWthApprprtnssTstOrNonAdvsdSvcs DistributionStrategy1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 ExctnWthApprprtnssTstOrNonAdvsdSvcs,omitempty"`
	InvstmtAdvc                         DistributionStrategy1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 InvstmtAdvc,omitempty"`
	PrtflMgmt                           DistributionStrategy1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 PrtflMgmt,omitempty"`
	Othr                                OtherDistributionStrategy1  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Othr,omitempty"`
}

type DistributionStrategy1Choice struct {
	Cd    InvestorType3Code       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Cd,omitempty"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Prtry,omitempty"`
}

// May be one of CASH, UNIT, BOTH
type DividendPolicy1Code string

type Document struct {
	FndRefDataRpt FundReferenceDataReportV05 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 FndRefDataRpt"`
}

// May be one of EUSI, EUSO, VARI
type EUSavingsDirective1Code string

// May be one of YEAR, SEMI, QUTR, MNTH, WEEK, DAIL, CLOS, TOMN, TOWK, TWMN
type EventFrequency5Code string

// May be one of ADHO, YEAR, DAIL, FOMN, TOMN, TOWK, TYEA, INDA, MNTH, ONDE, OVNG, QUTR, SEMI, TWMN, WEEK
type EventFrequency8Code string

type ExPostCostCalculationBasis1Choice struct {
	Cd    ExPostCostCalculationBasis1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Cd,omitempty"`
	Prtry GenericIdentification47         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Prtry,omitempty"`
}

// May be one of FIXB, ROLL
type ExPostCostCalculationBasis1Code string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

type ExtendedParty13 struct {
	PtyRole     GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 PtyRole"`
	OthrPtyDtls ContactAttributes5      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 OthrPtyDtls"`
}

type Extension1 struct {
	PlcAndNm Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 PlcAndNm"`
	Txt      Max350Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Txt"`
}

// May be no more than 4 items long
type ExternalAccountIdentification1Code string

// May be no more than 4 items long
type ExternalFinancialInstrumentIdentificationType1Code string

type FinancialInstrument96 struct {
	PhysBrScties       bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 PhysBrScties,omitempty"`
	DmtrlsdBrScties    bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DmtrlsdBrScties,omitempty"`
	PhysRegdScties     bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 PhysRegdScties,omitempty"`
	DmtrlsdRegdScties  bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DmtrlsdRegdScties,omitempty"`
	DstrbtnPlcy        DistributionPolicy1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DstrbtnPlcy,omitempty"`
	DvddPlcy           DividendPolicy1Code          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DvddPlcy,omitempty"`
	DvddFrqcy          EventFrequency5Code          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DvddFrqcy,omitempty"`
	RinvstmtFrqcy      EventFrequency5Code          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 RinvstmtFrqcy,omitempty"`
	FrntEndLd          bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 FrntEndLd,omitempty"`
	BckEndLd           bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 BckEndLd,omitempty"`
	SwtchFee           bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 SwtchFee,omitempty"`
	EUSvgsDrctv        EUSavingsDirective1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 EUSvgsDrctv,omitempty"`
	LnchDt             ISODate                      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 LnchDt,omitempty"`
	FndEndDt           ISODate                      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 FndEndDt,omitempty"`
	TermntnDt          ISODate                      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 TermntnDt,omitempty"`
	InitlOfferEndDt    ISODate                      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 InitlOfferEndDt,omitempty"`
	SspnsnStartDt      ISODate                      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 SspnsnStartDt,omitempty"`
	SspnsnEndDt        ISODate                      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 SspnsnEndDt,omitempty"`
	MtrtyDt            ISODate                      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 MtrtyDt,omitempty"`
	MayBeTermntdEarly  TargetMarket1Code            `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 MayBeTermntdEarly,omitempty"`
	ClsdEndFnd         bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 ClsdEndFnd,omitempty"`
	Equlstn            bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Equlstn,omitempty"`
	TaxEffcntPdctElgbl bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 TaxEffcntPdctElgbl,omitempty"`
	Authrsd            bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Authrsd,omitempty"`
	RDRCmplnt          bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 RDRCmplnt,omitempty"`
	MgmtFeeSrc         AnnualChargePaymentType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 MgmtFeeSrc,omitempty"`
	PrfrmncFee         bool                         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 PrfrmncFee,omitempty"`
	AddtlInf           []AdditionalInformation15    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AddtlInf,omitempty"`
}

type Forms1 struct {
	ApplForm bool               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 ApplForm"`
	SgntrTp  SignatureType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 SgntrTp"`
}

type Frequency20Choice struct {
	Cd    EventFrequency8Code     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Cd,omitempty"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Prtry,omitempty"`
}

// May be one of SUBS, RDIV, REDM, RGSV, WIDP
type FundOrderType10Code string

type FundOrderType5Choice struct {
	Cd    FundOrderType10Code     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Cd,omitempty"`
	Prtry GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Prtry,omitempty"`
}

type FundParties1 struct {
	Guarntr ContactAttributes5 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Guarntr,omitempty"`
	Audtr   ContactAttributes5 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Audtr,omitempty"`
	Trstee  ContactAttributes5 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Trstee,omitempty"`
	OthrPty []ExtendedParty13  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 OthrPty,omitempty"`
}

type FundPaymentType1Choice struct {
	Cd    FundPaymentType1Code    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Cd,omitempty"`
	Prtry GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Prtry,omitempty"`
}

// May be one of DRAF, CACC, CHEQ, CRDT, DDEB, CARD
type FundPaymentType1Code string

type FundReferenceDataReport3 struct {
	Id               Max35Text                                  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Id,omitempty"`
	Vrsn             MarketPracticeVersion1                     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Vrsn,omitempty"`
	AuthrsdPrxy      ContactAttributes6                         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AuthrsdPrxy,omitempty"`
	GnlRefDt         ISODate                                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 GnlRefDt"`
	TrgtMktInd       bool                                       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 TrgtMktInd,omitempty"`
	ExAnteInd        bool                                       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 ExAnteInd,omitempty"`
	ExPstInd         bool                                       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 ExPstInd,omitempty"`
	SctyId           SecurityIdentification37                   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 SctyId"`
	FndPties         FundParties1                               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 FndPties,omitempty"`
	MainFndOrdrDsk   OrderDesk1                                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 MainFndOrdrDsk,omitempty"`
	FndMgmtCpny      ContactAttributes5                         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 FndMgmtCpny,omitempty"`
	FndDtls          FinancialInstrument96                      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 FndDtls,omitempty"`
	ValtnDealgChrtcs ValuationDealingProcessingCharacteristics3 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 ValtnDealgChrtcs,omitempty"`
	InvstmtRstrctns  InvestmentRestrictions3                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 InvstmtRstrctns,omitempty"`
	SbcptPrcgChrtcs  ProcessingCharacteristics8                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 SbcptPrcgChrtcs,omitempty"`
	RedPrcgChrtcs    ProcessingCharacteristics7                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 RedPrcgChrtcs,omitempty"`
	SwtchPrcgChrtcs  ProcessingCharacteristics6                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 SwtchPrcgChrtcs,omitempty"`
	PlanChrtcs       []InvestmentPlanCharacteristics1           `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 PlanChrtcs,omitempty"`
	PmtInstrm        []PaymentInstrument16                      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 PmtInstrm,omitempty"`
	CshSttlmDtls     []CashAccount202                           `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 CshSttlmDtls,omitempty"`
	LclMktAnx        []LocalMarketAnnex4                        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 LclMktAnx,omitempty"`
	TrgtMkt          TargetMarket2                              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 TrgtMkt,omitempty"`
	DstrbtnStrtgy    DistributionStrategy1                      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DstrbtnStrtgy,omitempty"`
	CostsAndChrgs    []CostsAndCharges2                         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 CostsAndChrgs,omitempty"`
	Xtnsn            []Extension1                               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Xtnsn,omitempty"`
}

type FundReferenceDataReportV05 struct {
	MsgId           MessageIdentification1     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 MsgId"`
	PrvsRef         []AdditionalReference10    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 PrvsRef,omitempty"`
	RltdRef         AdditionalReference10      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 RltdRef,omitempty"`
	FndRefDataRptId Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 FndRefDataRptId,omitempty"`
	Rpt             []FundReferenceDataReport3 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Rpt"`
}

type GenericAccountIdentification1 struct {
	Id      Max34Text                `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Id"`
	SchmeNm AccountSchemeName1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 SchmeNm,omitempty"`
	Issr    Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Issr,omitempty"`
}

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Issr,omitempty"`
}

type GenericIdentification3 struct {
	Id   Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Id"`
	Issr Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Issr,omitempty"`
}

type GenericIdentification36 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 SchmeNm,omitempty"`
}

type GenericIdentification47 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Id"`
	Issr    Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Issr"`
	SchmeNm Max4AlphaNumericText   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 SchmeNm,omitempty"`
}

type GovernanceProcess1Choice struct {
	Cd    GovernanceProcessType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Cd,omitempty"`
	Prtry GenericIdentification47    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Prtry,omitempty"`
}

// May be one of BMIF, NINF, CMIF, AMIF
type GovernanceProcessType1Code string

// May be one of TRAL, TRNA, RFOD
type HoldingTransferable1Code string

// Must match the pattern [A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}
type IBAN2007Identifier string

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type ISOTime time.Time

func (t *ISOTime) UnmarshalText(text []byte) error {
	return (*xsdTime)(t).UnmarshalText(text)
}
func (t ISOTime) MarshalText() ([]byte, error) {
	return xsdTime(t).MarshalText()
}

type ISOYearMonth time.Time

func (t *ISOYearMonth) UnmarshalText(text []byte) error {
	return (*xsdGYearMonth)(t).UnmarshalText(text)
}
func (t ISOYearMonth) MarshalText() ([]byte, error) {
	return xsdGYearMonth(t).MarshalText()
}

type IdentificationSource3Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Cd,omitempty"`
	Prtry Max35Text                                          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Prtry,omitempty"`
}

type IndividualCostOrCharge2 struct {
	CostTp        ChargeType8Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 CostTp"`
	ExAnteOrExPst IntendedOrActual2Code            `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 ExAnteOrExPst"`
	Amt           ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Amt,omitempty"`
	Sgn           bool                             `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Sgn,omitempty"`
	Rate          float64                          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Rate,omitempty"`
	RefPrd        Period15                         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 RefPrd,omitempty"`
	AddtlInf      AdditionalInformation15          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AddtlInf,omitempty"`
}

// May be one of ANTE, POST
type IntendedOrActual2Code string

// May be one of BORF, DIS2, FES3, FEND, FES2, GOC1, GOCS, INCF, INCS, MNF1, MANS, NET2, NESF, NETO, NRAM, OOEA, OOSF, OOSS, BENS, ENAC, ENFX, EXAC, ENBX, BEND, PENO, OTES, OCAS, RPSS, TRS1
type InvestmentFundMiFIDFee2Code string

type InvestmentFundPlanType1Choice struct {
	Cd    InvestmentFundPlanType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Cd,omitempty"`
	Prtry GenericIdentification36     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Prtry,omitempty"`
}

// May be one of INVP, SWIP, WTHP
type InvestmentFundPlanType1Code string

type InvestmentNeed2Choice struct {
	Cd    InvestmentNeed2Code     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Cd,omitempty"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Prtry,omitempty"`
}

// May be one of NSPE, OTHR, ISLB
type InvestmentNeed2Code string

type InvestmentPlanCharacteristics1 struct {
	PlanTp          InvestmentFundPlanType1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 PlanTp"`
	Frqcy           Frequency20Choice             `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Frqcy,omitempty"`
	TtlNbOfInstlmts float64                       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 TtlNbOfInstlmts,omitempty"`
	Qty             UnitsOrAmount1Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Qty,omitempty"`
	PlanConttn      bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 PlanConttn,omitempty"`
	AddtlSbcpt      bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AddtlSbcpt,omitempty"`
	AddtlSbcptFctn  bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AddtlSbcptFctn,omitempty"`
	AddtlInf        []AdditionalInformation15     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AddtlInf,omitempty"`
}

type InvestmentRestrictions3 struct {
	MinInitlSbcptAmt    ActiveCurrencyAndAmount   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 MinInitlSbcptAmt,omitempty"`
	MinInitlSbcptUnits  float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 MinInitlSbcptUnits,omitempty"`
	MinSbsqntSbcptAmt   ActiveCurrencyAndAmount   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 MinSbsqntSbcptAmt,omitempty"`
	MinSbsqntSbcptUnits float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 MinSbsqntSbcptUnits,omitempty"`
	MaxRedAmt           ActiveCurrencyAndAmount   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 MaxRedAmt,omitempty"`
	MaxRedUnits         float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 MaxRedUnits,omitempty"`
	MinRedPctg          float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 MinRedPctg,omitempty"`
	OthrRedRstrctns     Max350Text                `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 OthrRedRstrctns,omitempty"`
	MinSwtchSbcptAmt    ActiveCurrencyAndAmount   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 MinSwtchSbcptAmt,omitempty"`
	MinSwtchSbcptUnits  float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 MinSwtchSbcptUnits,omitempty"`
	MaxSwtchRedAmt      ActiveCurrencyAndAmount   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 MaxSwtchRedAmt,omitempty"`
	MaxSwtchRedUnits    float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 MaxSwtchRedUnits,omitempty"`
	OthrSwtchRstrctns   Max350Text                `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 OthrSwtchRstrctns,omitempty"`
	MinHldgAmt          ActiveCurrencyAndAmount   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 MinHldgAmt,omitempty"`
	MinHldgUnits        float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 MinHldgUnits,omitempty"`
	MinHldgPrd          Max70Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 MinHldgPrd,omitempty"`
	HldgTrfbl           HoldingTransferable1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 HldgTrfbl,omitempty"`
	AddtlInf            []AdditionalInformation15 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AddtlInf,omitempty"`
}

type InvestorKnowledge1 struct {
	BsicInvstr    TargetMarket1Code                     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 BsicInvstr,omitempty"`
	InfrmdInvstr  TargetMarket1Code                     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 InfrmdInvstr,omitempty"`
	AdvncdInvstr  TargetMarket1Code                     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AdvncdInvstr,omitempty"`
	ExprtInvstrDE TargetMarket1Code                     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 ExprtInvstrDE,omitempty"`
	Othr          []OtherTargetMarketInvestorKnowledge1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Othr,omitempty"`
}

type InvestorRequirements2 struct {
	RtrPrflPrsrvtn       TargetMarket1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 RtrPrflPrsrvtn,omitempty"`
	RtrPrflGrwth         TargetMarket1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 RtrPrflGrwth,omitempty"`
	RtrPrflIncm          TargetMarket1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 RtrPrflIncm,omitempty"`
	RtrPrflHdgg          TargetMarket1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 RtrPrflHdgg,omitempty"`
	OptnOrLvrgdRtrPrfl   TargetMarket1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 OptnOrLvrgdRtrPrfl,omitempty"`
	RtrPrflPnsnSchmeDE   TargetMarket1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 RtrPrflPnsnSchmeDE,omitempty"`
	MinHldgPrd           TimeHorizon2Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 MinHldgPrd,omitempty"`
	ESGPrefs             TargetMarket2Code      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 ESGPrefs,omitempty"`
	OthrSpcfcInvstmtNeed InvestmentNeed2Choice  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 OthrSpcfcInvstmtNeed,omitempty"`
	Othr                 []OtherInvestmentNeed1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Othr,omitempty"`
}

type InvestorType2 struct {
	InvstrTpRtl         TargetMarket1Code            `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 InvstrTpRtl,omitempty"`
	InvstrTpPrfssnl     TargetMarket5Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 InvstrTpPrfssnl,omitempty"`
	InvstrTpElgblCtrPty TargetMarket3Code            `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 InvstrTpElgblCtrPty,omitempty"`
	Othr                []OtherTargetMarketInvestor1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Othr,omitempty"`
}

// May be one of BOT3, EPRO, PRF2
type InvestorType2Code string

// May be one of RETL, PRF2, NEI1, BOT2
type InvestorType3Code string

// May be one of BOT3, NPRF, PRF3, PRF4
type InvestorType4Code string

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

type LocalMarketAnnex4 struct {
	Ctry            []CountryCode              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Ctry"`
	LclOrdrDsk      OrderDesk1                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 LclOrdrDsk"`
	SbcptPrcgChrtcs ProcessingCharacteristics8 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 SbcptPrcgChrtcs,omitempty"`
	RedPrcgChrtcs   ProcessingCharacteristics5 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 RedPrcgChrtcs,omitempty"`
	SwtchPrcgChrtcs ProcessingCharacteristics6 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 SwtchPrcgChrtcs,omitempty"`
	CshSttlmDtls    []CashAccount202           `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 CshSttlmDtls,omitempty"`
	AddtlInf        []AdditionalInformation15  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AddtlInf,omitempty"`
}

type LossBearing2 struct {
	NoCptlLoss     TargetMarket1Code               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 NoCptlLoss,omitempty"`
	LtdCptlLoss    TargetMarket1Code               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 LtdCptlLoss,omitempty"`
	LtdCptlLossLvl float64                         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 LtdCptlLossLvl,omitempty"`
	NoCptlGrnt     TargetMarket1Code               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 NoCptlGrnt,omitempty"`
	LossByndCptl   TargetMarket1Code               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 LossByndCptl,omitempty"`
	Othr           []OtherTargetMarketLossBearing1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Othr,omitempty"`
}

type MainFundOrderDeskLocation1 struct {
	Ctry         CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Ctry"`
	TmZoneOffSet UTCOffset1  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 TmZoneOffSet"`
}

type MarketPracticeVersion1 struct {
	Nm Max35Text    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Nm"`
	Dt ISOYearMonth `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Dt,omitempty"`
	Nb Max35Text    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Nb,omitempty"`
}

// May be no more than 140 items long
type Max140Text string

// May be no more than 16 items long
type Max16Text string

// May be no more than 2048 items long
type Max2048Text string

// May be no more than 256 items long
type Max256Text string

// May be no more than 34 items long
type Max34Text string

// May be no more than 350 items long
type Max350Text string

// May be no more than 35 items long
type Max35Text string

// Must match the pattern [a-zA-Z0-9]{1,4}
type Max4AlphaNumericText string

// May be no more than 70 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Id"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 CreDtTm"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Adr,omitempty"`
}

type NotionalOrUnitBased1Choice struct {
	Cd    NotionalOrUnitBased1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Cd,omitempty"`
	Prtry GenericIdentification47  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Prtry,omitempty"`
}

// May be one of UNIT, NOTI
type NotionalOrUnitBased1Code string

type OrderDesk1 struct {
	OrdrDsk  ContactAttributes5        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 OrdrDsk,omitempty"`
	ClsrDts  []ISODate                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 ClsrDts,omitempty"`
	AddtlInf []AdditionalInformation15 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AddtlInf,omitempty"`
}

type OtherDistributionStrategy1 struct {
	DstrbtnStrtgyTp Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DstrbtnStrtgyTp,omitempty"`
	Trgt            DistributionStrategy1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Trgt,omitempty"`
	AddtlInf        AdditionalInformation15     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AddtlInf,omitempty"`
}

type OtherIdentification1 struct {
	Id  Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Sfx,omitempty"`
	Tp  IdentificationSource3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Tp"`
}

type OtherInvestmentNeed1 struct {
	ClntObjctvsAndNeedsTp Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 ClntObjctvsAndNeedsTp,omitempty"`
	Trgt                  TargetMarket1Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Trgt,omitempty"`
	AddtlInf              AdditionalInformation15 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AddtlInf,omitempty"`
}

type OtherTargetMarket1 struct {
	TrgtMktTp Max350Text              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 TrgtMktTp"`
	AddtlInf  AdditionalInformation15 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AddtlInf,omitempty"`
}

type OtherTargetMarketInvestor1 struct {
	InvstrTp Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 InvstrTp,omitempty"`
	Trgt     TargetMarket3Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Trgt,omitempty"`
	AddtlInf AdditionalInformation15 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AddtlInf,omitempty"`
}

type OtherTargetMarketInvestorKnowledge1 struct {
	InvstrKnwldgTp Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 InvstrKnwldgTp,omitempty"`
	Trgt           TargetMarket1Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Trgt,omitempty"`
	AddtlInf       AdditionalInformation15 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AddtlInf,omitempty"`
}

type OtherTargetMarketLossBearing1 struct {
	AbltyToBearLossesTp Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AbltyToBearLossesTp,omitempty"`
	Trgt                TargetMarket1Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Trgt,omitempty"`
	AddtlInf            AdditionalInformation15 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AddtlInf,omitempty"`
}

type OtherTargetMarketRiskTolerance1 struct {
	RskTlrnceTp Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 RskTlrnceTp,omitempty"`
	Trgt        TargetMarket1Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Trgt,omitempty"`
	AddtlInf    AdditionalInformation15 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AddtlInf,omitempty"`
}

type PartyIdentification125Choice struct {
	AnyBIC   AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AnyBIC,omitempty"`
	PrtryId  GenericIdentification1  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 PrtryId,omitempty"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 NmAndAdr,omitempty"`
}

type PartyIdentification139 struct {
	Pty PartyIdentification125Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Pty"`
	LEI LEIIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 LEI,omitempty"`
}

type PaymentInstrument16 struct {
	OrdrTp   FundOrderType5Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 OrdrTp"`
	InstrmTp FundPaymentType1Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 InstrmTp"`
	AddtlInf []AdditionalInformation15 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AddtlInf,omitempty"`
}

type Period15 struct {
	StartDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 StartDt"`
	EndDt   ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 EndDt"`
}

// Must match the pattern \+[0-9]{1,3}-[0-9()+\-]{1,30}
type PhoneNumber string

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Ctry"`
}

// May be one of FORW, HIST
type PriceMethod1Code string

type ProcessingCharacteristics5 struct {
	DealgCcyAccptd     []ActiveCurrencyCode       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DealgCcyAccptd,omitempty"`
	RedAuthstn         Forms1                     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 RedAuthstn,omitempty"`
	AmtInd             bool                       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AmtInd,omitempty"`
	UnitsInd           bool                       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 UnitsInd,omitempty"`
	Rndg               RoundingDirection2Code     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Rndg,omitempty"`
	PctgInd            bool                       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 PctgInd,omitempty"`
	MainFndOrdrDskLctn MainFundOrderDeskLocation1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 MainFndOrdrDskLctn,omitempty"`
	DealgFrqcy         EventFrequency5Code        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DealgFrqcy,omitempty"`
	DealgFrqcyDesc     Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DealgFrqcyDesc,omitempty"`
	DealgCutOffTm      ISOTime                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DealgCutOffTm,omitempty"`
	DealgCutOffTmFrame TimeFrame4                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DealgCutOffTmFrame,omitempty"`
	DealConfTm         ISOTime                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DealConfTm,omitempty"`
	DealConfTmFrame    TimeFrame5                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DealConfTmFrame,omitempty"`
	LtdPrd             Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 LtdPrd,omitempty"`
	SttlmCycl          TimeFrame8Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 SttlmCycl,omitempty"`
	AddtlInf           []AdditionalInformation15  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AddtlInf,omitempty"`
}

type ProcessingCharacteristics6 struct {
	DealgCcyAccptd     []ActiveCurrencyCode       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DealgCcyAccptd,omitempty"`
	SwtchAuthstn       Forms1                     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 SwtchAuthstn,omitempty"`
	AmtInd             bool                       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AmtInd,omitempty"`
	UnitsInd           bool                       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 UnitsInd,omitempty"`
	Rndg               RoundingDirection2Code     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Rndg,omitempty"`
	MainFndOrdrDskLctn MainFundOrderDeskLocation1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 MainFndOrdrDskLctn,omitempty"`
	DealgFrqcy         EventFrequency5Code        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DealgFrqcy,omitempty"`
	DealgFrqcyDesc     Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DealgFrqcyDesc,omitempty"`
	DealgCutOffTm      ISOTime                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DealgCutOffTm,omitempty"`
	DealgCutOffTmFrame TimeFrame4                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DealgCutOffTmFrame,omitempty"`
	DealConfTm         ISOTime                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DealConfTm,omitempty"`
	DealConfTmFrame    TimeFrame5                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DealConfTmFrame,omitempty"`
	LtdPrd             Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 LtdPrd,omitempty"`
	SttlmCycl          TimeFrame8Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 SttlmCycl,omitempty"`
	AddtlInf           []AdditionalInformation15  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AddtlInf,omitempty"`
}

type ProcessingCharacteristics7 struct {
	DealgCcyAccptd     []ActiveCurrencyCode       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DealgCcyAccptd,omitempty"`
	RedAuthstn         Forms1                     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 RedAuthstn,omitempty"`
	AmtInd             bool                       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AmtInd,omitempty"`
	UnitsInd           bool                       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 UnitsInd,omitempty"`
	Rndg               RoundingDirection2Code     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Rndg,omitempty"`
	PctgInd            bool                       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 PctgInd,omitempty"`
	MainFndOrdrDskLctn MainFundOrderDeskLocation1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 MainFndOrdrDskLctn,omitempty"`
	DealgFrqcy         EventFrequency5Code        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DealgFrqcy,omitempty"`
	DealgFrqcyDesc     Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DealgFrqcyDesc,omitempty"`
	DealgCutOffTm      ISOTime                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DealgCutOffTm,omitempty"`
	DealgCutOffTmFrame TimeFrame4                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DealgCutOffTmFrame,omitempty"`
	DealConfTm         ISOTime                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DealConfTm,omitempty"`
	DealConfTmFrame    TimeFrame6                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DealConfTmFrame,omitempty"`
	LtdPrd             Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 LtdPrd,omitempty"`
	SttlmCycl          TimeFrame8Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 SttlmCycl,omitempty"`
	AddtlInf           []AdditionalInformation15  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AddtlInf,omitempty"`
}

type ProcessingCharacteristics8 struct {
	DealgCcyAccptd     []ActiveCurrencyCode       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DealgCcyAccptd,omitempty"`
	InitlInvstmtAppl   Forms1                     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 InitlInvstmtAppl,omitempty"`
	SbsqntInvstmtAppl  Forms1                     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 SbsqntInvstmtAppl,omitempty"`
	AmtInd             bool                       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AmtInd,omitempty"`
	UnitsInd           bool                       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 UnitsInd,omitempty"`
	Rndg               RoundingDirection2Code     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Rndg,omitempty"`
	MainFndOrdrDskLctn MainFundOrderDeskLocation1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 MainFndOrdrDskLctn,omitempty"`
	DealgFrqcy         EventFrequency5Code        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DealgFrqcy,omitempty"`
	DealgFrqcyDesc     Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DealgFrqcyDesc,omitempty"`
	DealgCutOffTm      ISOTime                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DealgCutOffTm,omitempty"`
	DealgCutOffTmFrame TimeFrame4                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DealgCutOffTmFrame,omitempty"`
	DealConfTm         ISOTime                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DealConfTm,omitempty"`
	DealConfTmFrame    TimeFrame7                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DealConfTmFrame,omitempty"`
	LtdPrd             Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 LtdPrd,omitempty"`
	SttlmCycl          TimeFrame7Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 SttlmCycl,omitempty"`
	AddtlInf           []AdditionalInformation15  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AddtlInf,omitempty"`
}

type ProductStructure1Choice struct {
	Cd    ProductStructure1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Cd,omitempty"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Prtry,omitempty"`
}

// May be one of BOND, NUMM, UCMM, EXTC, UCIT, SSEC, SFUN, NUCI
type ProductStructure1Code string

type QuotationType1Choice struct {
	Cd    QuotationType1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Cd,omitempty"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Prtry,omitempty"`
}

// May be one of ACTU, PRCT
type QuotationType1Code string

// May be one of RFOD
type ReferToFundOrderDesk1Code string

// May be one of HIGH, LOWW, MEDM
type RiskLevel1Code string

type RiskTolerance1 struct {
	RskTlrncePRIIPSMthdlgy             float64                           `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 RskTlrncePRIIPSMthdlgy,omitempty"`
	RskTlrnceUCITSMthdlgy              float64                           `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 RskTlrnceUCITSMthdlgy,omitempty"`
	RskTlrnceIntl                      RiskLevel1Code                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 RskTlrnceIntl,omitempty"`
	RskTlrnceForNonPRIIPSAndNonUCITSES float64                           `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 RskTlrnceForNonPRIIPSAndNonUCITSES,omitempty"`
	NotForInvstrsWthTheLwstRskTlrnceDE TargetMarket2Code                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 NotForInvstrsWthTheLwstRskTlrnceDE,omitempty"`
	Othr                               []OtherTargetMarketRiskTolerance1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Othr,omitempty"`
}

// May be one of RDUP, RDWN
type RoundingDirection2Code string

type SecurityClassificationType2Choice struct {
	CFI           CFIOct2015Identifier   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 CFI,omitempty"`
	AltrnClssfctn GenericIdentification3 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AltrnClssfctn,omitempty"`
}

type SecurityIdentification19 struct {
	ISIN   ISINOct2015Identifier  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 ISIN,omitempty"`
	OthrId []OtherIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 OthrId,omitempty"`
	Desc   Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Desc,omitempty"`
}

type SecurityIdentification37 struct {
	Id                 SecurityIdentification19          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Id"`
	Nm                 Max350Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Nm"`
	ShrtNm             Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 ShrtNm,omitempty"`
	ClssTp             Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 ClssTp,omitempty"`
	UmbrllNm           Max35Text                         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 UmbrllNm,omitempty"`
	NewUmbrll          bool                              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 NewUmbrll,omitempty"`
	ClssfctnTp         SecurityClassificationType2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 ClssfctnTp,omitempty"`
	BaseCcy            ActiveCurrencyCode                `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 BaseCcy,omitempty"`
	CtryOfDmcl         CountryCode                       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 CtryOfDmcl,omitempty"`
	RegdDstrbtnCtry    []CountryCode                     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 RegdDstrbtnCtry,omitempty"`
	PdctTp             ProductStructure1Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 PdctTp,omitempty"`
	Issr               ContactAttributes5                `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Issr,omitempty"`
	IssrPdctGovncPrc   GovernanceProcess1Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 IssrPdctGovncPrc,omitempty"`
	PdctCtgy           Max140Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 PdctCtgy,omitempty"`
	PdctCtgyDE         Max140Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 PdctCtgyDE,omitempty"`
	NtnlOrUnitBased    NotionalOrUnitBased1Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 NtnlOrUnitBased,omitempty"`
	QtnTp              QuotationType1Choice              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 QtnTp,omitempty"`
	LvrgdOrCntgntLblty bool                              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 LvrgdOrCntgntLblty,omitempty"`
	NoRtrcssnInd       bool                              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 NoRtrcssnInd,omitempty"`
	ExPstCostClctnBsis ExPostCostCalculationBasis1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 ExPstCostClctnBsis,omitempty"`
	AddtlInf           []AdditionalInformation15         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AddtlInf,omitempty"`
}

// May be one of ORIG, DIGI, ELEC, NONE
type SignatureType1Code string

type TargetMarket1Choice struct {
	Cd    TargetMarket1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Cd,omitempty"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Prtry,omitempty"`
}

// May be one of YSCO, NEUT, NSCO
type TargetMarket1Code string

type TargetMarket2 struct {
	RefDt               ISODate               `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 RefDt,omitempty"`
	InvstrTp            InvestorType2         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 InvstrTp,omitempty"`
	KnwldgAndOrExprnc   InvestorKnowledge1    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 KnwldgAndOrExprnc,omitempty"`
	AbltyToBearLosses   LossBearing2          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AbltyToBearLosses,omitempty"`
	RskTlrnce           RiskTolerance1        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 RskTlrnce,omitempty"`
	ClntObjctvsAndNeeds InvestorRequirements2 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 ClntObjctvsAndNeeds,omitempty"`
	Othr                []OtherTargetMarket1  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Othr,omitempty"`
}

// May be one of NEUT, YSCO
type TargetMarket2Code string

type TargetMarket3Choice struct {
	Tp    InvestorType2Code       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Tp,omitempty"`
	Othr  TargetMarket1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Othr,omitempty"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Prtry,omitempty"`
}

// May be one of YSCO, NSCO
type TargetMarket3Code string

type TargetMarket5Choice struct {
	Tp   InvestorType4Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Tp,omitempty"`
	Othr TargetMarket1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Othr,omitempty"`
}

// May be one of HOLD, LONG, MEDM, SHOR, VSHT
type TimeFrame2Code string

type TimeFrame4 struct {
	OthrTmFrameDesc     Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 OthrTmFrameDesc,omitempty"`
	TMns                float64                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 TMns,omitempty"`
	NonWorkgDayAdjstmnt BusinessDayConvention1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 NonWorkgDayAdjstmnt,omitempty"`
	RefrToOrdrDsk       ReferToFundOrderDesk1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 RefrToOrdrDsk,omitempty"`
}

type TimeFrame5 struct {
	OthrTmFrameDesc     Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 OthrTmFrameDesc,omitempty"`
	TPlus               float64                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 TPlus,omitempty"`
	NonWorkgDayAdjstmnt BusinessDayConvention1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 NonWorkgDayAdjstmnt,omitempty"`
	RefrToOrdrDsk       ReferToFundOrderDesk1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 RefrToOrdrDsk,omitempty"`
}

type TimeFrame6 struct {
	OthrTmFrameDesc     Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 OthrTmFrameDesc,omitempty"`
	TPlus               float64                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 TPlus,omitempty"`
	NonWorkgDayAdjstmnt BusinessDayConvention1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 NonWorkgDayAdjstmnt,omitempty"`
	RefrToOrdrDsk       ReferToFundOrderDesk1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 RefrToOrdrDsk,omitempty"`
}

type TimeFrame7 struct {
	OthrTmFrameDesc     Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 OthrTmFrameDesc,omitempty"`
	TPlus               float64                    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 TPlus,omitempty"`
	NonWorkgDayAdjstmnt BusinessDayConvention1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 NonWorkgDayAdjstmnt,omitempty"`
	RefrToOrdrDsk       ReferToFundOrderDesk1Code  `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 RefrToOrdrDsk,omitempty"`
}

type TimeFrame7Choice struct {
	TPlus  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 TPlus,omitempty"`
	Prepmt bool    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Prepmt,omitempty"`
}

type TimeFrame8Choice struct {
	TPlus float64 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 TPlus,omitempty"`
	RPlus float64 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 RPlus,omitempty"`
}

type TimeFrame9Choice struct {
	Cd    TimeFrame2Code          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Cd,omitempty"`
	Prtry GenericIdentification47 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Prtry,omitempty"`
}

type TimeHorizon2Choice struct {
	NbOfYrs float64          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 NbOfYrs,omitempty"`
	TmFrame TimeFrame9Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 TmFrame,omitempty"`
}

type UTCOffset1 struct {
	Sgn     bool    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Sgn"`
	NbOfHrs ISOTime `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 NbOfHrs"`
}

type UnitsOrAmount1Choice struct {
	Amt  ActiveCurrencyAndAmount `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Amt,omitempty"`
	Unit float64                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 Unit,omitempty"`
}

type ValuationDealingProcessingCharacteristics3 struct {
	ValtnFrqcy     EventFrequency5Code       `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 ValtnFrqcy,omitempty"`
	ValtnFrqcyDesc Max350Text                `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 ValtnFrqcyDesc,omitempty"`
	ValtnTm        ISOTime                   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 ValtnTm,omitempty"`
	DcmlstnUnits   float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DcmlstnUnits,omitempty"`
	DcmlstnPric    float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DcmlstnPric,omitempty"`
	DualFndInd     bool                      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 DualFndInd,omitempty"`
	PricMtd        PriceMethod1Code          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 PricMtd,omitempty"`
	PricCcy        []ActiveCurrencyCode      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 PricCcy,omitempty"`
	AddtlInf       []AdditionalInformation15 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.004.001.05 AddtlInf,omitempty"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdGYearMonth time.Time

func (t *xsdGYearMonth) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01")
}
func (t xsdGYearMonth) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYearMonth) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdTime time.Time

func (t *xsdTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "15:04:05.999999999")
}
func (t xsdTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "15:04:05.999999999")
}
func (t xsdTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
