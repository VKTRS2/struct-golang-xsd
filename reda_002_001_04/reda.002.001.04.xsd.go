// Code generated by download. DO NOT EDIT.

package iso20022_reda_002_001_04

import (
	"bytes"
	"encoding/xml"
	"time"
)

type ActiveCurrencyAnd13DecimalAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

type ActiveOrHistoricCurrencyAnd13DecimalAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

type ActiveOrHistoricCurrencyAndAmount struct {
	Value float64                      `xml:",chardata"`
	Ccy   ActiveOrHistoricCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

type AdditionalReference3 struct {
	Ref     Max35Text                  `xml:"urn:swift:xsd:reda.002.001.04 Ref"`
	RefIssr PartyIdentification2Choice `xml:"urn:swift:xsd:reda.002.001.04 RefIssr,omitempty"`
	MsgNm   Max35Text                  `xml:"urn:swift:xsd:reda.002.001.04 MsgNm,omitempty"`
}

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

type AlternateSecurityIdentification1 struct {
	Id         Max35Text   `xml:"urn:swift:xsd:reda.002.001.04 Id"`
	DmstIdSrc  CountryCode `xml:"urn:swift:xsd:reda.002.001.04 DmstIdSrc,omitempty"`
	PrtryIdSrc Max35Text   `xml:"urn:swift:xsd:reda.002.001.04 PrtryIdSrc,omitempty"`
}

// Must match the pattern [A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}
type AnyBICIdentifier string

// May be no more than 35 items long
type BloombergIdentifier string

// May be one of AVER, DAIL, MNTH, YEAR
type CalculationBasis2Code string

type Charge15 struct {
	Tp              ChargeType9Code                  `xml:"urn:swift:xsd:reda.002.001.04 Tp,omitempty"`
	XtndedTp        Extended350Code                  `xml:"urn:swift:xsd:reda.002.001.04 XtndedTp,omitempty"`
	Amt             ActiveCurrencyAnd13DecimalAmount `xml:"urn:swift:xsd:reda.002.001.04 Amt,omitempty"`
	Rate            float64                          `xml:"urn:swift:xsd:reda.002.001.04 Rate,omitempty"`
	ClctnBsis       CalculationBasis2Code            `xml:"urn:swift:xsd:reda.002.001.04 ClctnBsis,omitempty"`
	XtndedClctnBsis Extended350Code                  `xml:"urn:swift:xsd:reda.002.001.04 XtndedClctnBsis,omitempty"`
}

// May be one of MANF, BEND, FEND, ADVI, CUST, PUBL, ACCT, EQUL, PENA
type ChargeType9Code string

// May be no more than 35 items long
type ConsolidatedTapeAssociationIdentifier string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DateAndDateTime1Choice struct {
	Dt   ISODate     `xml:"urn:swift:xsd:reda.002.001.04 Dt,omitempty"`
	DtTm ISODateTime `xml:"urn:swift:xsd:reda.002.001.04 DtTm,omitempty"`
}

type DateAndDateTimeChoice struct {
	Dt   ISODate     `xml:"urn:swift:xsd:reda.002.001.04 Dt,omitempty"`
	DtTm ISODateTime `xml:"urn:swift:xsd:reda.002.001.04 DtTm,omitempty"`
}

type DateOrDateTimePeriodChoice struct {
	Dt   DatePeriodDetails     `xml:"urn:swift:xsd:reda.002.001.04 Dt,omitempty"`
	DtTm DateTimePeriodDetails `xml:"urn:swift:xsd:reda.002.001.04 DtTm,omitempty"`
}

type DatePeriodDetails struct {
	FrDt ISODate `xml:"urn:swift:xsd:reda.002.001.04 FrDt"`
	ToDt ISODate `xml:"urn:swift:xsd:reda.002.001.04 ToDt"`
}

type DateTimePeriodDetails struct {
	FrDtTm ISODateTime `xml:"urn:swift:xsd:reda.002.001.04 FrDtTm"`
	ToDtTm ISODateTime `xml:"urn:swift:xsd:reda.002.001.04 ToDtTm"`
}

// May be one of DIST, ACCU
type DistributionPolicy1Code string

type Document struct {
	PricRptCxl PriceReportCancellationV04 `xml:"urn:swift:xsd:reda.002.001.04 PricRptCxl"`
}

// May be one of EUSI, EUSO, UKWN
type EUCapitalGain2Code string

// May be one of DIVI, DIVO, UKWN
type EUDividendStatus1Code string

// May be no more than 12 items long
type EuroclearClearstreamIdentifier string

// May be one of YEAR, SEMI, QUTR, TOMN, MNTH, TWMN, TOWK, WEEK, DAIL, ADHO, INDA, OVNG, ONDE
type EventFrequency1Code string

// May be no more than 350 items long
type Extended350Code string

type Extension1 struct {
	PlcAndNm Max350Text `xml:"urn:swift:xsd:reda.002.001.04 PlcAndNm"`
	Txt      Max350Text `xml:"urn:swift:xsd:reda.002.001.04 Txt"`
}

type FinancialInstrument8 struct {
	Id          []SecurityIdentification3Choice `xml:"urn:swift:xsd:reda.002.001.04 Id"`
	Nm          Max350Text                      `xml:"urn:swift:xsd:reda.002.001.04 Nm,omitempty"`
	SplmtryId   Max35Text                       `xml:"urn:swift:xsd:reda.002.001.04 SplmtryId,omitempty"`
	DnmtnCcy    ActiveOrHistoricCurrencyCode    `xml:"urn:swift:xsd:reda.002.001.04 DnmtnCcy,omitempty"`
	ClssTp      Max35Text                       `xml:"urn:swift:xsd:reda.002.001.04 ClssTp,omitempty"`
	SctiesForm  FormOfSecurity1Code             `xml:"urn:swift:xsd:reda.002.001.04 SctiesForm,omitempty"`
	DstrbtnPlcy DistributionPolicy1Code         `xml:"urn:swift:xsd:reda.002.001.04 DstrbtnPlcy,omitempty"`
	DualFndInd  bool                            `xml:"urn:swift:xsd:reda.002.001.04 DualFndInd"`
}

type FinancialInstrumentQuantity1 struct {
	Unit float64 `xml:"urn:swift:xsd:reda.002.001.04 Unit"`
}

// May be one of BEAR, REGD
type FormOfSecurity1Code string

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:swift:xsd:reda.002.001.04 Id"`
	SchmeNm Max35Text `xml:"urn:swift:xsd:reda.002.001.04 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:swift:xsd:reda.002.001.04 Issr,omitempty"`
}

// Must match the pattern [A-Z0-9]{12,12}
type ISINIdentifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

// May be no more than 16 items long
type Max16Text string

// May be no more than 350 items long
type Max350Text string

// May be no more than 35 items long
type Max35Text string

// Must match the pattern [0-9]{1,5}
type Max5NumericText string

// May be no more than 70 items long
type Max70Text string

type MessageIdentification1 struct {
	Id      Max35Text   `xml:"urn:swift:xsd:reda.002.001.04 Id"`
	CreDtTm ISODateTime `xml:"urn:swift:xsd:reda.002.001.04 CreDtTm"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:swift:xsd:reda.002.001.04 Nm"`
	Adr PostalAddress1 `xml:"urn:swift:xsd:reda.002.001.04 Adr,omitempty"`
}

type Pagination struct {
	PgNb      Max5NumericText `xml:"urn:swift:xsd:reda.002.001.04 PgNb"`
	LastPgInd bool            `xml:"urn:swift:xsd:reda.002.001.04 LastPgInd"`
}

type PartyIdentification2Choice struct {
	BICOrBEI AnyBICIdentifier       `xml:"urn:swift:xsd:reda.002.001.04 BICOrBEI,omitempty"`
	PrtryId  GenericIdentification1 `xml:"urn:swift:xsd:reda.002.001.04 PrtryId,omitempty"`
	NmAndAdr NameAndAddress5        `xml:"urn:swift:xsd:reda.002.001.04 NmAndAdr,omitempty"`
}

type PerformanceFactors1 struct {
	CorpActnFctr      float64           `xml:"urn:swift:xsd:reda.002.001.04 CorpActnFctr,omitempty"`
	CmltvCorpActnFctr float64           `xml:"urn:swift:xsd:reda.002.001.04 CmltvCorpActnFctr,omitempty"`
	AcmltnPrd         DatePeriodDetails `xml:"urn:swift:xsd:reda.002.001.04 AcmltnPrd,omitempty"`
	NrmlPrfrmnc       float64           `xml:"urn:swift:xsd:reda.002.001.04 NrmlPrfrmnc,omitempty"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:swift:xsd:reda.002.001.04 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:swift:xsd:reda.002.001.04 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:swift:xsd:reda.002.001.04 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:swift:xsd:reda.002.001.04 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:swift:xsd:reda.002.001.04 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:swift:xsd:reda.002.001.04 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:swift:xsd:reda.002.001.04 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:swift:xsd:reda.002.001.04 Ctry"`
}

// May be one of FORW, HIST
type PriceMethod1Code string

type PriceReport3 struct {
	PricValtnDtls []PriceValuation4 `xml:"urn:swift:xsd:reda.002.001.04 PricValtnDtls"`
}

type PriceReportCancellationV04 struct {
	MsgId             MessageIdentification1 `xml:"urn:swift:xsd:reda.002.001.04 MsgId"`
	PoolRef           AdditionalReference3   `xml:"urn:swift:xsd:reda.002.001.04 PoolRef,omitempty"`
	PrvsRef           AdditionalReference3   `xml:"urn:swift:xsd:reda.002.001.04 PrvsRef,omitempty"`
	MsgPgntn          Pagination             `xml:"urn:swift:xsd:reda.002.001.04 MsgPgntn"`
	PricRptId         Max35Text              `xml:"urn:swift:xsd:reda.002.001.04 PricRptId"`
	CxlId             Max35Text              `xml:"urn:swift:xsd:reda.002.001.04 CxlId"`
	CxlRsn            Max350Text             `xml:"urn:swift:xsd:reda.002.001.04 CxlRsn,omitempty"`
	XpctdPricCrrctnDt DateAndDateTime1Choice `xml:"urn:swift:xsd:reda.002.001.04 XpctdPricCrrctnDt,omitempty"`
	CmpltPricCxl      bool                   `xml:"urn:swift:xsd:reda.002.001.04 CmpltPricCxl"`
	CancPricValtnDtls []PriceReport3         `xml:"urn:swift:xsd:reda.002.001.04 CancPricValtnDtls,omitempty"`
	Xtnsn             []Extension1           `xml:"urn:swift:xsd:reda.002.001.04 Xtnsn,omitempty"`
}

type PriceType2 struct {
	Strd     TypeOfPrice6Code `xml:"urn:swift:xsd:reda.002.001.04 Strd"`
	AddtlInf Max350Text       `xml:"urn:swift:xsd:reda.002.001.04 AddtlInf,omitempty"`
}

type PriceValuation4 struct {
	Id            Max35Text                           `xml:"urn:swift:xsd:reda.002.001.04 Id,omitempty"`
	ValtnDtTm     DateAndDateTimeChoice               `xml:"urn:swift:xsd:reda.002.001.04 ValtnDtTm,omitempty"`
	NAVDtTm       DateAndDateTimeChoice               `xml:"urn:swift:xsd:reda.002.001.04 NAVDtTm"`
	FinInstrmDtls FinancialInstrument8                `xml:"urn:swift:xsd:reda.002.001.04 FinInstrmDtls"`
	FndMgmtCpny   PartyIdentification2Choice          `xml:"urn:swift:xsd:reda.002.001.04 FndMgmtCpny,omitempty"`
	TtlNAV        []ActiveOrHistoricCurrencyAndAmount `xml:"urn:swift:xsd:reda.002.001.04 TtlNAV,omitempty"`
	TtlUnitsNb    FinancialInstrumentQuantity1        `xml:"urn:swift:xsd:reda.002.001.04 TtlUnitsNb,omitempty"`
	NxtValtnDtTm  DateAndDateTimeChoice               `xml:"urn:swift:xsd:reda.002.001.04 NxtValtnDtTm,omitempty"`
	PrvsValtnDtTm DateAndDateTimeChoice               `xml:"urn:swift:xsd:reda.002.001.04 PrvsValtnDtTm,omitempty"`
	ValtnTp       ValuationTiming1Code                `xml:"urn:swift:xsd:reda.002.001.04 ValtnTp"`
	ValtnFrqcy    EventFrequency1Code                 `xml:"urn:swift:xsd:reda.002.001.04 ValtnFrqcy,omitempty"`
	OffclValtnInd bool                                `xml:"urn:swift:xsd:reda.002.001.04 OffclValtnInd"`
	SspdInd       bool                                `xml:"urn:swift:xsd:reda.002.001.04 SspdInd"`
	PricDtls      []UnitPrice15                       `xml:"urn:swift:xsd:reda.002.001.04 PricDtls,omitempty"`
	ValtnSttstcs  []ValuationStatistics3              `xml:"urn:swift:xsd:reda.002.001.04 ValtnSttstcs,omitempty"`
	PrfrmncDtls   PerformanceFactors1                 `xml:"urn:swift:xsd:reda.002.001.04 PrfrmncDtls,omitempty"`
}

type PriceValue1 struct {
	Amt ActiveCurrencyAnd13DecimalAmount `xml:"urn:swift:xsd:reda.002.001.04 Amt"`
}

type PriceValue5 struct {
	Amt ActiveOrHistoricCurrencyAnd13DecimalAmount `xml:"urn:swift:xsd:reda.002.001.04 Amt"`
}

type PriceValueChange1 struct {
	Amt    ActiveOrHistoricCurrencyAnd13DecimalAmount `xml:"urn:swift:xsd:reda.002.001.04 Amt,omitempty"`
	AmtSgn bool                                       `xml:"urn:swift:xsd:reda.002.001.04 AmtSgn,omitempty"`
	Rate   float64                                    `xml:"urn:swift:xsd:reda.002.001.04 Rate,omitempty"`
}

// May be no more than 35 items long
type RICIdentifier string

type SecurityIdentification3Choice struct {
	ISIN        ISINIdentifier                        `xml:"urn:swift:xsd:reda.002.001.04 ISIN,omitempty"`
	SEDOL       string                                `xml:"urn:swift:xsd:reda.002.001.04 SEDOL,omitempty"`
	CUSIP       string                                `xml:"urn:swift:xsd:reda.002.001.04 CUSIP,omitempty"`
	RIC         RICIdentifier                         `xml:"urn:swift:xsd:reda.002.001.04 RIC,omitempty"`
	TckrSymb    TickerIdentifier                      `xml:"urn:swift:xsd:reda.002.001.04 TckrSymb,omitempty"`
	Blmbrg      BloombergIdentifier                   `xml:"urn:swift:xsd:reda.002.001.04 Blmbrg,omitempty"`
	CTA         ConsolidatedTapeAssociationIdentifier `xml:"urn:swift:xsd:reda.002.001.04 CTA,omitempty"`
	QUICK       string                                `xml:"urn:swift:xsd:reda.002.001.04 QUICK,omitempty"`
	Wrtppr      string                                `xml:"urn:swift:xsd:reda.002.001.04 Wrtppr,omitempty"`
	Dtch        string                                `xml:"urn:swift:xsd:reda.002.001.04 Dtch,omitempty"`
	Vlrn        string                                `xml:"urn:swift:xsd:reda.002.001.04 Vlrn,omitempty"`
	SCVM        string                                `xml:"urn:swift:xsd:reda.002.001.04 SCVM,omitempty"`
	Belgn       string                                `xml:"urn:swift:xsd:reda.002.001.04 Belgn,omitempty"`
	Cmon        EuroclearClearstreamIdentifier        `xml:"urn:swift:xsd:reda.002.001.04 Cmon,omitempty"`
	OthrPrtryId AlternateSecurityIdentification1      `xml:"urn:swift:xsd:reda.002.001.04 OthrPrtryId,omitempty"`
}

type StatisticsByPredefinedTimePeriods2 struct {
	HghstPricVal12Mnths PriceValue5       `xml:"urn:swift:xsd:reda.002.001.04 HghstPricVal12Mnths,omitempty"`
	LwstPricVal12Mnths  PriceValue5       `xml:"urn:swift:xsd:reda.002.001.04 LwstPricVal12Mnths,omitempty"`
	OneYrPricChng       PriceValueChange1 `xml:"urn:swift:xsd:reda.002.001.04 OneYrPricChng,omitempty"`
	ThreeYrPricChng     PriceValueChange1 `xml:"urn:swift:xsd:reda.002.001.04 ThreeYrPricChng,omitempty"`
	FiveYrPricChng      PriceValueChange1 `xml:"urn:swift:xsd:reda.002.001.04 FiveYrPricChng,omitempty"`
}

type StatisticsByUserDefinedTimePeriod2 struct {
	Prd          DateOrDateTimePeriodChoice `xml:"urn:swift:xsd:reda.002.001.04 Prd"`
	HghstPricVal PriceValue5                `xml:"urn:swift:xsd:reda.002.001.04 HghstPricVal,omitempty"`
	LwstPricVal  PriceValue5                `xml:"urn:swift:xsd:reda.002.001.04 LwstPricVal,omitempty"`
	PricChng     PriceValueChange1          `xml:"urn:swift:xsd:reda.002.001.04 PricChng,omitempty"`
	Yld          float64                    `xml:"urn:swift:xsd:reda.002.001.04 Yld,omitempty"`
}

type Tax17 struct {
	Tp           TaxType12Code                                `xml:"urn:swift:xsd:reda.002.001.04 Tp,omitempty"`
	XtndedTp     Extended350Code                              `xml:"urn:swift:xsd:reda.002.001.04 XtndedTp,omitempty"`
	Amt          []ActiveOrHistoricCurrencyAnd13DecimalAmount `xml:"urn:swift:xsd:reda.002.001.04 Amt,omitempty"`
	Rate         float64                                      `xml:"urn:swift:xsd:reda.002.001.04 Rate,omitempty"`
	Ctry         CountryCode                                  `xml:"urn:swift:xsd:reda.002.001.04 Ctry"`
	TaxClctnDtls TaxCalculationInformation4                   `xml:"urn:swift:xsd:reda.002.001.04 TaxClctnDtls,omitempty"`
}

type TaxCalculationInformation4 struct {
	EUCptlGn         EUCapitalGain2Code                         `xml:"urn:swift:xsd:reda.002.001.04 EUCptlGn,omitempty"`
	XtndedEUCptlGn   Extended350Code                            `xml:"urn:swift:xsd:reda.002.001.04 XtndedEUCptlGn,omitempty"`
	PctgOfDebtClm    float64                                    `xml:"urn:swift:xsd:reda.002.001.04 PctgOfDebtClm,omitempty"`
	PctgGrdfthdDebt  float64                                    `xml:"urn:swift:xsd:reda.002.001.04 PctgGrdfthdDebt,omitempty"`
	TaxblIncmPerDvdd ActiveOrHistoricCurrencyAnd13DecimalAmount `xml:"urn:swift:xsd:reda.002.001.04 TaxblIncmPerDvdd,omitempty"`
	EUDvddSts        EUDividendStatus1Code                      `xml:"urn:swift:xsd:reda.002.001.04 EUDvddSts,omitempty"`
	XtndedEUDvddSts  Extended350Code                            `xml:"urn:swift:xsd:reda.002.001.04 XtndedEUDvddSts,omitempty"`
}

// May be one of INPO, EUTR, AKT1, AKT2, ZWIS, MIET
type TaxType12Code string

// May be one of TSIY, TSIN, UKWN
type TaxableIncomePerShareCalculated2Code string

// May be no more than 35 items long
type TickerIdentifier string

// May be one of BIDE, OFFR, NAVL, CREA, CANC, INTE, SWNG, OTHR, MIDD, RINV, SWIC, DDVR, ACTU, NAUP
type TypeOfPrice6Code string

// May be one of BIDE, OFFR, NAVL, CREA, CANC, INTE, SWNG, MIDD, RINV, SWIC, DDVR, ACTU, NAUP, GUAR, ENAV
type TypeOfPrice9Code string

type UnitPrice15 struct {
	Tp                         TypeOfPrice9Code                           `xml:"urn:swift:xsd:reda.002.001.04 Tp,omitempty"`
	XtndedTp                   Extended350Code                            `xml:"urn:swift:xsd:reda.002.001.04 XtndedTp,omitempty"`
	PricMtd                    PriceMethod1Code                           `xml:"urn:swift:xsd:reda.002.001.04 PricMtd,omitempty"`
	ValInInvstmtCcy            []PriceValue1                              `xml:"urn:swift:xsd:reda.002.001.04 ValInInvstmtCcy"`
	ValInAltrntvCcy            []PriceValue1                              `xml:"urn:swift:xsd:reda.002.001.04 ValInAltrntvCcy,omitempty"`
	ForExctnInd                bool                                       `xml:"urn:swift:xsd:reda.002.001.04 ForExctnInd"`
	CumDvddInd                 bool                                       `xml:"urn:swift:xsd:reda.002.001.04 CumDvddInd"`
	ClctnBsis                  float64                                    `xml:"urn:swift:xsd:reda.002.001.04 ClctnBsis,omitempty"`
	EstmtdPricInd              bool                                       `xml:"urn:swift:xsd:reda.002.001.04 EstmtdPricInd"`
	NbOfDaysAcrd               float64                                    `xml:"urn:swift:xsd:reda.002.001.04 NbOfDaysAcrd,omitempty"`
	TaxblIncmPerShr            ActiveOrHistoricCurrencyAnd13DecimalAmount `xml:"urn:swift:xsd:reda.002.001.04 TaxblIncmPerShr,omitempty"`
	TaxblIncmPerShrClctd       TaxableIncomePerShareCalculated2Code       `xml:"urn:swift:xsd:reda.002.001.04 TaxblIncmPerShrClctd,omitempty"`
	XtndedTaxblIncmPerShrClctd Extended350Code                            `xml:"urn:swift:xsd:reda.002.001.04 XtndedTaxblIncmPerShrClctd,omitempty"`
	TaxblIncmPerDvdd           ActiveOrHistoricCurrencyAnd13DecimalAmount `xml:"urn:swift:xsd:reda.002.001.04 TaxblIncmPerDvdd,omitempty"`
	EUDvddSts                  EUDividendStatus1Code                      `xml:"urn:swift:xsd:reda.002.001.04 EUDvddSts,omitempty"`
	XtndedEUDvddSts            Extended350Code                            `xml:"urn:swift:xsd:reda.002.001.04 XtndedEUDvddSts,omitempty"`
	ChrgDtls                   []Charge15                                 `xml:"urn:swift:xsd:reda.002.001.04 ChrgDtls,omitempty"`
	TaxLbltyDtls               []Tax17                                    `xml:"urn:swift:xsd:reda.002.001.04 TaxLbltyDtls,omitempty"`
	TaxRfndDtls                []Tax17                                    `xml:"urn:swift:xsd:reda.002.001.04 TaxRfndDtls,omitempty"`
}

type ValuationStatistics3 struct {
	Ccy            ActiveOrHistoricCurrencyCode         `xml:"urn:swift:xsd:reda.002.001.04 Ccy"`
	PricTpChngBsis PriceType2                           `xml:"urn:swift:xsd:reda.002.001.04 PricTpChngBsis"`
	PricChng       PriceValueChange1                    `xml:"urn:swift:xsd:reda.002.001.04 PricChng"`
	Yld            float64                              `xml:"urn:swift:xsd:reda.002.001.04 Yld,omitempty"`
	ByPrdfndTmPrds StatisticsByPredefinedTimePeriods2   `xml:"urn:swift:xsd:reda.002.001.04 ByPrdfndTmPrds,omitempty"`
	ByUsrDfndTmPrd []StatisticsByUserDefinedTimePeriod2 `xml:"urn:swift:xsd:reda.002.001.04 ByUsrDfndTmPrd,omitempty"`
}

// May be one of EXCP, USUA, PATC
type ValuationTiming1Code string

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
