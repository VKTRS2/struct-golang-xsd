// Code generated by download. DO NOT EDIT.

package iso20022_seev_052_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

type AcceptedReason10Choice struct {
	Cd    AcknowledgementReason7Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Cd,omitempty"`
	Prtry GenericIdentification30    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Prtry,omitempty"`
}

type AcceptedStatus8Choice struct {
	NoSpcfdRsn NoReasonCode            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 NoSpcfdRsn,omitempty"`
	Rsn        []AcceptedStatusReason9 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Rsn,omitempty"`
}

type AcceptedStatusReason9 struct {
	RsnCd       AcceptedReason10Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 RsnCd"`
	AddtlRsnInf Max210Text             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 AddtlRsnInf,omitempty"`
}

type AccountIdentification46 struct {
	SfkpgAcct Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 SfkpgAcct"`
	AcctOwnr  PartyIdentification127Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 AcctOwnr,omitempty"`
	SfkpgPlc  SafekeepingPlaceFormat28Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 SfkpgPlc,omitempty"`
}

// May be one of NSTP, OTHR
type AcknowledgementReason7Code string

type ActiveCurrencyAnd13DecimalAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

type ActiveCurrencyAndAmount struct {
	Value float64            `xml:",chardata"`
	Ccy   ActiveCurrencyCode `xml:"Ccy,attr"`
}

// Must match the pattern [A-Z]{3,3}
type ActiveCurrencyCode string

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type AnyBICDec2014Identifier string

type CancelledReason8Choice struct {
	Cd    CancelledStatusReason6Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Cd,omitempty"`
	Prtry GenericIdentification30    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Prtry,omitempty"`
}

type CancelledStatus12Choice struct {
	NoSpcfdRsn NoReasonCode              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 NoSpcfdRsn,omitempty"`
	Rsn        []CancelledStatusReason11 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Rsn,omitempty"`
}

type CancelledStatusReason11 struct {
	RsnCd       CancelledReason8Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 RsnCd"`
	AddtlRsnInf Max210Text             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 AddtlRsnInf,omitempty"`
}

// May be one of CANI, CANO, CANS, CSUB, OTHR
type CancelledStatusReason6Code string

type CashAccountIdentification5Choice struct {
	IBAN  IBAN2007Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 IBAN,omitempty"`
	Prtry Max34Text          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Prtry,omitempty"`
}

type CashOption76 struct {
	CdtDbtInd    CreditDebitCode                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 CdtDbtInd"`
	CshAcctId    CashAccountIdentification5Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 CshAcctId,omitempty"`
	GrssCshAmt   ActiveCurrencyAndAmount          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 GrssCshAmt,omitempty"`
	NetCshAmt    ActiveCurrencyAndAmount          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 NetCshAmt,omitempty"`
	EntitldAmt   ActiveCurrencyAndAmount          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 EntitldAmt,omitempty"`
	WhldgTaxRate []RateAndAmountFormat40Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 WhldgTaxRate,omitempty"`
	WhldgTaxAmt  ActiveCurrencyAndAmount          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 WhldgTaxAmt,omitempty"`
	EarlstPmtDt  DateAndDateTime2Choice           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 EarlstPmtDt,omitempty"`
	PmtDt        DateFormat43Choice               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 PmtDt"`
}

// May be one of ACTV, ATTI, BRUP, DFLT, BONU, EXRI, CAPD, CAPG, CAPI, DRCA, DVCA, CHAN, COOP, CLSA, CONS, CONV, CREV, DECR, DETI, DSCL, DVOP, DRIP, DRAW, DTCH, EXOF, REDM, MCAL, INCR, PPMT, INTR, RHDI, LIQU, EXTM, MRGR, NOOF, CERT, ODLT, OTHR, PARI, PCAL, PRED, PINK, PLAC, PDEF, PRIO, BPUT, REDO, REMK, BIDS, SPLR, RHTS, DVSC, SHPR, SMAL, SOFF, DVSE, SPLF, TREC, TEND, DLST, SUSP, EXWA, WTRC, WRTH
type CorporateActionEventType29Code string

type CorporateActionEventType85Choice struct {
	Cd    CorporateActionEventType29Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Cd,omitempty"`
	Prtry GenericIdentification30        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Prtry,omitempty"`
}

type CorporateActionGeneralInformation157 struct {
	CorpActnEvtId      Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 CorpActnEvtId"`
	OffclCorpActnEvtId Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 OffclCorpActnEvtId,omitempty"`
	EvtTp              CorporateActionEventType85Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 EvtTp"`
	FinInstrmId        SecurityIdentification19         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 FinInstrmId,omitempty"`
}

// May be one of ABST, BSPL, BUYA, CASE, CASH, CEXC, CONN, CONY, CTEN, EXER, LAPS, MPUT, NOAC, NOQU, OFFR, OTHR, OVER, QINV, SECU, SLLE, PRUN
type CorporateActionOption11Code string

type CorporateActionOption185 struct {
	OptnNb          Exact3NumericText             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 OptnNb"`
	OptnTp          CorporateActionOption30Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 OptnTp"`
	SctiesMvmntDtls []SecuritiesOption76          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 SctiesMvmntDtls,omitempty"`
	CshMvmntDtls    []CashOption76                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 CshMvmntDtls,omitempty"`
}

type CorporateActionOption30Choice struct {
	Cd    CorporateActionOption11Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Cd,omitempty"`
	Prtry GenericIdentification30     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Prtry,omitempty"`
}

// Must match the pattern [A-Z]{2,2}
type CountryCode string

// May be one of CRDT, DBIT
type CreditDebitCode string

type DateAndDateTime2Choice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Dt,omitempty"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 DtTm,omitempty"`
}

type DateCode19Choice struct {
	Cd    DateType8Code           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Cd,omitempty"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Prtry,omitempty"`
}

type DateFormat43Choice struct {
	Dt   DateAndDateTime2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Dt,omitempty"`
	DtCd DateCode19Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 DtCd,omitempty"`
}

type DateFormat58Choice struct {
	DtOrDtTm DateAndDateTime2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 DtOrDtTm,omitempty"`
	DtCd     DateType1Code          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 DtCd,omitempty"`
}

// May be one of UKWN
type DateType1Code string

// May be one of UKWN, ONGO
type DateType8Code string

type Document struct {
	MktClmStsAdvc MarketClaimStatusAdviceV01 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 MktClmStsAdvc"`
}

type DocumentIdentification9 struct {
	Id Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Id"`
}

// Must match the pattern [0-9]{3}
type Exact3NumericText string

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// May be no more than 4 items long
type ExternalFinancialInstrumentIdentificationType1Code string

type FinancialInstrumentQuantity1Choice struct {
	Unit     float64 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Unit,omitempty"`
	FaceAmt  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 FaceAmt,omitempty"`
	AmtsdVal float64 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 AmtsdVal,omitempty"`
}

type GenericIdentification30 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 SchmeNm,omitempty"`
}

type GenericIdentification36 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 SchmeNm,omitempty"`
}

type GenericIdentification78 struct {
	Tp GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Tp"`
	Id Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Id,omitempty"`
}

// Must match the pattern [A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}
type IBAN2007Identifier string

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource3Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Cd,omitempty"`
	Prtry Max35Text                                          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Prtry,omitempty"`
}

type MarketClaimProcessingStatus1Choice struct {
	Canc               CancelledStatus12Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Canc,omitempty"`
	AccptdForFrthrPrcg AcceptedStatus8Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 AccptdForFrthrPrcg,omitempty"`
	Rjctd              RejectedStatus37Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Rjctd,omitempty"`
	Pdg                PendingStatus63Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Pdg,omitempty"`
	MtchgSts           MatchingStatus34Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 MtchgSts,omitempty"`
	PrtrySts           ProprietaryStatusAndReason6 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 PrtrySts,omitempty"`
}

type MarketClaimStatusAdviceV01 struct {
	MktClmCreId    DocumentIdentification9              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 MktClmCreId,omitempty"`
	TxRef          References26                         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 TxRef"`
	CorpActnGnlInf CorporateActionGeneralInformation157 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 CorpActnGnlInf"`
	AcctDtls       AccountIdentification46              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 AcctDtls,omitempty"`
	MktClmPrcgSts  MarketClaimProcessingStatus1Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 MktClmPrcgSts"`
	MktClmDtls     CorporateActionOption185             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 MktClmDtls,omitempty"`
	SplmtryData    []SupplementaryData1                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 SplmtryData,omitempty"`
}

type MatchingStatus34Choice struct {
	Mtchd  ProprietaryReason4          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Mtchd,omitempty"`
	Umtchd UnmatchedStatus23Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Umtchd,omitempty"`
	Prtry  ProprietaryStatusAndReason6 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Prtry,omitempty"`
}

// May be no more than 140 items long
type Max140Text string

// May be no more than 16 items long
type Max16Text string

// May be no more than 210 items long
type Max210Text string

// May be no more than 34 items long
type Max34Text string

// May be no more than 350 items long
type Max350Text string

// May be no more than 35 items long
type Max35Text string

// May be one of NORE
type NoReasonCode string

type OriginalAndCurrentQuantities1 struct {
	FaceAmt  float64 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 FaceAmt"`
	AmtsdVal float64 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 AmtsdVal"`
}

type OtherIdentification1 struct {
	Id  Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Sfx,omitempty"`
	Tp  IdentificationSource3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Tp"`
}

type PartyIdentification127Choice struct {
	AnyBIC  AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 AnyBIC,omitempty"`
	PrtryId GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 PrtryId,omitempty"`
}

// May be one of ADEA, OTHR, MONY, LACK, LATE, CLAC, CMON, PREA, LINK, CYCL, BOTH, PRCY, FUTU
type PendingReason22Code string

type PendingReason59Choice struct {
	Cd    PendingReason22Code     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Cd,omitempty"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Prtry,omitempty"`
}

type PendingStatus63Choice struct {
	NoSpcfdRsn NoReasonCode            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 NoSpcfdRsn,omitempty"`
	Rsn        []PendingStatusReason22 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Rsn,omitempty"`
}

type PendingStatusReason22 struct {
	RsnCd       PendingReason59Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 RsnCd"`
	AddtlRsnInf Max210Text            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 AddtlRsnInf,omitempty"`
}

type ProprietaryReason4 struct {
	Rsn         GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Rsn,omitempty"`
	AddtlRsnInf Max210Text              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 AddtlRsnInf,omitempty"`
}

type ProprietaryStatusAndReason6 struct {
	PrtrySts GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 PrtrySts"`
	PrtryRsn []ProprietaryReason4    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 PrtryRsn,omitempty"`
}

type Quantity6Choice struct {
	Qty             FinancialInstrumentQuantity1Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Qty,omitempty"`
	OrgnlAndCurFace OriginalAndCurrentQuantities1      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 OrgnlAndCurFace,omitempty"`
}

type RateAndAmountFormat40Choice struct {
	Rate          float64                          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Rate,omitempty"`
	Amt           ActiveCurrencyAnd13DecimalAmount `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Amt,omitempty"`
	RateTpAndRate RateTypeAndPercentageRate8       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 RateTpAndRate,omitempty"`
}

type RateType42Choice struct {
	Cd    WithholdingTaxRateType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Cd,omitempty"`
	Prtry GenericIdentification30     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Prtry,omitempty"`
}

type RateTypeAndPercentageRate8 struct {
	RateTp RateType42Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 RateTp"`
	Rate   float64          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Rate"`
}

type References26 struct {
	AcctSvcrTxId      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 AcctSvcrTxId"`
	MktInfrstrctrTxId Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 MktInfrstrctrTxId,omitempty"`
	PrcrTxId          Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 PrcrTxId,omitempty"`
}

type RejectedReason37Choice struct {
	Cd    RejectionReason59Code   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Cd,omitempty"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Prtry,omitempty"`
}

type RejectedStatus37Choice struct {
	NoSpcfdRsn NoReasonCode             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 NoSpcfdRsn,omitempty"`
	Rsn        []RejectedStatusReason35 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Rsn,omitempty"`
}

type RejectedStatusReason35 struct {
	RsnCd       RejectedReason37Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 RsnCd"`
	AddtlRsnInf Max210Text             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 AddtlRsnInf,omitempty"`
}

// May be one of ADEA, OPTY, ULNK, DSEC, LATE, NMTY, OPNM, OTHR, DQUA, SAFE, EVNM, DQCS, DQCC
type RejectionReason59Code string

// May be one of CUST, ICSD, NCSD, SHHE
type SafekeepingPlace1Code string

// May be one of SHHE, ALLP
type SafekeepingPlace2Code string

type SafekeepingPlaceFormat28Choice struct {
	Id      SafekeepingPlaceTypeAndText6           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Id,omitempty"`
	Ctry    CountryCode                            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Ctry,omitempty"`
	TpAndId SafekeepingPlaceTypeAndIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 TpAndId,omitempty"`
	Prtry   GenericIdentification78                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Prtry,omitempty"`
}

type SafekeepingPlaceTypeAndIdentification1 struct {
	SfkpgPlcTp SafekeepingPlace1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 SfkpgPlcTp"`
	Id         AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Id"`
}

type SafekeepingPlaceTypeAndText6 struct {
	SfkpgPlcTp SafekeepingPlace2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 SfkpgPlcTp"`
	Id         Max35Text             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Id,omitempty"`
}

type SecuritiesOption76 struct {
	FinInstrmId SecurityIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 FinInstrmId"`
	CdtDbtInd   CreditDebitCode          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 CdtDbtInd"`
	EntitldQty  Quantity6Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 EntitldQty"`
	PmtDt       DateFormat58Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 PmtDt"`
}

type SecurityIdentification19 struct {
	ISIN   ISINOct2015Identifier  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 ISIN,omitempty"`
	OthrId []OtherIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 OthrId,omitempty"`
	Desc   Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Desc,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

// May be one of NCRR, DSEC, DQUA, CMIS, DEPT, ICAG, ICUS, IEXE, DMON, DDAT, DTRD, DELN
type UnmatchedReason16Code string

type UnmatchedReason22 struct {
	Cd          UnmatchedReason31Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Cd"`
	AddtlRsnInf Max210Text              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 AddtlRsnInf,omitempty"`
}

type UnmatchedReason31Choice struct {
	Cd    UnmatchedReason16Code   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Cd,omitempty"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Prtry,omitempty"`
}

type UnmatchedStatus23Choice struct {
	NoSpcfdRsn NoReasonCode        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 NoSpcfdRsn,omitempty"`
	Rsn        []UnmatchedReason22 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.052.001.01 Rsn,omitempty"`
}

// May be one of BWIT, FTCA, NRAT
type WithholdingTaxRateType1Code string

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
