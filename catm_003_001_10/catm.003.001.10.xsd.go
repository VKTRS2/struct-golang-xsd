// Code generated by download. DO NOT EDIT.

package iso20022_catm_003_001_10

import (
	"bytes"
	"encoding/base64"
	"encoding/xml"
	"time"
)

type AcceptorConfiguration10 struct {
	TermnlMgrId GenericIdentification176        `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 TermnlMgrId"`
	POIGrpId    []Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 POIGrpId,omitempty"`
	DataSet     []AcceptorConfigurationDataSet2 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 DataSet"`
}

type AcceptorConfigurationContent10 struct {
	RplcCfgtn         bool                               `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 RplcCfgtn,omitempty"`
	TMSPrtcolParams   []TMSProtocolParameters5           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 TMSPrtcolParams,omitempty"`
	AcqrrPrtcolParams []AcquirerProtocolParameters14     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 AcqrrPrtcolParams,omitempty"`
	SvcPrvdrParams    []ServiceProviderParameters1       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 SvcPrvdrParams,omitempty"`
	MrchntParams      []MerchantConfigurationParameters6 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 MrchntParams,omitempty"`
	TermnlParams      []PaymentTerminalParameters8       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 TermnlParams,omitempty"`
	ApplParams        []ApplicationParameters10          `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 ApplParams,omitempty"`
	HstComParams      []HostCommunicationParameter6      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 HstComParams,omitempty"`
	SctyParams        []SecurityParameters13             `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 SctyParams,omitempty"`
	SaleToPOIParams   []SaleToPOIProtocolParameter1      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 SaleToPOIParams,omitempty"`
	TermnlPackg       []TerminalPackageType2             `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 TermnlPackg,omitempty"`
}

type AcceptorConfigurationDataSet2 struct {
	Id       DataSetIdentification8         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Id"`
	SeqCntr  Max9NumericText                `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 SeqCntr,omitempty"`
	LastSeq  bool                           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 LastSeq,omitempty"`
	POIId    []GenericIdentification176     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 POIId,omitempty"`
	CfgtnScp PartyType15Code                `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 CfgtnScp,omitempty"`
	Cntt     AcceptorConfigurationContent10 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Cntt"`
}

type AcceptorConfigurationUpdateV10 struct {
	Hdr         TMSHeader1               `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Hdr"`
	AccptrCfgtn AcceptorConfiguration10  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 AccptrCfgtn"`
	SctyTrlr    ContentInformationType25 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 SctyTrlr,omitempty"`
}

type AcquirerHostConfiguration8 struct {
	HstId      Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 HstId"`
	MsgToSnd   []MessageFunction43Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 MsgToSnd,omitempty"`
	PrtcolVrsn Max8Text                `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 PrtcolVrsn,omitempty"`
}

type AcquirerProtocolExchangeBehavior2 struct {
	FinCaptr   FinancialCapture1Code    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 FinCaptr"`
	BtchTrf    ExchangeConfiguration9   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 BtchTrf,omitempty"`
	CmpltnXchg ExchangeConfiguration10  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 CmpltnXchg,omitempty"`
	CxlXchg    CancellationProcess2Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 CxlXchg,omitempty"`
}

type AcquirerProtocolParameters14 struct {
	ActnTp           TerminalManagementAction3Code     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 ActnTp"`
	AcqrrId          []GenericIdentification176        `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 AcqrrId"`
	Vrsn             Max256Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Vrsn"`
	ApplId           []Max35Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 ApplId,omitempty"`
	Hst              []AcquirerHostConfiguration8      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Hst,omitempty"`
	OnLineTx         AcquirerProtocolExchangeBehavior2 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 OnLineTx,omitempty"`
	OffLineTx        AcquirerProtocolExchangeBehavior2 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 OffLineTx,omitempty"`
	RcncltnXchg      ExchangeConfiguration9            `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 RcncltnXchg,omitempty"`
	RcncltnByAcqrr   bool                              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 RcncltnByAcqrr,omitempty"`
	TtlsPerCcy       bool                              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 TtlsPerCcy,omitempty"`
	SpltTtls         bool                              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 SpltTtls,omitempty"`
	SpltTtlCrit      []ReconciliationCriteria1Code     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 SpltTtlCrit,omitempty"`
	CmpltnAdvcMndtd  bool                              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 CmpltnAdvcMndtd,omitempty"`
	AmtQlfrForRsvatn []TypeOfAmount8Code               `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 AmtQlfrForRsvatn,omitempty"`
	RcncltnErr       bool                              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 RcncltnErr,omitempty"`
	CardDataVrfctn   bool                              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 CardDataVrfctn,omitempty"`
	NtfyOffLineCxl   bool                              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 NtfyOffLineCxl,omitempty"`
	BtchTrfCntt      []BatchTransactionType1Code       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 BtchTrfCntt,omitempty"`
	FileTrfBtch      bool                              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 FileTrfBtch,omitempty"`
	BtchDgtlSgntr    bool                              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 BtchDgtlSgntr,omitempty"`
	MsgItm           []MessageItemCondition1           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 MsgItm,omitempty"`
	PrtctCardData    bool                              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 PrtctCardData"`
	PrvtCardData     bool                              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 PrvtCardData,omitempty"`
	MndtrySctyTrlr   bool                              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 MndtrySctyTrlr,omitempty"`
}

// May be one of HS25, HS38, HS51, HS01
type Algorithm11Code string

// May be one of HS25, HS38, HS51, HS01, SH31, SH32, SH33, SH35, SHK1, SHK2
type Algorithm16Code string

// May be one of MACC, MCCS, CMA1, MCC1, CMA9, CMA5, CMA2, CM31, CM32, CM33, MCS3, CCA1, CCA2, CCA3
type Algorithm17Code string

// May be one of EA2C, E3DC, DKP9, UKPT, UKA2, EA9C, EA5C, DA12, DA19, DA25, N108, EA5R, EA9R, EA2R, E3DR, E36C, E36R, SD5C, UKA1, UKA3
type Algorithm24Code string

// May be one of ERS2, ERS1, RPSS, ERS3, ED32, ED33, ED35, ED23, ED25, ES22, ES32, ES33, ES35, ES23, ES25, ED22
type Algorithm25Code string

// May be one of ERSA, RSAO
type Algorithm7Code string

// May be one of MGF1
type Algorithm8Code string

type AlgorithmIdentification12 struct {
	Algo  Algorithm8Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Algo"`
	Param Parameter5     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Param,omitempty"`
}

type AlgorithmIdentification18 struct {
	Algo  Algorithm8Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Algo"`
	Param Parameter9     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Param,omitempty"`
}

type AlgorithmIdentification19 struct {
	Algo  Algorithm7Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Algo"`
	Param Parameter10    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Param,omitempty"`
}

type AlgorithmIdentification21 struct {
	Algo Algorithm16Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Algo"`
}

type AlgorithmIdentification22 struct {
	Algo  Algorithm17Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Algo"`
	Param Parameter7      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Param,omitempty"`
}

type AlgorithmIdentification29 struct {
	Algo  Algorithm24Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Algo"`
	Param Parameter12     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Param,omitempty"`
}

type AlgorithmIdentification30 struct {
	Algo  Algorithm25Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Algo"`
	Param Parameter15     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Param,omitempty"`
}

type ApplicationParameters10 struct {
	ActnTp       TerminalManagementAction3Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 ActnTp"`
	ApplId       Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 ApplId"`
	Vrsn         Max256Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Vrsn,omitempty"`
	ParamFrmtIdr Max8Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 ParamFrmtIdr,omitempty"`
	ParamsLngth  float64                       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 ParamsLngth,omitempty"`
	OffsetStart  float64                       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 OffsetStart,omitempty"`
	OffsetEnd    float64                       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 OffsetEnd,omitempty"`
	Params       []Max100KBinary               `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Params,omitempty"`
	NcrptdParams ContentInformationType28      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 NcrptdParams,omitempty"`
}

// May be one of CNAT, LATT, OATT, OUAT, CATT
type AttributeType1Code string

type AuthenticatedData7 struct {
	Vrsn        float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Vrsn,omitempty"`
	Rcpt        []Recipient10Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Rcpt"`
	MACAlgo     AlgorithmIdentification22 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 MACAlgo"`
	NcpsltdCntt EncapsulatedContent3      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 NcpsltdCntt"`
	MAC         Max140Binary              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 MAC"`
}

// May be one of DTCT, CNCL, FAIL, DCLN
type BatchTransactionType1Code string

// May be one of LNGT, NUL8, NULG, NULL, RAND
type BytePadding1Code string

// May be one of ADVC, NALW, REQU, APPL
type CancellationProcess2Code string

type CertificateIssuer1 struct {
	RltvDstngshdNm []RelativeDistinguishedName1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 RltvDstngshdNm"`
}

type ClockSynchronisation3 struct {
	POITmZone Max70Text            `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 POITmZone"`
	SynctnSvr []NetworkParameters7 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 SynctnSvr,omitempty"`
	Dely      ISOTime              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Dely,omitempty"`
}

type ContentInformationType25 struct {
	CnttTp       ContentType2Code   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 CnttTp"`
	AuthntcdData AuthenticatedData7 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 AuthntcdData,omitempty"`
	SgndData     SignedData6        `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 SgndData,omitempty"`
}

type ContentInformationType26 struct {
	CnttTp       ContentType2Code   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 CnttTp"`
	EnvlpdData   EnvelopedData8     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 EnvlpdData,omitempty"`
	AuthntcdData AuthenticatedData7 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 AuthntcdData,omitempty"`
	SgndData     SignedData6        `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 SgndData,omitempty"`
	DgstdData    DigestedData5      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 DgstdData,omitempty"`
}

type ContentInformationType28 struct {
	CnttTp     ContentType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 CnttTp"`
	EnvlpdData EnvelopedData8   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 EnvlpdData"`
}

// May be one of DATA, SIGN, EVLP, DGST, AUTH
type ContentType2Code string

type CryptographicKey15 struct {
	Id           Max350Text                `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Id"`
	AddtlId      Max35Binary               `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 AddtlId,omitempty"`
	Nm           Max256Text                `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Nm,omitempty"`
	SctyPrfl     Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 SctyPrfl,omitempty"`
	ItmNb        Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 ItmNb,omitempty"`
	Vrsn         Max256Text                `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Vrsn"`
	Tp           CryptographicKeyType3Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Tp,omitempty"`
	Fctn         []KeyUsage1Code           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Fctn,omitempty"`
	ActvtnDt     ISODateTime               `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 ActvtnDt,omitempty"`
	DeactvtnDt   ISODateTime               `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 DeactvtnDt,omitempty"`
	KeyVal       ContentInformationType26  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 KeyVal,omitempty"`
	KeyChckVal   Max35Binary               `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 KeyChckVal,omitempty"`
	AddtlMgmtInf []GenericInformation1     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 AddtlMgmtInf,omitempty"`
}

// May be one of AES2, EDE3, DKP9, AES9, AES5, EDE4
type CryptographicKeyType3Code string

// May be one of AQPR, APPR, MTMG, MRPR, MTOR, SCPR, SWPK, TRPR, CRTF, TMSP
type DataSetCategory10Code string

// May be one of AQPR, APPR, TXCP, AKCP, DLGT, MGTP, MRPR, SCPR, SWPK, STRP, TRPR, VDPR, PARA, TMSP, CRTF, LOGF, CMRQ, MDFL, SOFT, CONF, RPFL
type DataSetCategory14Code string

type DataSetIdentification8 struct {
	Nm      Max256Text            `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Nm,omitempty"`
	Tp      DataSetCategory14Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Tp"`
	Vrsn    Max256Text            `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Vrsn,omitempty"`
	CreDtTm ISODateTime           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 CreDtTm,omitempty"`
}

type DigestedData5 struct {
	Vrsn        float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Vrsn,omitempty"`
	DgstAlgo    AlgorithmIdentification21 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 DgstAlgo"`
	NcpsltdCntt EncapsulatedContent3      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 NcpsltdCntt"`
	Dgst        Max140Binary              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Dgst"`
}

type Document struct {
	AccptrCfgtnUpd AcceptorConfigurationUpdateV10 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 AccptrCfgtnUpd"`
}

type EncapsulatedContent3 struct {
	CnttTp ContentType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 CnttTp"`
	Cntt   Max100KBinary    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Cntt,omitempty"`
}

type EncryptedContent6 struct {
	CnttTp         ContentType2Code          `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 CnttTp"`
	CnttNcrptnAlgo AlgorithmIdentification29 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 CnttNcrptnAlgo,omitempty"`
	NcrptdData     Max100KBinary             `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 NcrptdData"`
}

// May be one of TR31, TR34, I238
type EncryptionFormat2Code string

type EnvelopedData8 struct {
	Vrsn       float64                `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Vrsn,omitempty"`
	OrgtrInf   OriginatorInformation1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 OrgtrInf,omitempty"`
	Rcpt       []Recipient10Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Rcpt"`
	NcrptdCntt EncryptedContent6      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 NcrptdCntt,omitempty"`
}

type ExchangeConfiguration10 struct {
	XchgPlcy  []ExchangePolicy2Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 XchgPlcy"`
	MaxNb     float64               `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 MaxNb,omitempty"`
	MaxAmt    float64               `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 MaxAmt,omitempty"`
	ReTry     ProcessRetry3         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 ReTry,omitempty"`
	TmCond    ProcessTiming6        `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 TmCond,omitempty"`
	XchgFaild bool                  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 XchgFaild,omitempty"`
	XchgDclnd bool                  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 XchgDclnd,omitempty"`
}

type ExchangeConfiguration9 struct {
	XchgPlcy []ExchangePolicy2Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 XchgPlcy"`
	MaxNb    float64               `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 MaxNb,omitempty"`
	MaxAmt   float64               `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 MaxAmt,omitempty"`
	ReTry    ProcessRetry3         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 ReTry,omitempty"`
	TmCond   ProcessTiming6        `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 TmCond,omitempty"`
}

// May be one of ONDM, IMMD, ASAP, AGRP, NBLT, TTLT, CYCL, NONE, BLCK
type ExchangePolicy2Code string

type ExternallyDefinedData2 struct {
	Id        Max1025Text              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Id"`
	Val       Max100KBinary            `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Val,omitempty"`
	PrtctdVal ContentInformationType26 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 PrtctdVal,omitempty"`
	Tp        Max1025Text              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Tp,omitempty"`
}

// May be one of AUTH, COMP, BTCH
type FinancialCapture1Code string

type GenericIdentification176 struct {
	Id     Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Id"`
	Tp     PartyType33Code   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Tp,omitempty"`
	Issr   PartyType33Code   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Issr,omitempty"`
	Ctry   Min2Max3AlphaText `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Ctry,omitempty"`
	ShrtNm Max35Text         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 ShrtNm,omitempty"`
}

type GenericIdentification177 struct {
	Id       Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Id"`
	Tp       PartyType33Code    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Tp,omitempty"`
	Issr     PartyType33Code    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Issr,omitempty"`
	Ctry     Min2Max3AlphaText  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Ctry,omitempty"`
	ShrtNm   Max35Text          `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 ShrtNm,omitempty"`
	RmotAccs NetworkParameters7 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 RmotAccs,omitempty"`
	Glctn    Geolocation1       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Glctn,omitempty"`
}

type GenericInformation1 struct {
	Nm  Max70Text  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Nm"`
	Val Max140Text `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Val,omitempty"`
}

type Geolocation1 struct {
	GeogcCordints GeolocationGeographicCoordinates1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 GeogcCordints,omitempty"`
	UTMCordints   GeolocationUTMCoordinates1        `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 UTMCordints,omitempty"`
}

type GeolocationGeographicCoordinates1 struct {
	Lat  Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Lat"`
	Long Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Long"`
}

type GeolocationUTMCoordinates1 struct {
	UTMZone    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 UTMZone"`
	UTMEstwrd  Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 UTMEstwrd"`
	UTMNrthwrd Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 UTMNrthwrd"`
}

type HostCommunicationParameter6 struct {
	ActnTp       TerminalManagementAction3Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 ActnTp"`
	HstId        Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 HstId"`
	Adr          NetworkParameters7            `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Adr,omitempty"`
	Key          []KEKIdentifier5              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Key,omitempty"`
	NtwkSvcPrvdr NetworkParameters7            `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 NtwkSvcPrvdr,omitempty"`
	PhysIntrfc   PhysicalInterfaceParameter1   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 PhysIntrfc,omitempty"`
}

// Must match the pattern [0-9]{3,3}
type ISO3NumericCountryCode string

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type ISOTime time.Time

func (t *ISOTime) UnmarshalText(text []byte) error {
	return (*xsdTime)(t).UnmarshalText(text)
}
func (t ISOTime) MarshalText() ([]byte, error) {
	return xsdTime(t).MarshalText()
}

type IssuerAndSerialNumber2 struct {
	Issr  CertificateIssuer1 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Issr"`
	SrlNb Max500Binary       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 SrlNb"`
}

type KEK7 struct {
	Vrsn          float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Vrsn,omitempty"`
	KEKId         KEKIdentifier2            `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 KEKId"`
	KeyNcrptnAlgo AlgorithmIdentification29 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 KeyNcrptnAlgo"`
	NcrptdKey     Max500Binary              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 NcrptdKey"`
}

type KEKIdentifier2 struct {
	KeyId     Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 KeyId"`
	KeyVrsn   Max140Text      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 KeyVrsn"`
	SeqNb     float64         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 SeqNb,omitempty"`
	DerivtnId Min5Max16Binary `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 DerivtnId,omitempty"`
}

type KEKIdentifier5 struct {
	KeyId     Max140Text                `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 KeyId"`
	KeyVrsn   Max140Text                `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 KeyVrsn"`
	SeqNb     float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 SeqNb,omitempty"`
	DerivtnId Min5Max16Binary           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 DerivtnId,omitempty"`
	Tp        CryptographicKeyType3Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Tp,omitempty"`
	Fctn      []KeyUsage1Code           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Fctn,omitempty"`
}

type KeyTransport7 struct {
	Vrsn          float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Vrsn,omitempty"`
	RcptId        Recipient9Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 RcptId"`
	KeyNcrptnAlgo AlgorithmIdentification19 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 KeyNcrptnAlgo"`
	NcrptdKey     Max5000Binary             `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 NcrptdKey"`
}

// May be one of ENCR, DCPT, DENC, DDEC, TRNI, TRNX, MACG, MACV, SIGG, SUGV, PINE, PIND, PINV, KEYG, KEYI, KEYX, KEYD
type KeyUsage1Code string

type LocalDateTime1 struct {
	FrDtTm    ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 FrDtTm,omitempty"`
	ToDtTm    ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 ToDtTm,omitempty"`
	UTCOffset float64     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 UTCOffset"`
}

type Max10000Binary []byte

func (t *Max10000Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max10000Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

type Max100KBinary []byte

func (t *Max100KBinary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max100KBinary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// May be no more than 1025 items long
type Max1025Text string

type Max10KBinary []byte

func (t *Max10KBinary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max10KBinary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

type Max140Binary []byte

func (t *Max140Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max140Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// May be no more than 140 items long
type Max140Text string

// May be no more than 256 items long
type Max256Text string

type Max2KBinary []byte

func (t *Max2KBinary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max2KBinary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

type Max3000Binary []byte

func (t *Max3000Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max3000Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// May be no more than 350 items long
type Max350Text string

type Max35Binary []byte

func (t *Max35Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max35Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// May be no more than 35 items long
type Max35Text string

type Max5000Binary []byte

func (t *Max5000Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max5000Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

type Max500Binary []byte

func (t *Max500Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Max500Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

// May be no more than 500 items long
type Max500Text string

// May be no more than 6 items long
type Max6Text string

// May be no more than 70 items long
type Max70Text string

// May be no more than 8 items long
type Max8Text string

// Must match the pattern [0-9]{1,9}
type Max9NumericText string

type MerchantConfigurationParameters6 struct {
	ActnTp          TerminalManagementAction3Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 ActnTp"`
	MrchntId        Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 MrchntId,omitempty"`
	Vrsn            Max256Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Vrsn,omitempty"`
	ParamFrmtIdr    Max8Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 ParamFrmtIdr,omitempty"`
	Prxy            NetworkParameters8            `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Prxy,omitempty"`
	OthrParamsLngth float64                       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 OthrParamsLngth,omitempty"`
	OffsetStart     float64                       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 OffsetStart,omitempty"`
	OffsetEnd       float64                       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 OffsetEnd,omitempty"`
	OthrParams      Max10000Binary                `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 OthrParams,omitempty"`
}

// May be one of FAUQ, CCAQ, CMPV, DGNP, RCLQ, CCAV, BTCH, FRVA, AUTQ, FCMV, DCCQ, RVRA, DCAV, TRNA, NFRQ, TRPQ
type MessageFunction43Code string

type MessageItemCondition1 struct {
	ItmId Max140Text                `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 ItmId"`
	Cond  MessageItemCondition1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Cond"`
	Val   []Max140Text              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Val,omitempty"`
}

// May be one of MNDT, CFVL, DFLT, ALWV, IFAV, COPY, UNSP
type MessageItemCondition1Code string

// Must match the pattern [a-zA-Z]{2,3}
type Min2Max3AlphaText string

// May be no more than 4 items long
type Min3Max4Text string

type Min5Max16Binary []byte

func (t *Min5Max16Binary) UnmarshalText(text []byte) error {
	return (*xsdBase64Binary)(t).UnmarshalText(text)
}
func (t Min5Max16Binary) MarshalText() ([]byte, error) {
	return xsdBase64Binary(t).MarshalText()
}

type NetworkParameters7 struct {
	Adr        []NetworkParameters9 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Adr"`
	UsrNm      Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 UsrNm,omitempty"`
	AccsCd     Max35Binary          `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 AccsCd,omitempty"`
	SvrCert    []Max10KBinary       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 SvrCert,omitempty"`
	SvrCertIdr []Max140Binary       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 SvrCertIdr,omitempty"`
	ClntCert   []Max10KBinary       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 ClntCert,omitempty"`
	SctyPrfl   Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 SctyPrfl,omitempty"`
}

type NetworkParameters8 struct {
	Tp   NetworkType2Code   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Tp"`
	Accs NetworkParameters7 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Accs"`
}

type NetworkParameters9 struct {
	NtwkTp NetworkType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 NtwkTp"`
	AdrVal Max500Text       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 AdrVal"`
}

// May be one of IPNW, PSTN
type NetworkType1Code string

// May be one of SCK5, SCK4, HTTP
type NetworkType2Code string

// May be one of ACQR, PARQ, RISK, TOKN
type NonFinancialRequestType1Code string

type Organisation26 struct {
	CmonNm       Max70Text              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 CmonNm"`
	Adr          Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Adr,omitempty"`
	CtryCd       ISO3NumericCountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 CtryCd"`
	MrchntCtgyCd Min3Max4Text           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 MrchntCtgyCd"`
	RegdIdr      Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 RegdIdr"`
}

type OriginatorInformation1 struct {
	Cert []Max5000Binary `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Cert,omitempty"`
}

// May be one of BLTH, ETHR, GPRS, GSMF, PSTN, RS23, USBD, USBH, WIFI, WT2G, WT3G, WT4G, WT5G
type POICommunicationType2Code string

type PackageType2 struct {
	PackgId     GenericIdentification176 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 PackgId,omitempty"`
	PackgLngth  float64                  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 PackgLngth,omitempty"`
	OffsetStart float64                  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 OffsetStart,omitempty"`
	OffsetEnd   float64                  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 OffsetEnd,omitempty"`
	PackgBlck   []ExternallyDefinedData2 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 PackgBlck,omitempty"`
}

type Parameter10 struct {
	NcrptnFrmt   EncryptionFormat2Code     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 NcrptnFrmt,omitempty"`
	DgstAlgo     Algorithm16Code           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 DgstAlgo,omitempty"`
	MskGnrtrAlgo AlgorithmIdentification18 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 MskGnrtrAlgo,omitempty"`
}

type Parameter12 struct {
	NcrptnFrmt   EncryptionFormat2Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 NcrptnFrmt,omitempty"`
	InitlstnVctr Max500Binary          `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 InitlstnVctr,omitempty"`
	BPddg        BytePadding1Code      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 BPddg,omitempty"`
}

type Parameter15 struct {
	DgstAlgo     Algorithm16Code           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 DgstAlgo,omitempty"`
	MskGnrtrAlgo AlgorithmIdentification12 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 MskGnrtrAlgo,omitempty"`
	SaltLngth    float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 SaltLngth,omitempty"`
	TrlrFld      float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 TrlrFld,omitempty"`
	OIDCrvNm     Max140Text                `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 OIDCrvNm,omitempty"`
}

type Parameter5 struct {
	DgstAlgo Algorithm11Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 DgstAlgo,omitempty"`
}

type Parameter7 struct {
	InitlstnVctr Max500Binary     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 InitlstnVctr,omitempty"`
	BPddg        BytePadding1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 BPddg,omitempty"`
}

type Parameter9 struct {
	DgstAlgo Algorithm16Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 DgstAlgo,omitempty"`
}

// May be one of PGRP, PSYS, PSNG
type PartyType15Code string

// May be one of OPOI, MERC, ACCP, ITAG, ACQR, CISS, DLIS, MTMG, TAXH, TMGT
type PartyType33Code string

type PaymentTerminalParameters8 struct {
	ActnTp          TerminalManagementAction3Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 ActnTp"`
	VndrId          Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 VndrId,omitempty"`
	Vrsn            Max256Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Vrsn,omitempty"`
	ParamFrmtIdr    Max8Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 ParamFrmtIdr,omitempty"`
	ClckSynctn      ClockSynchronisation3         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 ClckSynctn,omitempty"`
	TmZoneLine      []Max70Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 TmZoneLine,omitempty"`
	LclDtTm         []LocalDateTime1              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 LclDtTm,omitempty"`
	OthrParamsLngth float64                       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 OthrParamsLngth,omitempty"`
	OffsetStart     float64                       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 OffsetStart,omitempty"`
	OffsetEnd       float64                       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 OffsetEnd,omitempty"`
	OthrParams      Max10000Binary                `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 OthrParams,omitempty"`
}

type PhysicalInterfaceParameter1 struct {
	IntrfcNm    Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 IntrfcNm"`
	IntrfcTp    POICommunicationType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 IntrfcTp,omitempty"`
	UsrNm       Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 UsrNm,omitempty"`
	AccsCd      Max35Binary               `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 AccsCd,omitempty"`
	SctyPrfl    Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 SctyPrfl,omitempty"`
	AddtlParams Max2KBinary               `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 AddtlParams,omitempty"`
}

type PointOfInteractionComponentIdentification2 struct {
	ItmNb   Max35Text  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 ItmNb,omitempty"`
	PrvdrId Max35Text  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 PrvdrId,omitempty"`
	Id      Max256Text `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Id,omitempty"`
	SrlNb   Max256Text `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 SrlNb,omitempty"`
}

type ProcessRetry3 struct {
	Dely     Max9NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Dely"`
	MaxNb    float64         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 MaxNb,omitempty"`
	UnitOfTm TimeUnit1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 UnitOfTm,omitempty"`
}

type ProcessTiming6 struct {
	StartTm  ISODateTime     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 StartTm,omitempty"`
	EndTm    ISODateTime     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 EndTm,omitempty"`
	Prd      Max9NumericText `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Prd,omitempty"`
	UnitOfTm TimeUnit1Code   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 UnitOfTm,omitempty"`
}

type Recipient10Choice struct {
	KeyTrnsprt KeyTransport7  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 KeyTrnsprt,omitempty"`
	KEK        KEK7           `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 KEK,omitempty"`
	KeyIdr     KEKIdentifier2 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 KeyIdr,omitempty"`
}

type Recipient9Choice struct {
	IssrAndSrlNb IssuerAndSerialNumber2 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 IssrAndSrlNb,omitempty"`
	KeyIdr       KEKIdentifier2         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 KeyIdr,omitempty"`
}

// May be one of BRND, PROF, GRUP
type ReconciliationCriteria1Code string

type RelativeDistinguishedName1 struct {
	AttrTp  AttributeType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 AttrTp"`
	AttrVal Max140Text         `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 AttrVal"`
}

type SaleToPOIProtocolParameter1 struct {
	ActnTp      TerminalManagementAction3Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 ActnTp"`
	MrchntId    Organisation26                `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 MrchntId,omitempty"`
	Vrsn        Max256Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Vrsn"`
	HstId       Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 HstId"`
	MrchntPOIId Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 MrchntPOIId,omitempty"`
	SaleId      Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 SaleId,omitempty"`
}

type SecurityParameters13 struct {
	ActnTp    TerminalManagementAction3Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 ActnTp"`
	Vrsn      Max256Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Vrsn"`
	POIChllng Max140Binary                  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 POIChllng,omitempty"`
	TMChllng  Max140Binary                  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 TMChllng,omitempty"`
	SctyElmt  []CryptographicKey15          `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 SctyElmt,omitempty"`
}

type ServiceProviderParameters1 struct {
	ActnTp           TerminalManagementAction3Code  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 ActnTp"`
	SvcPrvdrId       []GenericIdentification176     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 SvcPrvdrId"`
	Vrsn             Max256Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Vrsn"`
	ApplId           []Max35Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 ApplId,omitempty"`
	Hst              []AcquirerHostConfiguration8   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Hst,omitempty"`
	NonFinActnSpprtd []NonFinancialRequestType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 NonFinActnSpprtd,omitempty"`
}

type SignedData6 struct {
	Vrsn        float64                     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Vrsn,omitempty"`
	DgstAlgo    []AlgorithmIdentification21 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 DgstAlgo,omitempty"`
	NcpsltdCntt EncapsulatedContent3        `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 NcpsltdCntt,omitempty"`
	Cert        []Max5000Binary             `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Cert,omitempty"`
	Sgnr        []Signer5                   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Sgnr,omitempty"`
}

type Signer5 struct {
	Vrsn        float64                   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Vrsn,omitempty"`
	SgnrId      Recipient9Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 SgnrId,omitempty"`
	DgstAlgo    AlgorithmIdentification21 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 DgstAlgo"`
	SgndAttrbts []GenericInformation1     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 SgndAttrbts,omitempty"`
	SgntrAlgo   AlgorithmIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 SgntrAlgo"`
	Sgntr       Max3000Binary             `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Sgntr"`
}

type TMSHeader1 struct {
	DwnldTrf bool                     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 DwnldTrf"`
	FrmtVrsn Max6Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 FrmtVrsn"`
	XchgId   float64                  `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 XchgId"`
	CreDtTm  ISODateTime              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 CreDtTm"`
	InitgPty GenericIdentification176 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 InitgPty"`
	RcptPty  GenericIdentification177 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 RcptPty,omitempty"`
	Tracblt  []Traceability8          `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Tracblt,omitempty"`
}

type TMSProtocolParameters5 struct {
	ActnTp      TerminalManagementAction3Code `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 ActnTp"`
	TermnlMgrId GenericIdentification176      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 TermnlMgrId"`
	PrtcolVrsn  Max8Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 PrtcolVrsn,omitempty"`
	MntncSvc    []DataSetCategory10Code       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 MntncSvc"`
	Vrsn        Max256Text                    `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Vrsn"`
	ApplId      []Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 ApplId,omitempty"`
	HstId       Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 HstId"`
	POIId       Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 POIId,omitempty"`
	InitgPtyId  Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 InitgPtyId,omitempty"`
	RcptPtyId   Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 RcptPtyId,omitempty"`
	FileTrf     bool                          `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 FileTrf,omitempty"`
	MsgItm      []MessageItemCondition1       `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 MsgItm,omitempty"`
}

// May be one of CREA, DELT, UPDT
type TerminalManagementAction3Code string

type TerminalPackageType2 struct {
	POICmpntId []PointOfInteractionComponentIdentification2 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 POICmpntId,omitempty"`
	Packg      []PackageType2                               `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 Packg"`
}

// May be one of DAYC, HOUR, MINU, MNTH, SECO, WEEK, YEAR
type TimeUnit1Code string

type Traceability8 struct {
	RlayId      GenericIdentification177 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 RlayId"`
	PrtcolNm    Max35Text                `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 PrtcolNm,omitempty"`
	PrtcolVrsn  Max6Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 PrtcolVrsn,omitempty"`
	TracDtTmIn  ISODateTime              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 TracDtTmIn"`
	TracDtTmOut ISODateTime              `xml:"urn:iso:std:iso:20022:tech:xsd:catm.003.001.10 TracDtTmOut"`
}

// May be one of ACTL, ESTM, MAXI, DFLT, RPLT, INCR, DECR, RESD
type TypeOfAmount8Code string

type xsdBase64Binary []byte

func (b *xsdBase64Binary) UnmarshalText(text []byte) (err error) {
	*b, err = base64.StdEncoding.DecodeString(string(text))
	return
}
func (b xsdBase64Binary) MarshalText() ([]byte, error) {
	var buf bytes.Buffer
	enc := base64.NewEncoder(base64.StdEncoding, &buf)
	enc.Write([]byte(b))
	enc.Close()
	return buf.Bytes(), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdTime time.Time

func (t *xsdTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "15:04:05.999999999")
}
func (t xsdTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "15:04:05.999999999")
}
func (t xsdTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
