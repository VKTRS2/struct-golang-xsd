// Code generated by download. DO NOT EDIT.

package iso20022_reda_010_001_01

import (
	"bytes"
	"encoding/xml"
	"time"
)

// Must match the pattern [A-Z]{3,3}
type ActiveOrHistoricCurrencyCode string

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type AnyBICDec2014Identifier string

// Must match the pattern [A-Z]{6,6}
type CFIOct2015Identifier string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DatePeriod2 struct {
	FrDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 FrDt"`
	ToDt ISODate `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 ToDt"`
}

type DatePeriodSearch1Choice struct {
	FrDt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 FrDt,omitempty"`
	ToDt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 ToDt,omitempty"`
	FrToDt DatePeriod2 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 FrToDt,omitempty"`
	EQDt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 EQDt,omitempty"`
	NEQDt  ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 NEQDt,omitempty"`
}

type Document struct {
	SctyQry SecurityQueryV01 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 SctyQry"`
}

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// May be no more than 4 items long
type ExternalFinancialInstrumentIdentificationType1Code string

type GenericIdentification1 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 Id"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 SchmeNm,omitempty"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 Issr,omitempty"`
}

type GenericIdentification30 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 SchmeNm,omitempty"`
}

type GenericIdentification36 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 SchmeNm,omitempty"`
}

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISIN2021Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource3Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 Cd,omitempty"`
	Prtry Max35Text                                          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 Prtry,omitempty"`
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

// May be no more than 140 items long
type Max140Text string

// May be no more than 16 items long
type Max16Text string

// May be no more than 350 items long
type Max350Text string

// May be no more than 35 items long
type Max35Text string

// May be no more than 70 items long
type Max70Text string

type MessageHeader1 struct {
	MsgId   Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 MsgId"`
	CreDtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 CreDtTm,omitempty"`
}

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 Adr,omitempty"`
}

type OtherIdentification1 struct {
	Id  Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 Sfx,omitempty"`
	Tp  IdentificationSource3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 Tp"`
}

type PartyIdentification120Choice struct {
	AnyBIC   AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 AnyBIC,omitempty"`
	PrtryId  GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 PrtryId,omitempty"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 NmAndAdr,omitempty"`
}

type PartyIdentification136 struct {
	Id  PartyIdentification120Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 Id"`
	LEI LEIIdentifier                `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 LEI,omitempty"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 Ctry"`
}

type SecuritiesReturnCriteria1 struct {
	FinInstrmId       bool `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 FinInstrmId"`
	ISOSctyLngNm      bool `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 ISOSctyLngNm"`
	ISOSctyShrtNm     bool `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 ISOSctyShrtNm"`
	ClssfctnFinInstrm bool `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 ClssfctnFinInstrm"`
	MtrtyDt           bool `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 MtrtyDt"`
	IsseDt            bool `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 IsseDt"`
	IsseCcy           bool `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 IsseCcy"`
	CtryOfIsse        bool `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 CtryOfIsse"`
	SctySts           bool `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 SctySts"`
	InvstrCSD         bool `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 InvstrCSD"`
	IssrCSD           bool `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 IssrCSD"`
	TechIssrCSD       bool `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 TechIssrCSD"`
	CSD               bool `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 CSD"`
	SctiesQtyTp       bool `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 SctiesQtyTp"`
	MinDnmtn          bool `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 MinDnmtn"`
	MinMltplQty       bool `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 MinMltplQty"`
	DevtgSttlmUnit    bool `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 DevtgSttlmUnit"`
}

type SecuritiesSearchCriteria4 struct {
	FinInstrmId       SecurityIdentification39         `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 FinInstrmId,omitempty"`
	ClssfctnFinInstrm CFIOct2015Identifier             `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 ClssfctnFinInstrm,omitempty"`
	MtrtyDt           DatePeriodSearch1Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 MtrtyDt,omitempty"`
	IsseDt            DatePeriodSearch1Choice          `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 IsseDt,omitempty"`
	IsseCcy           ActiveOrHistoricCurrencyCode     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 IsseCcy,omitempty"`
	CtryOfIsse        CountryCode                      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 CtryOfIsse,omitempty"`
	SctySts           SecurityStatus3Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 SctySts,omitempty"`
	MntngCSD          SystemPartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 MntngCSD,omitempty"`
	InvstrCSD         SystemPartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 InvstrCSD,omitempty"`
	IssrCSD           SystemPartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 IssrCSD,omitempty"`
	TechIssrCSD       SystemPartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 TechIssrCSD,omitempty"`
	CSD               SystemPartyIdentification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 CSD,omitempty"`
}

type SecurityIdentification39 struct {
	ISIN   ISIN2021Identifier     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 ISIN,omitempty"`
	OthrId []OtherIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 OthrId,omitempty"`
	Desc   Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 Desc,omitempty"`
}

type SecurityQueryV01 struct {
	MsgHdr        MessageHeader1            `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 MsgHdr,omitempty"`
	ReqTp         GenericIdentification1    `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 ReqTp,omitempty"`
	SchCrit       SecuritiesSearchCriteria4 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 SchCrit"`
	SmlSetRtrCrit SecuritiesReturnCriteria1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 SmlSetRtrCrit,omitempty"`
	SplmtryData   []SupplementaryData1      `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 SplmtryData,omitempty"`
}

// May be one of ACTV, INAC, SUSP
type SecurityStatus2Code string

type SecurityStatus3Choice struct {
	Cd    SecurityStatus2Code     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 Cd,omitempty"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 Prtry,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

type SystemPartyIdentification2Choice struct {
	OrgId   PartyIdentification136     `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 OrgId,omitempty"`
	CmbndId SystemPartyIdentification8 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 CmbndId,omitempty"`
}

type SystemPartyIdentification8 struct {
	Id           PartyIdentification136 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 Id"`
	RspnsblPtyId PartyIdentification136 `xml:"urn:iso:std:iso:20022:tech:xsd:reda.010.001.01 RspnsblPtyId,omitempty"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
