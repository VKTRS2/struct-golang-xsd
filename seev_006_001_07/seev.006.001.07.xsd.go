// Code generated by download. DO NOT EDIT.

package iso20022_seev_006_001_07

import (
	"bytes"
	"encoding/xml"
	"time"
)

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type AnyBICDec2014Identifier string

type CancellationProcessingStatus2 struct {
	Sts      CancellationStatus6Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Sts"`
	AddtlInf Max350Text              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 AddtlInf,omitempty"`
}

type CancellationStatus26Choice struct {
	PrcgSts CancellationProcessingStatus2     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 PrcgSts,omitempty"`
	Rjctd   RejectedStatus31Choice            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Rjctd,omitempty"`
	PdgCxl  PendingCancellationStatus10Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 PdgCxl,omitempty"`
}

type CancellationStatus27Choice struct {
	GblCxlSts  CancellationStatus26Choice                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 GblCxlSts,omitempty"`
	DtldCxlSts []DetailedInstructionCancellationStatus14 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 DtldCxlSts,omitempty"`
}

// May be one of PACK, CAND, RCIS
type CancellationStatus6Code string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DateAndPlaceOfBirth2 struct {
	BirthDt     ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 BirthDt"`
	PrvcOfBirth Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 PrvcOfBirth,omitempty"`
	CityOfBirth Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 CityOfBirth,omitempty"`
	CtryOfBirth CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 CtryOfBirth,omitempty"`
}

type DetailedInstructionCancellationStatus14 struct {
	SnglInstrCxlId Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 SnglInstrCxlId"`
	AcctId         Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 AcctId,omitempty"`
	SubAcctId      Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 SubAcctId,omitempty"`
	InstrCxlSts    CancellationStatus26Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 InstrCxlSts"`
}

type DetailedInstructionStatus14 struct {
	SnglInstrId Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 SnglInstrId"`
	AcctId      Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 AcctId,omitempty"`
	SubAcctId   Max35Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 SubAcctId,omitempty"`
	InstrSts    InstructionStatus10Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 InstrSts"`
}

type Document struct {
	MtgInstrSts MeetingInstructionStatusV07 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 MtgInstrSts"`
}

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// May be no more than 4 items long
type ExternalFinancialInstrumentIdentificationType1Code string

type GenericIdentification13 struct {
	Id      Max4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Id"`
	SchmeNm Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 SchmeNm,omitempty"`
	Issr    Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Issr"`
}

type GenericIdentification30 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 SchmeNm,omitempty"`
}

type GenericIdentification36 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 SchmeNm,omitempty"`
}

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource3Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Cd,omitempty"`
	Prtry Max35Text                                          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Prtry,omitempty"`
}

type IdentificationType45Choice struct {
	Cd    TypeOfIdentification4Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Cd,omitempty"`
	Prtry GenericIdentification30   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Prtry,omitempty"`
}

type InstructionProcessingStatus5 struct {
	Sts           Status9Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Sts"`
	AttndncCardNb Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 AttndncCardNb,omitempty"`
	AddtlInf      Max350Text  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 AddtlInf,omitempty"`
}

type InstructionStatus10Choice struct {
	PrcgSts InstructionProcessingStatus5 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 PrcgSts,omitempty"`
	Rjctd   RejectedStatus36Choice       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Rjctd,omitempty"`
	Pdg     PendingStatus55Choice        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Pdg,omitempty"`
}

type InstructionType2Choice struct {
	InstrId    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 InstrId,omitempty"`
	InstrCxlId Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 InstrCxlId,omitempty"`
}

type InstructionTypeStatus4Choice struct {
	InstrSts []DetailedInstructionStatus14 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 InstrSts,omitempty"`
	CxlSts   CancellationStatus27Choice    `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 CxlSts,omitempty"`
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

// May be no more than 140 items long
type Max140Text string

// May be no more than 16 items long
type Max16Text string

// May be no more than 256 items long
type Max256Text string

// May be no more than 350 items long
type Max350Text string

// May be no more than 35 items long
type Max35Text string

// Must match the pattern [a-zA-Z0-9]{1,4}
type Max4AlphaNumericText string

// May be no more than 50 items long
type Max50Text string

// May be no more than 70 items long
type Max70Text string

type MeetingInstructionStatusV07 struct {
	InstrTp     InstructionType2Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 InstrTp"`
	MtgRef      MeetingReference10             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 MtgRef"`
	FinInstrmId SecurityIdentification19       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 FinInstrmId"`
	InstrTpSts  InstructionTypeStatus4Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 InstrTpSts"`
	CnfrmgPty   PartyIdentification226Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 CnfrmgPty"`
	VoteCstgPty PartyIdentification226Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 VoteCstgPty"`
	RghtsHldr   []PartyIdentification233Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 RghtsHldr,omitempty"`
	SplmtryData []SupplementaryData1           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 SplmtryData,omitempty"`
}

type MeetingReference10 struct {
	MtgId      Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 MtgId"`
	IssrMtgId  Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 IssrMtgId,omitempty"`
	MtgDtAndTm ISODateTime                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 MtgDtAndTm"`
	Tp         MeetingType4Code                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Tp"`
	Clssfctn   MeetingTypeClassification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Clssfctn,omitempty"`
	Lctn       []PostalAddress1                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Lctn,omitempty"`
	Issr       PartyIdentification129Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Issr,omitempty"`
}

// May be one of XMET, GMET, MIXD, SPCL, BMET, CMET
type MeetingType4Code string

type MeetingTypeClassification2Choice struct {
	Cd    MeetingTypeClassification2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Cd,omitempty"`
	Prtry GenericIdentification13        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Prtry,omitempty"`
}

// May be one of AMET, CLAS, ISSU, OMET, VRHI
type MeetingTypeClassification2Code string

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Adr,omitempty"`
}

// May be one of DOCT, MADM, MISS, MIST, MIKS
type NamePrefix2Code string

type NaturalPersonIdentification1 struct {
	Id   Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Id"`
	IdTp IdentificationType45Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 IdTp,omitempty"`
}

// May be one of NORE
type NoReasonCode string

type OtherIdentification1 struct {
	Id  Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Sfx,omitempty"`
	Tp  IdentificationSource3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Tp"`
}

type PartyIdentification129Choice struct {
	AnyBIC   AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 AnyBIC,omitempty"`
	PrtryId  GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 PrtryId,omitempty"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 NmAndAdr,omitempty"`
	LEI      LEIIdentifier           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 LEI,omitempty"`
}

type PartyIdentification198Choice struct {
	NtlRegnNb Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 NtlRegnNb,omitempty"`
	LEI       LEIIdentifier           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 LEI,omitempty"`
	AnyBIC    AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 AnyBIC,omitempty"`
	ClntId    Max50Text               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 ClntId,omitempty"`
	PrtryId   GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 PrtryId,omitempty"`
}

type PartyIdentification222 struct {
	NmAndAdr PersonName1                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 NmAndAdr"`
	EmailAdr Max256Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 EmailAdr,omitempty"`
	Id       NaturalPersonIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Id"`
}

type PartyIdentification224 struct {
	NmAndAdr PersonName2                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 NmAndAdr"`
	EmailAdr Max256Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 EmailAdr,omitempty"`
	Id       PartyIdentification198Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Id,omitempty"`
}

type PartyIdentification226Choice struct {
	LglPrsn  PartyIdentification224 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 LglPrsn,omitempty"`
	NtrlPrsn PartyIdentification222 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 NtrlPrsn,omitempty"`
}

type PartyIdentification233Choice struct {
	LglPrsn  PartyIdentification224   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 LglPrsn,omitempty"`
	NtrlPrsn []PartyIdentification240 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 NtrlPrsn,omitempty"`
}

type PartyIdentification240 struct {
	NmAndAdr        PersonName3                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 NmAndAdr"`
	EmailAdr        Max256Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 EmailAdr,omitempty"`
	Id              NaturalPersonIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Id,omitempty"`
	Ntlty           CountryCode                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Ntlty,omitempty"`
	DtAndPlcOfBirth DateAndPlaceOfBirth2         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 DtAndPlcOfBirth,omitempty"`
}

// May be one of DQUA, LATE, OTHR, ADEA
type PendingCancellationReason6Code string

type PendingCancellationReason7Choice struct {
	Cd    PendingCancellationReason6Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Cd,omitempty"`
	Prtry GenericIdentification30        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Prtry,omitempty"`
}

type PendingCancellationStatus10Choice struct {
	NotSpcfdRsn NoReasonCode                        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 NotSpcfdRsn,omitempty"`
	Rsn         []PendingCancellationStatusReason10 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Rsn,omitempty"`
}

type PendingCancellationStatusReason10 struct {
	RsnCd       PendingCancellationReason7Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 RsnCd"`
	AddtlRsnInf Max350Text                       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 AddtlRsnInf,omitempty"`
}

// May be one of ADEA, ADDM, DQUA, DREM, FULL, IPOA, IPOS, LACK, LATE, NPOS, IREG, OTHR, PRXY, PENR
type PendingReason16Code string

type PendingReason51Choice struct {
	Cd    PendingReason16Code     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Cd,omitempty"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Prtry,omitempty"`
}

type PendingStatus55Choice struct {
	NoSpcfdRsn NoReasonCode            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 NoSpcfdRsn,omitempty"`
	Rsn        []PendingStatusReason16 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Rsn,omitempty"`
}

type PendingStatusReason16 struct {
	RsnCd       PendingReason51Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 RsnCd"`
	AddtlRsnInf Max350Text            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 AddtlRsnInf,omitempty"`
}

type PersonName1 struct {
	FrstNm Max350Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 FrstNm"`
	Srnm   Max350Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Srnm"`
	Adr    PostalAddress26 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Adr,omitempty"`
}

type PersonName2 struct {
	Nm  Max350Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Nm"`
	Adr PostalAddress26 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Adr,omitempty"`
}

type PersonName3 struct {
	NmPrfx NamePrefix2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 NmPrfx,omitempty"`
	FrstNm Max350Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 FrstNm"`
	Srnm   Max350Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Srnm"`
	Adr    PostalAddress26 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Adr,omitempty"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Ctry"`
}

type PostalAddress26 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 BldgNb,omitempty"`
	PstBx       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 PstBx,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Ctry"`
}

type RejectedReason29Choice struct {
	Cd    RejectionReason51Code   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Cd,omitempty"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Prtry,omitempty"`
}

type RejectedReason36Choice struct {
	Cd    RejectionReason58Code   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Cd,omitempty"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Prtry,omitempty"`
}

type RejectedStatus31Choice struct {
	NoSpcfdRsn NoReasonCode             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 NoSpcfdRsn,omitempty"`
	Rsn        []RejectedStatusReason28 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Rsn,omitempty"`
}

type RejectedStatus36Choice struct {
	NoSpcfdRsn NoReasonCode             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 NoSpcfdRsn,omitempty"`
	Rsn        []RejectedStatusReason34 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Rsn,omitempty"`
}

type RejectedStatusReason28 struct {
	RsnCd       RejectedReason29Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 RsnCd"`
	AddtlRsnInf Max350Text             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 AddtlRsnInf,omitempty"`
}

type RejectedStatusReason34 struct {
	RsnCd       RejectedReason36Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 RsnCd"`
	AddtlRsnInf Max350Text             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 AddtlRsnInf,omitempty"`
}

// May be one of ADEA, DQUA, DCAN, DPRG, DSEC, EVNM, INIR, LATE, OTHR, RBIS, SAFE, ULNK
type RejectionReason51Code string

// May be one of ADEA, ADDM, MCAN, DQUA, DREM, DSEC, EVNM, FULL, IPOA, IPOS, IREG, LATE, NPOS, OTHR, PART, PRXY, RBIS, RESN, SAFE, SPLT, ULNK, OPTY, LACK, LIST, NOSL
type RejectionReason58Code string

type SecurityIdentification19 struct {
	ISIN   ISINOct2015Identifier  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 ISIN,omitempty"`
	OthrId []OtherIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 OthrId,omitempty"`
	Desc   Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Desc,omitempty"`
}

// May be one of PACK, ATTC, CAND, CSUB, FRWD, RCIS, REGM, STIN
type Status9Code string

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.006.001.07 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

// May be one of ARNU, CUST, CORP, DRLC, IDCD, NRIN, CCPT, SOCS, TXID
type TypeOfIdentification4Code string

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
