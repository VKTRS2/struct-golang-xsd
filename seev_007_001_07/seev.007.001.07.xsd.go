// Code generated by download. DO NOT EDIT.

package iso20022_seev_007_001_07

import (
	"bytes"
	"encoding/xml"
	"time"
)

// May be one of ADDR, PBOX, HOME, BIZZ, MLTO, DLVY
type AddressType2Code string

// Must match the pattern [A-Z0-9]{4,4}[A-Z]{2,2}[A-Z0-9]{2,2}([A-Z0-9]{3,3}){0,1}
type AnyBICDec2014Identifier string

// Must match the pattern [A-Z]{2,2}
type CountryCode string

type DateAndDateTime1Choice struct {
	Dt   ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Dt,omitempty"`
	DtTm ISODateTime `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 DtTm,omitempty"`
}

type DateAndPlaceOfBirth2 struct {
	BirthDt     ISODate     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 BirthDt"`
	PrvcOfBirth Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 PrvcOfBirth,omitempty"`
	CityOfBirth Max35Text   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 CityOfBirth,omitempty"`
	CtryOfBirth CountryCode `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 CtryOfBirth,omitempty"`
}

type DetailedInstructionStatus15 struct {
	SnglInstrId  Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 SnglInstrId"`
	AcctId       Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 AcctId,omitempty"`
	AcctOwnr     PartyIdentification231Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 AcctOwnr,omitempty"`
	SubAcctId    Max35Text                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 SubAcctId,omitempty"`
	RghtsHldr    []PartyIdentification233Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 RghtsHldr,omitempty"`
	Prxy         PartyIdentification232Choice   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Prxy,omitempty"`
	StgInstr     bool                           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 StgInstr,omitempty"`
	ModltyOfCntg ModalityOfCounting1Choice      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 ModltyOfCntg"`
	VoteRctDtTm  DateAndDateTime1Choice         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 VoteRctDtTm,omitempty"`
	VotePerRsltn []Vote13                       `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 VotePerRsltn,omitempty"`
}

type Document struct {
	MtgVoteExctnConf MeetingVoteExecutionConfirmationV07 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 MtgVoteExctnConf"`
}

// Must match the pattern [a-zA-Z0-9]{4}
type Exact4AlphaNumericText string

// May be no more than 4 items long
type ExternalFinancialInstrumentIdentificationType1Code string

type FinancialInstrumentQuantity18Choice struct {
	Unit    float64 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Unit,omitempty"`
	FaceAmt float64 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 FaceAmt,omitempty"`
}

type GenericIdentification13 struct {
	Id      Max4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Id"`
	SchmeNm Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 SchmeNm,omitempty"`
	Issr    Max35Text            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Issr"`
}

type GenericIdentification30 struct {
	Id      Exact4AlphaNumericText `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Id"`
	Issr    Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Issr"`
	SchmeNm Max35Text              `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 SchmeNm,omitempty"`
}

type GenericIdentification36 struct {
	Id      Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Id"`
	Issr    Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Issr"`
	SchmeNm Max35Text `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 SchmeNm,omitempty"`
}

// Must match the pattern [A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}
type ISINOct2015Identifier string

type ISODate time.Time

func (t *ISODate) UnmarshalText(text []byte) error {
	return (*xsdDate)(t).UnmarshalText(text)
}
func (t ISODate) MarshalText() ([]byte, error) {
	return xsdDate(t).MarshalText()
}

type ISODateTime time.Time

func (t *ISODateTime) UnmarshalText(text []byte) error {
	return (*xsdDateTime)(t).UnmarshalText(text)
}
func (t ISODateTime) MarshalText() ([]byte, error) {
	return xsdDateTime(t).MarshalText()
}

type IdentificationSource3Choice struct {
	Cd    ExternalFinancialInstrumentIdentificationType1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Cd,omitempty"`
	Prtry Max35Text                                          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Prtry,omitempty"`
}

type IdentificationType45Choice struct {
	Cd    TypeOfIdentification4Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Cd,omitempty"`
	Prtry GenericIdentification30   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Prtry,omitempty"`
}

// Must match the pattern [A-Z0-9]{18,18}[0-9]{2,2}
type LEIIdentifier string

// May be no more than 140 items long
type Max140Text string

// May be no more than 16 items long
type Max16Text string

// May be no more than 2048 items long
type Max2048Text string

// May be no more than 256 items long
type Max256Text string

// May be no more than 350 items long
type Max350Text string

// May be no more than 35 items long
type Max35Text string

// Must match the pattern [a-zA-Z0-9]{1,4}
type Max4AlphaNumericText string

// May be no more than 50 items long
type Max50Text string

// May be no more than 70 items long
type Max70Text string

type MeetingReference10 struct {
	MtgId      Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 MtgId"`
	IssrMtgId  Max35Text                        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 IssrMtgId,omitempty"`
	MtgDtAndTm ISODateTime                      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 MtgDtAndTm"`
	Tp         MeetingType4Code                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Tp"`
	Clssfctn   MeetingTypeClassification2Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Clssfctn,omitempty"`
	Lctn       []PostalAddress1                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Lctn,omitempty"`
	Issr       PartyIdentification129Choice     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Issr,omitempty"`
}

// May be one of XMET, GMET, MIXD, SPCL, BMET, CMET
type MeetingType4Code string

type MeetingTypeClassification2Choice struct {
	Cd    MeetingTypeClassification2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Cd,omitempty"`
	Prtry GenericIdentification13        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Prtry,omitempty"`
}

// May be one of AMET, CLAS, ISSU, OMET, VRHI
type MeetingTypeClassification2Code string

type MeetingVoteExecutionConfirmationV07 struct {
	MtgInstrId           Max35Text                     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 MtgInstrId"`
	MtgRef               MeetingReference10            `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 MtgRef"`
	FinInstrmId          SecurityIdentification19      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 FinInstrmId"`
	VoteInstrs           []DetailedInstructionStatus15 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 VoteInstrs,omitempty"`
	VoteInstrsConfURLAdr Max2048Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 VoteInstrsConfURLAdr,omitempty"`
	SplmtryData          []SupplementaryData1          `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 SplmtryData,omitempty"`
}

type ModalityOfCounting1Choice struct {
	Cd    ModalityOfCounting1Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Cd,omitempty"`
	Prtry GenericIdentification30 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Prtry,omitempty"`
}

// May be one of EVAM, EVBM, PVBM, PVAM
type ModalityOfCounting1Code string

type NameAndAddress5 struct {
	Nm  Max350Text     `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Nm"`
	Adr PostalAddress1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Adr,omitempty"`
}

// May be one of DOCT, MADM, MISS, MIST, MIKS
type NamePrefix2Code string

type NaturalPersonIdentification1 struct {
	Id   Max35Text                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Id"`
	IdTp IdentificationType45Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 IdTp,omitempty"`
}

type OtherIdentification1 struct {
	Id  Max35Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Id"`
	Sfx Max16Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Sfx,omitempty"`
	Tp  IdentificationSource3Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Tp"`
}

type PartyIdentification129Choice struct {
	AnyBIC   AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 AnyBIC,omitempty"`
	PrtryId  GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 PrtryId,omitempty"`
	NmAndAdr NameAndAddress5         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 NmAndAdr,omitempty"`
	LEI      LEIIdentifier           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 LEI,omitempty"`
}

type PartyIdentification198Choice struct {
	NtlRegnNb Max35Text               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 NtlRegnNb,omitempty"`
	LEI       LEIIdentifier           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 LEI,omitempty"`
	AnyBIC    AnyBICDec2014Identifier `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 AnyBIC,omitempty"`
	ClntId    Max50Text               `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 ClntId,omitempty"`
	PrtryId   GenericIdentification36 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 PrtryId,omitempty"`
}

type PartyIdentification221 struct {
	NmAndAdr PersonName2                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 NmAndAdr"`
	EmailAdr Max256Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 EmailAdr,omitempty"`
	Id       PartyIdentification198Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Id"`
}

type PartyIdentification224 struct {
	NmAndAdr PersonName2                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 NmAndAdr"`
	EmailAdr Max256Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 EmailAdr,omitempty"`
	Id       PartyIdentification198Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Id,omitempty"`
}

type PartyIdentification231Choice struct {
	LglPrsn  PartyIdentification221   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 LglPrsn,omitempty"`
	NtrlPrsn []PartyIdentification238 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 NtrlPrsn,omitempty"`
}

type PartyIdentification232Choice struct {
	LglPrsn  PartyIdentification221 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 LglPrsn,omitempty"`
	NtrlPrsn PartyIdentification238 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 NtrlPrsn,omitempty"`
}

type PartyIdentification233Choice struct {
	LglPrsn  PartyIdentification224   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 LglPrsn,omitempty"`
	NtrlPrsn []PartyIdentification240 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 NtrlPrsn,omitempty"`
}

type PartyIdentification238 struct {
	NmAndAdr        PersonName3                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 NmAndAdr"`
	EmailAdr        Max256Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 EmailAdr,omitempty"`
	Id              NaturalPersonIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Id"`
	Ntlty           CountryCode                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Ntlty,omitempty"`
	DtAndPlcOfBirth DateAndPlaceOfBirth2         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 DtAndPlcOfBirth,omitempty"`
}

type PartyIdentification240 struct {
	NmAndAdr        PersonName3                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 NmAndAdr"`
	EmailAdr        Max256Text                   `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 EmailAdr,omitempty"`
	Id              NaturalPersonIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Id,omitempty"`
	Ntlty           CountryCode                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Ntlty,omitempty"`
	DtAndPlcOfBirth DateAndPlaceOfBirth2         `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 DtAndPlcOfBirth,omitempty"`
}

type PersonName2 struct {
	Nm  Max350Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Nm"`
	Adr PostalAddress26 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Adr,omitempty"`
}

type PersonName3 struct {
	NmPrfx NamePrefix2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 NmPrfx,omitempty"`
	FrstNm Max350Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 FrstNm"`
	Srnm   Max350Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Srnm"`
	Adr    PostalAddress26 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Adr,omitempty"`
}

type PostalAddress1 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 BldgNb,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Ctry"`
}

type PostalAddress26 struct {
	AdrTp       AddressType2Code `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 AdrTp,omitempty"`
	AdrLine     []Max70Text      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 AdrLine,omitempty"`
	StrtNm      Max70Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 StrtNm,omitempty"`
	BldgNb      Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 BldgNb,omitempty"`
	PstBx       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 PstBx,omitempty"`
	PstCd       Max16Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 PstCd,omitempty"`
	TwnNm       Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 TwnNm,omitempty"`
	CtrySubDvsn Max35Text        `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 CtrySubDvsn,omitempty"`
	Ctry        CountryCode      `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Ctry"`
}

type ProprietaryVote2 struct {
	Cd  GenericIdentification30             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Cd"`
	Qty FinancialInstrumentQuantity18Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Qty"`
}

type SecurityIdentification19 struct {
	ISIN   ISINOct2015Identifier  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 ISIN,omitempty"`
	OthrId []OtherIdentification1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 OthrId,omitempty"`
	Desc   Max140Text             `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Desc,omitempty"`
}

type SupplementaryData1 struct {
	PlcAndNm Max350Text                 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 PlcAndNm,omitempty"`
	Envlp    SupplementaryDataEnvelope1 `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Envlp"`
}

type SupplementaryDataEnvelope1 struct {
	Item string `xml:",any"`
}

// May be one of ARNU, CUST, CORP, DRLC, IDCD, NRIN, CCPT, SOCS, TXID
type TypeOfIdentification4Code string

type Vote13 struct {
	IssrLabl  Max35Text                           `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 IssrLabl"`
	For       FinancialInstrumentQuantity18Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 For,omitempty"`
	Agnst     FinancialInstrumentQuantity18Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Agnst,omitempty"`
	Abstn     FinancialInstrumentQuantity18Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Abstn,omitempty"`
	Wthhld    FinancialInstrumentQuantity18Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Wthhld,omitempty"`
	WthMgmt   FinancialInstrumentQuantity18Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 WthMgmt,omitempty"`
	AgnstMgmt FinancialInstrumentQuantity18Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 AgnstMgmt,omitempty"`
	Dscrtnry  FinancialInstrumentQuantity18Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Dscrtnry,omitempty"`
	OneYr     FinancialInstrumentQuantity18Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 OneYr,omitempty"`
	TwoYrs    FinancialInstrumentQuantity18Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 TwoYrs,omitempty"`
	ThreeYrs  FinancialInstrumentQuantity18Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 ThreeYrs,omitempty"`
	NoActn    FinancialInstrumentQuantity18Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 NoActn,omitempty"`
	Blnk      FinancialInstrumentQuantity18Choice `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Blnk,omitempty"`
	Prtry     []ProprietaryVote2                  `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Prtry,omitempty"`
	Wdrwn     bool                                `xml:"urn:iso:std:iso:20022:tech:xsd:seev.007.001.07 Wdrwn,omitempty"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdDateTime time.Time

func (t *xsdDateTime) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02T15:04:05.999999999")
}
func (t xsdDateTime) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDateTime) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
